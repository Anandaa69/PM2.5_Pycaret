2025-03-14 21:39:51,970:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-14 21:39:51,972:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-14 21:39:51,972:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-14 21:39:51,972:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-14 21:39:52,045:INFO:Initializing load_model()
2025-03-14 21:39:52,047:INFO:load_model(model_name=temp_model_1, platform=None, authentication=None, verbose=True)
2025-03-14 21:40:09,720:INFO:Initializing load_model()
2025-03-14 21:40:09,720:INFO:load_model(model_name=ada_and_dt_jsps01_temp_model, platform=None, authentication=None, verbose=True)
2025-03-14 21:40:11,998:INFO:Initializing predict_model()
2025-03-14 21:40:11,998:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34998150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:11,999:INFO:Checking exceptions
2025-03-14 21:40:11,999:INFO:Preloading libraries
2025-03-14 21:40:11,999:INFO:Set up data.
2025-03-14 21:40:12,004:INFO:Set up index.
2025-03-14 21:40:12,098:INFO:Initializing predict_model()
2025-03-14 21:40:12,098:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:12,098:INFO:Checking exceptions
2025-03-14 21:40:12,098:INFO:Preloading libraries
2025-03-14 21:40:12,098:INFO:Set up data.
2025-03-14 21:40:12,101:INFO:Set up index.
2025-03-14 21:40:12,202:INFO:Initializing predict_model()
2025-03-14 21:40:12,202:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819F650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:12,202:INFO:Checking exceptions
2025-03-14 21:40:12,202:INFO:Preloading libraries
2025-03-14 21:40:12,202:INFO:Set up data.
2025-03-14 21:40:12,205:INFO:Set up index.
2025-03-14 21:40:12,293:INFO:Initializing predict_model()
2025-03-14 21:40:12,293:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38173050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:12,293:INFO:Checking exceptions
2025-03-14 21:40:12,293:INFO:Preloading libraries
2025-03-14 21:40:12,293:INFO:Set up data.
2025-03-14 21:40:12,296:INFO:Set up index.
2025-03-14 21:40:12,392:INFO:Initializing predict_model()
2025-03-14 21:40:12,392:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FDE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:12,392:INFO:Checking exceptions
2025-03-14 21:40:12,392:INFO:Preloading libraries
2025-03-14 21:40:12,392:INFO:Set up data.
2025-03-14 21:40:12,395:INFO:Set up index.
2025-03-14 21:40:12,487:INFO:Initializing predict_model()
2025-03-14 21:40:12,487:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38199A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:12,487:INFO:Checking exceptions
2025-03-14 21:40:12,487:INFO:Preloading libraries
2025-03-14 21:40:12,487:INFO:Set up data.
2025-03-14 21:40:12,490:INFO:Set up index.
2025-03-14 21:40:12,583:INFO:Initializing predict_model()
2025-03-14 21:40:12,583:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381973D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:12,583:INFO:Checking exceptions
2025-03-14 21:40:12,583:INFO:Preloading libraries
2025-03-14 21:40:12,583:INFO:Set up data.
2025-03-14 21:40:12,588:INFO:Set up index.
2025-03-14 21:40:12,677:INFO:Initializing predict_model()
2025-03-14 21:40:12,677:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CDF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:12,677:INFO:Checking exceptions
2025-03-14 21:40:12,677:INFO:Preloading libraries
2025-03-14 21:40:12,677:INFO:Set up data.
2025-03-14 21:40:12,680:INFO:Set up index.
2025-03-14 21:40:12,770:INFO:Initializing predict_model()
2025-03-14 21:40:12,770:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CBB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:12,770:INFO:Checking exceptions
2025-03-14 21:40:12,770:INFO:Preloading libraries
2025-03-14 21:40:12,772:INFO:Set up data.
2025-03-14 21:40:12,773:INFO:Set up index.
2025-03-14 21:40:12,865:INFO:Initializing predict_model()
2025-03-14 21:40:12,865:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38173050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:12,865:INFO:Checking exceptions
2025-03-14 21:40:12,865:INFO:Preloading libraries
2025-03-14 21:40:12,865:INFO:Set up data.
2025-03-14 21:40:12,868:INFO:Set up index.
2025-03-14 21:40:12,965:INFO:Initializing predict_model()
2025-03-14 21:40:12,965:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A938D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:12,965:INFO:Checking exceptions
2025-03-14 21:40:12,965:INFO:Preloading libraries
2025-03-14 21:40:12,967:INFO:Set up data.
2025-03-14 21:40:12,970:INFO:Set up index.
2025-03-14 21:40:13,069:INFO:Initializing predict_model()
2025-03-14 21:40:13,069:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38194610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:13,069:INFO:Checking exceptions
2025-03-14 21:40:13,069:INFO:Preloading libraries
2025-03-14 21:40:13,069:INFO:Set up data.
2025-03-14 21:40:13,072:INFO:Set up index.
2025-03-14 21:40:13,167:INFO:Initializing predict_model()
2025-03-14 21:40:13,167:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36B5B3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:13,167:INFO:Checking exceptions
2025-03-14 21:40:13,167:INFO:Preloading libraries
2025-03-14 21:40:13,167:INFO:Set up data.
2025-03-14 21:40:13,170:INFO:Set up index.
2025-03-14 21:40:13,258:INFO:Initializing predict_model()
2025-03-14 21:40:13,258:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A92B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:13,258:INFO:Checking exceptions
2025-03-14 21:40:13,258:INFO:Preloading libraries
2025-03-14 21:40:13,258:INFO:Set up data.
2025-03-14 21:40:13,261:INFO:Set up index.
2025-03-14 21:40:13,348:INFO:Initializing predict_model()
2025-03-14 21:40:13,348:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FE690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E38317A60>)
2025-03-14 21:40:13,348:INFO:Checking exceptions
2025-03-14 21:40:13,348:INFO:Preloading libraries
2025-03-14 21:40:13,348:INFO:Set up data.
2025-03-14 21:40:13,351:INFO:Set up index.
2025-03-14 21:40:13,441:INFO:Initializing predict_model()
2025-03-14 21:40:13,441:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34395250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:13,441:INFO:Checking exceptions
2025-03-14 21:40:13,441:INFO:Preloading libraries
2025-03-14 21:40:13,441:INFO:Set up data.
2025-03-14 21:40:13,444:INFO:Set up index.
2025-03-14 21:40:13,534:INFO:Initializing predict_model()
2025-03-14 21:40:13,534:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B419A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:13,534:INFO:Checking exceptions
2025-03-14 21:40:13,534:INFO:Preloading libraries
2025-03-14 21:40:13,534:INFO:Set up data.
2025-03-14 21:40:13,537:INFO:Set up index.
2025-03-14 21:40:13,626:INFO:Initializing predict_model()
2025-03-14 21:40:13,626:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CF4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:13,626:INFO:Checking exceptions
2025-03-14 21:40:13,626:INFO:Preloading libraries
2025-03-14 21:40:13,626:INFO:Set up data.
2025-03-14 21:40:13,627:INFO:Set up index.
2025-03-14 21:40:13,711:INFO:Initializing predict_model()
2025-03-14 21:40:13,711:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38095F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:13,711:INFO:Checking exceptions
2025-03-14 21:40:13,711:INFO:Preloading libraries
2025-03-14 21:40:13,711:INFO:Set up data.
2025-03-14 21:40:13,714:INFO:Set up index.
2025-03-14 21:40:13,802:INFO:Initializing predict_model()
2025-03-14 21:40:13,802:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38097E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:13,802:INFO:Checking exceptions
2025-03-14 21:40:13,802:INFO:Preloading libraries
2025-03-14 21:40:13,802:INFO:Set up data.
2025-03-14 21:40:13,805:INFO:Set up index.
2025-03-14 21:40:13,893:INFO:Initializing predict_model()
2025-03-14 21:40:13,893:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3638BC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:13,894:INFO:Checking exceptions
2025-03-14 21:40:13,894:INFO:Preloading libraries
2025-03-14 21:40:13,894:INFO:Set up data.
2025-03-14 21:40:13,896:INFO:Set up index.
2025-03-14 21:40:13,987:INFO:Initializing predict_model()
2025-03-14 21:40:13,987:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34C27290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:13,987:INFO:Checking exceptions
2025-03-14 21:40:13,987:INFO:Preloading libraries
2025-03-14 21:40:13,987:INFO:Set up data.
2025-03-14 21:40:13,990:INFO:Set up index.
2025-03-14 21:40:14,078:INFO:Initializing predict_model()
2025-03-14 21:40:14,078:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38088310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:14,078:INFO:Checking exceptions
2025-03-14 21:40:14,078:INFO:Preloading libraries
2025-03-14 21:40:14,078:INFO:Set up data.
2025-03-14 21:40:14,081:INFO:Set up index.
2025-03-14 21:40:14,166:INFO:Initializing predict_model()
2025-03-14 21:40:14,166:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3810B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:14,167:INFO:Checking exceptions
2025-03-14 21:40:14,167:INFO:Preloading libraries
2025-03-14 21:40:14,167:INFO:Set up data.
2025-03-14 21:40:14,170:INFO:Set up index.
2025-03-14 21:40:14,271:INFO:Initializing predict_model()
2025-03-14 21:40:14,271:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381998D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:14,271:INFO:Checking exceptions
2025-03-14 21:40:14,271:INFO:Preloading libraries
2025-03-14 21:40:14,271:INFO:Set up data.
2025-03-14 21:40:14,274:INFO:Set up index.
2025-03-14 21:40:14,366:INFO:Initializing predict_model()
2025-03-14 21:40:14,366:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FFE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:14,366:INFO:Checking exceptions
2025-03-14 21:40:14,366:INFO:Preloading libraries
2025-03-14 21:40:14,366:INFO:Set up data.
2025-03-14 21:40:14,369:INFO:Set up index.
2025-03-14 21:40:14,458:INFO:Initializing predict_model()
2025-03-14 21:40:14,458:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B419A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:14,458:INFO:Checking exceptions
2025-03-14 21:40:14,458:INFO:Preloading libraries
2025-03-14 21:40:14,458:INFO:Set up data.
2025-03-14 21:40:14,461:INFO:Set up index.
2025-03-14 21:40:14,554:INFO:Initializing predict_model()
2025-03-14 21:40:14,554:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38091290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:14,554:INFO:Checking exceptions
2025-03-14 21:40:14,554:INFO:Preloading libraries
2025-03-14 21:40:14,554:INFO:Set up data.
2025-03-14 21:40:14,557:INFO:Set up index.
2025-03-14 21:40:14,648:INFO:Initializing predict_model()
2025-03-14 21:40:14,650:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381716D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:14,650:INFO:Checking exceptions
2025-03-14 21:40:14,650:INFO:Preloading libraries
2025-03-14 21:40:14,650:INFO:Set up data.
2025-03-14 21:40:14,653:INFO:Set up index.
2025-03-14 21:40:14,742:INFO:Initializing predict_model()
2025-03-14 21:40:14,742:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381971D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:14,742:INFO:Checking exceptions
2025-03-14 21:40:14,742:INFO:Preloading libraries
2025-03-14 21:40:14,742:INFO:Set up data.
2025-03-14 21:40:14,745:INFO:Set up index.
2025-03-14 21:40:14,831:INFO:Initializing predict_model()
2025-03-14 21:40:14,831:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808BFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:14,831:INFO:Checking exceptions
2025-03-14 21:40:14,831:INFO:Preloading libraries
2025-03-14 21:40:14,831:INFO:Set up data.
2025-03-14 21:40:14,834:INFO:Set up index.
2025-03-14 21:40:14,920:INFO:Initializing predict_model()
2025-03-14 21:40:14,920:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A92D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:14,920:INFO:Checking exceptions
2025-03-14 21:40:14,920:INFO:Preloading libraries
2025-03-14 21:40:14,920:INFO:Set up data.
2025-03-14 21:40:14,924:INFO:Set up index.
2025-03-14 21:40:15,013:INFO:Initializing predict_model()
2025-03-14 21:40:15,013:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34B32390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:15,013:INFO:Checking exceptions
2025-03-14 21:40:15,013:INFO:Preloading libraries
2025-03-14 21:40:15,013:INFO:Set up data.
2025-03-14 21:40:15,016:INFO:Set up index.
2025-03-14 21:40:15,103:INFO:Initializing predict_model()
2025-03-14 21:40:15,105:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38091610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:15,105:INFO:Checking exceptions
2025-03-14 21:40:15,105:INFO:Preloading libraries
2025-03-14 21:40:15,105:INFO:Set up data.
2025-03-14 21:40:15,107:INFO:Set up index.
2025-03-14 21:40:15,195:INFO:Initializing predict_model()
2025-03-14 21:40:15,195:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38101A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:15,195:INFO:Checking exceptions
2025-03-14 21:40:15,195:INFO:Preloading libraries
2025-03-14 21:40:15,196:INFO:Set up data.
2025-03-14 21:40:15,198:INFO:Set up index.
2025-03-14 21:40:15,285:INFO:Initializing predict_model()
2025-03-14 21:40:15,285:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38109550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:15,287:INFO:Checking exceptions
2025-03-14 21:40:15,287:INFO:Preloading libraries
2025-03-14 21:40:15,287:INFO:Set up data.
2025-03-14 21:40:15,290:INFO:Set up index.
2025-03-14 21:40:15,375:INFO:Initializing predict_model()
2025-03-14 21:40:15,375:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38102790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:15,375:INFO:Checking exceptions
2025-03-14 21:40:15,375:INFO:Preloading libraries
2025-03-14 21:40:15,375:INFO:Set up data.
2025-03-14 21:40:15,380:INFO:Set up index.
2025-03-14 21:40:15,470:INFO:Initializing predict_model()
2025-03-14 21:40:15,470:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FE850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:15,470:INFO:Checking exceptions
2025-03-14 21:40:15,470:INFO:Preloading libraries
2025-03-14 21:40:15,470:INFO:Set up data.
2025-03-14 21:40:15,473:INFO:Set up index.
2025-03-14 21:40:15,563:INFO:Initializing predict_model()
2025-03-14 21:40:15,563:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4875D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:15,563:INFO:Checking exceptions
2025-03-14 21:40:15,563:INFO:Preloading libraries
2025-03-14 21:40:15,563:INFO:Set up data.
2025-03-14 21:40:15,567:INFO:Set up index.
2025-03-14 21:40:15,681:INFO:Initializing predict_model()
2025-03-14 21:40:15,681:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FDC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:15,681:INFO:Checking exceptions
2025-03-14 21:40:15,681:INFO:Preloading libraries
2025-03-14 21:40:15,681:INFO:Set up data.
2025-03-14 21:40:15,684:INFO:Set up index.
2025-03-14 21:40:15,773:INFO:Initializing predict_model()
2025-03-14 21:40:15,773:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32385C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:15,773:INFO:Checking exceptions
2025-03-14 21:40:15,773:INFO:Preloading libraries
2025-03-14 21:40:15,773:INFO:Set up data.
2025-03-14 21:40:15,776:INFO:Set up index.
2025-03-14 21:40:15,863:INFO:Initializing predict_model()
2025-03-14 21:40:15,863:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36FA0E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:15,863:INFO:Checking exceptions
2025-03-14 21:40:15,863:INFO:Preloading libraries
2025-03-14 21:40:15,863:INFO:Set up data.
2025-03-14 21:40:15,866:INFO:Set up index.
2025-03-14 21:40:15,950:INFO:Initializing predict_model()
2025-03-14 21:40:15,950:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34962AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:15,950:INFO:Checking exceptions
2025-03-14 21:40:15,951:INFO:Preloading libraries
2025-03-14 21:40:15,951:INFO:Set up data.
2025-03-14 21:40:15,953:INFO:Set up index.
2025-03-14 21:40:16,039:INFO:Initializing predict_model()
2025-03-14 21:40:16,039:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CE910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:16,039:INFO:Checking exceptions
2025-03-14 21:40:16,039:INFO:Preloading libraries
2025-03-14 21:40:16,039:INFO:Set up data.
2025-03-14 21:40:16,042:INFO:Set up index.
2025-03-14 21:40:16,126:INFO:Initializing predict_model()
2025-03-14 21:40:16,126:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34962890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:16,126:INFO:Checking exceptions
2025-03-14 21:40:16,126:INFO:Preloading libraries
2025-03-14 21:40:16,126:INFO:Set up data.
2025-03-14 21:40:16,130:INFO:Set up index.
2025-03-14 21:40:16,214:INFO:Initializing predict_model()
2025-03-14 21:40:16,214:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CA010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:16,214:INFO:Checking exceptions
2025-03-14 21:40:16,214:INFO:Preloading libraries
2025-03-14 21:40:16,215:INFO:Set up data.
2025-03-14 21:40:16,217:INFO:Set up index.
2025-03-14 21:40:16,312:INFO:Initializing predict_model()
2025-03-14 21:40:16,312:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38097010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:16,312:INFO:Checking exceptions
2025-03-14 21:40:16,312:INFO:Preloading libraries
2025-03-14 21:40:16,312:INFO:Set up data.
2025-03-14 21:40:16,315:INFO:Set up index.
2025-03-14 21:40:16,401:INFO:Initializing predict_model()
2025-03-14 21:40:16,401:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FDC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:16,401:INFO:Checking exceptions
2025-03-14 21:40:16,401:INFO:Preloading libraries
2025-03-14 21:40:16,401:INFO:Set up data.
2025-03-14 21:40:16,404:INFO:Set up index.
2025-03-14 21:40:16,497:INFO:Initializing predict_model()
2025-03-14 21:40:16,497:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38199310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:16,497:INFO:Checking exceptions
2025-03-14 21:40:16,497:INFO:Preloading libraries
2025-03-14 21:40:16,497:INFO:Set up data.
2025-03-14 21:40:16,499:INFO:Set up index.
2025-03-14 21:40:16,585:INFO:Initializing predict_model()
2025-03-14 21:40:16,585:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38195090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:16,585:INFO:Checking exceptions
2025-03-14 21:40:16,585:INFO:Preloading libraries
2025-03-14 21:40:16,585:INFO:Set up data.
2025-03-14 21:40:16,588:INFO:Set up index.
2025-03-14 21:40:16,672:INFO:Initializing predict_model()
2025-03-14 21:40:16,672:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38107550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:16,672:INFO:Checking exceptions
2025-03-14 21:40:16,672:INFO:Preloading libraries
2025-03-14 21:40:16,672:INFO:Set up data.
2025-03-14 21:40:16,675:INFO:Set up index.
2025-03-14 21:40:16,760:INFO:Initializing predict_model()
2025-03-14 21:40:16,760:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E345BA5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:16,760:INFO:Checking exceptions
2025-03-14 21:40:16,760:INFO:Preloading libraries
2025-03-14 21:40:16,760:INFO:Set up data.
2025-03-14 21:40:16,763:INFO:Set up index.
2025-03-14 21:40:16,846:INFO:Initializing predict_model()
2025-03-14 21:40:16,846:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E345BA650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:16,846:INFO:Checking exceptions
2025-03-14 21:40:16,846:INFO:Preloading libraries
2025-03-14 21:40:16,846:INFO:Set up data.
2025-03-14 21:40:16,849:INFO:Set up index.
2025-03-14 21:40:16,938:INFO:Initializing predict_model()
2025-03-14 21:40:16,938:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38199990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:16,938:INFO:Checking exceptions
2025-03-14 21:40:16,938:INFO:Preloading libraries
2025-03-14 21:40:16,940:INFO:Set up data.
2025-03-14 21:40:16,941:INFO:Set up index.
2025-03-14 21:40:17,027:INFO:Initializing predict_model()
2025-03-14 21:40:17,027:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38089190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:17,027:INFO:Checking exceptions
2025-03-14 21:40:17,027:INFO:Preloading libraries
2025-03-14 21:40:17,027:INFO:Set up data.
2025-03-14 21:40:17,030:INFO:Set up index.
2025-03-14 21:40:17,134:INFO:Initializing predict_model()
2025-03-14 21:40:17,134:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38092B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:17,134:INFO:Checking exceptions
2025-03-14 21:40:17,134:INFO:Preloading libraries
2025-03-14 21:40:17,134:INFO:Set up data.
2025-03-14 21:40:17,138:INFO:Set up index.
2025-03-14 21:40:17,228:INFO:Initializing predict_model()
2025-03-14 21:40:17,228:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B467E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:17,228:INFO:Checking exceptions
2025-03-14 21:40:17,228:INFO:Preloading libraries
2025-03-14 21:40:17,228:INFO:Set up data.
2025-03-14 21:40:17,231:INFO:Set up index.
2025-03-14 21:40:17,314:INFO:Initializing predict_model()
2025-03-14 21:40:17,314:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:17,314:INFO:Checking exceptions
2025-03-14 21:40:17,314:INFO:Preloading libraries
2025-03-14 21:40:17,314:INFO:Set up data.
2025-03-14 21:40:17,318:INFO:Set up index.
2025-03-14 21:40:17,404:INFO:Initializing predict_model()
2025-03-14 21:40:17,404:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38170150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:17,406:INFO:Checking exceptions
2025-03-14 21:40:17,406:INFO:Preloading libraries
2025-03-14 21:40:17,406:INFO:Set up data.
2025-03-14 21:40:17,407:INFO:Set up index.
2025-03-14 21:40:17,490:INFO:Initializing predict_model()
2025-03-14 21:40:17,490:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380C98D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:17,492:INFO:Checking exceptions
2025-03-14 21:40:17,492:INFO:Preloading libraries
2025-03-14 21:40:17,492:INFO:Set up data.
2025-03-14 21:40:17,493:INFO:Set up index.
2025-03-14 21:40:17,578:INFO:Initializing predict_model()
2025-03-14 21:40:17,578:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B475C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:17,578:INFO:Checking exceptions
2025-03-14 21:40:17,578:INFO:Preloading libraries
2025-03-14 21:40:17,578:INFO:Set up data.
2025-03-14 21:40:17,581:INFO:Set up index.
2025-03-14 21:40:17,669:INFO:Initializing predict_model()
2025-03-14 21:40:17,669:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38077A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:17,669:INFO:Checking exceptions
2025-03-14 21:40:17,669:INFO:Preloading libraries
2025-03-14 21:40:17,669:INFO:Set up data.
2025-03-14 21:40:17,673:INFO:Set up index.
2025-03-14 21:40:17,759:INFO:Initializing predict_model()
2025-03-14 21:40:17,759:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38088990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:17,759:INFO:Checking exceptions
2025-03-14 21:40:17,759:INFO:Preloading libraries
2025-03-14 21:40:17,759:INFO:Set up data.
2025-03-14 21:40:17,762:INFO:Set up index.
2025-03-14 21:40:17,854:INFO:Initializing predict_model()
2025-03-14 21:40:17,854:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380915D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:17,854:INFO:Checking exceptions
2025-03-14 21:40:17,854:INFO:Preloading libraries
2025-03-14 21:40:17,854:INFO:Set up data.
2025-03-14 21:40:17,857:INFO:Set up index.
2025-03-14 21:40:17,948:INFO:Initializing predict_model()
2025-03-14 21:40:17,948:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:17,948:INFO:Checking exceptions
2025-03-14 21:40:17,948:INFO:Preloading libraries
2025-03-14 21:40:17,950:INFO:Set up data.
2025-03-14 21:40:17,953:INFO:Set up index.
2025-03-14 21:40:18,048:INFO:Initializing predict_model()
2025-03-14 21:40:18,048:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380754D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:18,048:INFO:Checking exceptions
2025-03-14 21:40:18,048:INFO:Preloading libraries
2025-03-14 21:40:18,048:INFO:Set up data.
2025-03-14 21:40:18,051:INFO:Set up index.
2025-03-14 21:40:18,142:INFO:Initializing predict_model()
2025-03-14 21:40:18,142:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38074490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:18,142:INFO:Checking exceptions
2025-03-14 21:40:18,142:INFO:Preloading libraries
2025-03-14 21:40:18,143:INFO:Set up data.
2025-03-14 21:40:18,145:INFO:Set up index.
2025-03-14 21:40:18,240:INFO:Initializing predict_model()
2025-03-14 21:40:18,242:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:18,242:INFO:Checking exceptions
2025-03-14 21:40:18,242:INFO:Preloading libraries
2025-03-14 21:40:18,242:INFO:Set up data.
2025-03-14 21:40:18,245:INFO:Set up index.
2025-03-14 21:40:18,340:INFO:Initializing predict_model()
2025-03-14 21:40:18,340:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38092010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:18,340:INFO:Checking exceptions
2025-03-14 21:40:18,340:INFO:Preloading libraries
2025-03-14 21:40:18,340:INFO:Set up data.
2025-03-14 21:40:18,345:INFO:Set up index.
2025-03-14 21:40:18,442:INFO:Initializing predict_model()
2025-03-14 21:40:18,443:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808A790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:18,443:INFO:Checking exceptions
2025-03-14 21:40:18,443:INFO:Preloading libraries
2025-03-14 21:40:18,443:INFO:Set up data.
2025-03-14 21:40:18,447:INFO:Set up index.
2025-03-14 21:40:18,532:INFO:Initializing predict_model()
2025-03-14 21:40:18,532:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA4BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:18,532:INFO:Checking exceptions
2025-03-14 21:40:18,532:INFO:Preloading libraries
2025-03-14 21:40:18,532:INFO:Set up data.
2025-03-14 21:40:18,535:INFO:Set up index.
2025-03-14 21:40:18,630:INFO:Initializing predict_model()
2025-03-14 21:40:18,630:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3481F5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:18,630:INFO:Checking exceptions
2025-03-14 21:40:18,630:INFO:Preloading libraries
2025-03-14 21:40:18,630:INFO:Set up data.
2025-03-14 21:40:18,633:INFO:Set up index.
2025-03-14 21:40:18,724:INFO:Initializing predict_model()
2025-03-14 21:40:18,724:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38090490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:18,724:INFO:Checking exceptions
2025-03-14 21:40:18,724:INFO:Preloading libraries
2025-03-14 21:40:18,724:INFO:Set up data.
2025-03-14 21:40:18,727:INFO:Set up index.
2025-03-14 21:40:18,811:INFO:Initializing predict_model()
2025-03-14 21:40:18,811:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38097590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:18,811:INFO:Checking exceptions
2025-03-14 21:40:18,811:INFO:Preloading libraries
2025-03-14 21:40:18,811:INFO:Set up data.
2025-03-14 21:40:18,814:INFO:Set up index.
2025-03-14 21:40:18,896:INFO:Initializing predict_model()
2025-03-14 21:40:18,896:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38172090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:18,898:INFO:Checking exceptions
2025-03-14 21:40:18,898:INFO:Preloading libraries
2025-03-14 21:40:18,898:INFO:Set up data.
2025-03-14 21:40:18,899:INFO:Set up index.
2025-03-14 21:40:18,985:INFO:Initializing predict_model()
2025-03-14 21:40:18,985:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E343055D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:18,985:INFO:Checking exceptions
2025-03-14 21:40:18,985:INFO:Preloading libraries
2025-03-14 21:40:18,985:INFO:Set up data.
2025-03-14 21:40:18,988:INFO:Set up index.
2025-03-14 21:40:19,088:INFO:Initializing predict_model()
2025-03-14 21:40:19,088:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36B5A710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:19,088:INFO:Checking exceptions
2025-03-14 21:40:19,088:INFO:Preloading libraries
2025-03-14 21:40:19,090:INFO:Set up data.
2025-03-14 21:40:19,093:INFO:Set up index.
2025-03-14 21:40:19,174:INFO:Initializing predict_model()
2025-03-14 21:40:19,174:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380754D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:19,174:INFO:Checking exceptions
2025-03-14 21:40:19,174:INFO:Preloading libraries
2025-03-14 21:40:19,174:INFO:Set up data.
2025-03-14 21:40:19,176:INFO:Set up index.
2025-03-14 21:40:19,272:INFO:Initializing predict_model()
2025-03-14 21:40:19,272:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B46B050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:19,272:INFO:Checking exceptions
2025-03-14 21:40:19,272:INFO:Preloading libraries
2025-03-14 21:40:19,272:INFO:Set up data.
2025-03-14 21:40:19,275:INFO:Set up index.
2025-03-14 21:40:19,367:INFO:Initializing predict_model()
2025-03-14 21:40:19,367:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38089190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:19,367:INFO:Checking exceptions
2025-03-14 21:40:19,367:INFO:Preloading libraries
2025-03-14 21:40:19,367:INFO:Set up data.
2025-03-14 21:40:19,370:INFO:Set up index.
2025-03-14 21:40:19,453:INFO:Initializing predict_model()
2025-03-14 21:40:19,453:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38172FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:19,453:INFO:Checking exceptions
2025-03-14 21:40:19,453:INFO:Preloading libraries
2025-03-14 21:40:19,453:INFO:Set up data.
2025-03-14 21:40:19,457:INFO:Set up index.
2025-03-14 21:40:19,542:INFO:Initializing predict_model()
2025-03-14 21:40:19,542:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808BDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:19,542:INFO:Checking exceptions
2025-03-14 21:40:19,542:INFO:Preloading libraries
2025-03-14 21:40:19,542:INFO:Set up data.
2025-03-14 21:40:19,545:INFO:Set up index.
2025-03-14 21:40:19,632:INFO:Initializing predict_model()
2025-03-14 21:40:19,632:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807AE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:19,632:INFO:Checking exceptions
2025-03-14 21:40:19,632:INFO:Preloading libraries
2025-03-14 21:40:19,632:INFO:Set up data.
2025-03-14 21:40:19,633:INFO:Set up index.
2025-03-14 21:40:19,718:INFO:Initializing predict_model()
2025-03-14 21:40:19,718:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38109590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:19,718:INFO:Checking exceptions
2025-03-14 21:40:19,718:INFO:Preloading libraries
2025-03-14 21:40:19,718:INFO:Set up data.
2025-03-14 21:40:19,723:INFO:Set up index.
2025-03-14 21:40:19,818:INFO:Initializing predict_model()
2025-03-14 21:40:19,818:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B467E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:19,818:INFO:Checking exceptions
2025-03-14 21:40:19,818:INFO:Preloading libraries
2025-03-14 21:40:19,818:INFO:Set up data.
2025-03-14 21:40:19,821:INFO:Set up index.
2025-03-14 21:40:19,921:INFO:Initializing predict_model()
2025-03-14 21:40:19,921:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807BFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:19,921:INFO:Checking exceptions
2025-03-14 21:40:19,921:INFO:Preloading libraries
2025-03-14 21:40:19,921:INFO:Set up data.
2025-03-14 21:40:19,923:INFO:Set up index.
2025-03-14 21:40:20,020:INFO:Initializing predict_model()
2025-03-14 21:40:20,020:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380930D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:20,020:INFO:Checking exceptions
2025-03-14 21:40:20,020:INFO:Preloading libraries
2025-03-14 21:40:20,020:INFO:Set up data.
2025-03-14 21:40:20,023:INFO:Set up index.
2025-03-14 21:40:20,126:INFO:Initializing predict_model()
2025-03-14 21:40:20,126:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CC950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:20,126:INFO:Checking exceptions
2025-03-14 21:40:20,126:INFO:Preloading libraries
2025-03-14 21:40:20,126:INFO:Set up data.
2025-03-14 21:40:20,129:INFO:Set up index.
2025-03-14 21:40:20,213:INFO:Initializing predict_model()
2025-03-14 21:40:20,213:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381978D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:20,213:INFO:Checking exceptions
2025-03-14 21:40:20,213:INFO:Preloading libraries
2025-03-14 21:40:20,213:INFO:Set up data.
2025-03-14 21:40:20,214:INFO:Set up index.
2025-03-14 21:40:20,301:INFO:Initializing predict_model()
2025-03-14 21:40:20,301:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38074ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:20,301:INFO:Checking exceptions
2025-03-14 21:40:20,301:INFO:Preloading libraries
2025-03-14 21:40:20,301:INFO:Set up data.
2025-03-14 21:40:20,304:INFO:Set up index.
2025-03-14 21:40:20,402:INFO:Initializing predict_model()
2025-03-14 21:40:20,402:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34C25DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:20,402:INFO:Checking exceptions
2025-03-14 21:40:20,402:INFO:Preloading libraries
2025-03-14 21:40:20,402:INFO:Set up data.
2025-03-14 21:40:20,405:INFO:Set up index.
2025-03-14 21:40:20,493:INFO:Initializing predict_model()
2025-03-14 21:40:20,493:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3810AB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:20,493:INFO:Checking exceptions
2025-03-14 21:40:20,493:INFO:Preloading libraries
2025-03-14 21:40:20,493:INFO:Set up data.
2025-03-14 21:40:20,497:INFO:Set up index.
2025-03-14 21:40:20,583:INFO:Initializing predict_model()
2025-03-14 21:40:20,583:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38074490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:20,583:INFO:Checking exceptions
2025-03-14 21:40:20,583:INFO:Preloading libraries
2025-03-14 21:40:20,583:INFO:Set up data.
2025-03-14 21:40:20,586:INFO:Set up index.
2025-03-14 21:40:20,672:INFO:Initializing predict_model()
2025-03-14 21:40:20,672:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FE9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:20,672:INFO:Checking exceptions
2025-03-14 21:40:20,672:INFO:Preloading libraries
2025-03-14 21:40:20,672:INFO:Set up data.
2025-03-14 21:40:20,675:INFO:Set up index.
2025-03-14 21:40:20,764:INFO:Initializing predict_model()
2025-03-14 21:40:20,764:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38198A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:20,764:INFO:Checking exceptions
2025-03-14 21:40:20,764:INFO:Preloading libraries
2025-03-14 21:40:20,764:INFO:Set up data.
2025-03-14 21:40:20,767:INFO:Set up index.
2025-03-14 21:40:20,850:INFO:Initializing predict_model()
2025-03-14 21:40:20,850:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38056790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:20,850:INFO:Checking exceptions
2025-03-14 21:40:20,850:INFO:Preloading libraries
2025-03-14 21:40:20,850:INFO:Set up data.
2025-03-14 21:40:20,853:INFO:Set up index.
2025-03-14 21:40:20,937:INFO:Initializing predict_model()
2025-03-14 21:40:20,937:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38090690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:20,937:INFO:Checking exceptions
2025-03-14 21:40:20,937:INFO:Preloading libraries
2025-03-14 21:40:20,937:INFO:Set up data.
2025-03-14 21:40:20,940:INFO:Set up index.
2025-03-14 21:40:21,028:INFO:Initializing predict_model()
2025-03-14 21:40:21,028:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38076950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:21,028:INFO:Checking exceptions
2025-03-14 21:40:21,028:INFO:Preloading libraries
2025-03-14 21:40:21,028:INFO:Set up data.
2025-03-14 21:40:21,031:INFO:Set up index.
2025-03-14 21:40:21,114:INFO:Initializing predict_model()
2025-03-14 21:40:21,114:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38323190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:21,114:INFO:Checking exceptions
2025-03-14 21:40:21,114:INFO:Preloading libraries
2025-03-14 21:40:21,114:INFO:Set up data.
2025-03-14 21:40:21,117:INFO:Set up index.
2025-03-14 21:40:21,203:INFO:Initializing predict_model()
2025-03-14 21:40:21,203:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38077A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:21,203:INFO:Checking exceptions
2025-03-14 21:40:21,203:INFO:Preloading libraries
2025-03-14 21:40:21,203:INFO:Set up data.
2025-03-14 21:40:21,206:INFO:Set up index.
2025-03-14 21:40:21,289:INFO:Initializing predict_model()
2025-03-14 21:40:21,289:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A938D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:21,289:INFO:Checking exceptions
2025-03-14 21:40:21,289:INFO:Preloading libraries
2025-03-14 21:40:21,289:INFO:Set up data.
2025-03-14 21:40:21,292:INFO:Set up index.
2025-03-14 21:40:21,376:INFO:Initializing predict_model()
2025-03-14 21:40:21,376:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B49A990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:21,376:INFO:Checking exceptions
2025-03-14 21:40:21,376:INFO:Preloading libraries
2025-03-14 21:40:21,376:INFO:Set up data.
2025-03-14 21:40:21,379:INFO:Set up index.
2025-03-14 21:40:21,466:INFO:Initializing predict_model()
2025-03-14 21:40:21,466:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38109A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:21,466:INFO:Checking exceptions
2025-03-14 21:40:21,466:INFO:Preloading libraries
2025-03-14 21:40:21,466:INFO:Set up data.
2025-03-14 21:40:21,469:INFO:Set up index.
2025-03-14 21:40:21,555:INFO:Initializing predict_model()
2025-03-14 21:40:21,555:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36FA0E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:21,555:INFO:Checking exceptions
2025-03-14 21:40:21,555:INFO:Preloading libraries
2025-03-14 21:40:21,555:INFO:Set up data.
2025-03-14 21:40:21,558:INFO:Set up index.
2025-03-14 21:40:21,645:INFO:Initializing predict_model()
2025-03-14 21:40:21,645:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807BB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:21,645:INFO:Checking exceptions
2025-03-14 21:40:21,645:INFO:Preloading libraries
2025-03-14 21:40:21,645:INFO:Set up data.
2025-03-14 21:40:21,648:INFO:Set up index.
2025-03-14 21:40:21,733:INFO:Initializing predict_model()
2025-03-14 21:40:21,733:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38106550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:21,733:INFO:Checking exceptions
2025-03-14 21:40:21,733:INFO:Preloading libraries
2025-03-14 21:40:21,733:INFO:Set up data.
2025-03-14 21:40:21,736:INFO:Set up index.
2025-03-14 21:40:21,820:INFO:Initializing predict_model()
2025-03-14 21:40:21,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CB650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:21,820:INFO:Checking exceptions
2025-03-14 21:40:21,820:INFO:Preloading libraries
2025-03-14 21:40:21,820:INFO:Set up data.
2025-03-14 21:40:21,823:INFO:Set up index.
2025-03-14 21:40:21,906:INFO:Initializing predict_model()
2025-03-14 21:40:21,906:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38096D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:21,907:INFO:Checking exceptions
2025-03-14 21:40:21,907:INFO:Preloading libraries
2025-03-14 21:40:21,907:INFO:Set up data.
2025-03-14 21:40:21,909:INFO:Set up index.
2025-03-14 21:40:22,017:INFO:Initializing predict_model()
2025-03-14 21:40:22,017:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FE750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:22,017:INFO:Checking exceptions
2025-03-14 21:40:22,017:INFO:Preloading libraries
2025-03-14 21:40:22,017:INFO:Set up data.
2025-03-14 21:40:22,018:INFO:Set up index.
2025-03-14 21:40:22,114:INFO:Initializing predict_model()
2025-03-14 21:40:22,114:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:22,114:INFO:Checking exceptions
2025-03-14 21:40:22,114:INFO:Preloading libraries
2025-03-14 21:40:22,114:INFO:Set up data.
2025-03-14 21:40:22,117:INFO:Set up index.
2025-03-14 21:40:22,210:INFO:Initializing predict_model()
2025-03-14 21:40:22,210:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38092310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:22,210:INFO:Checking exceptions
2025-03-14 21:40:22,210:INFO:Preloading libraries
2025-03-14 21:40:22,210:INFO:Set up data.
2025-03-14 21:40:22,215:INFO:Set up index.
2025-03-14 21:40:22,327:INFO:Initializing predict_model()
2025-03-14 21:40:22,327:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CE910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:22,327:INFO:Checking exceptions
2025-03-14 21:40:22,327:INFO:Preloading libraries
2025-03-14 21:40:22,328:INFO:Set up data.
2025-03-14 21:40:22,330:INFO:Set up index.
2025-03-14 21:40:22,420:INFO:Initializing predict_model()
2025-03-14 21:40:22,420:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CC110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:22,420:INFO:Checking exceptions
2025-03-14 21:40:22,420:INFO:Preloading libraries
2025-03-14 21:40:22,420:INFO:Set up data.
2025-03-14 21:40:22,423:INFO:Set up index.
2025-03-14 21:40:22,508:INFO:Initializing predict_model()
2025-03-14 21:40:22,508:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3810AFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:22,508:INFO:Checking exceptions
2025-03-14 21:40:22,508:INFO:Preloading libraries
2025-03-14 21:40:22,508:INFO:Set up data.
2025-03-14 21:40:22,511:INFO:Set up index.
2025-03-14 21:40:22,595:INFO:Initializing predict_model()
2025-03-14 21:40:22,595:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A6E590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:22,595:INFO:Checking exceptions
2025-03-14 21:40:22,595:INFO:Preloading libraries
2025-03-14 21:40:22,595:INFO:Set up data.
2025-03-14 21:40:22,598:INFO:Set up index.
2025-03-14 21:40:22,684:INFO:Initializing predict_model()
2025-03-14 21:40:22,684:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38078F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:22,684:INFO:Checking exceptions
2025-03-14 21:40:22,684:INFO:Preloading libraries
2025-03-14 21:40:22,684:INFO:Set up data.
2025-03-14 21:40:22,687:INFO:Set up index.
2025-03-14 21:40:22,777:INFO:Initializing predict_model()
2025-03-14 21:40:22,777:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01C88E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:22,777:INFO:Checking exceptions
2025-03-14 21:40:22,777:INFO:Preloading libraries
2025-03-14 21:40:22,777:INFO:Set up data.
2025-03-14 21:40:22,781:INFO:Set up index.
2025-03-14 21:40:22,875:INFO:Initializing predict_model()
2025-03-14 21:40:22,875:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38088310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:22,875:INFO:Checking exceptions
2025-03-14 21:40:22,875:INFO:Preloading libraries
2025-03-14 21:40:22,875:INFO:Set up data.
2025-03-14 21:40:22,882:INFO:Set up index.
2025-03-14 21:40:22,972:INFO:Initializing predict_model()
2025-03-14 21:40:22,972:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38088990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:22,972:INFO:Checking exceptions
2025-03-14 21:40:22,972:INFO:Preloading libraries
2025-03-14 21:40:22,972:INFO:Set up data.
2025-03-14 21:40:22,975:INFO:Set up index.
2025-03-14 21:40:23,059:INFO:Initializing predict_model()
2025-03-14 21:40:23,059:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38090790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:23,059:INFO:Checking exceptions
2025-03-14 21:40:23,059:INFO:Preloading libraries
2025-03-14 21:40:23,059:INFO:Set up data.
2025-03-14 21:40:23,063:INFO:Set up index.
2025-03-14 21:40:23,151:INFO:Initializing predict_model()
2025-03-14 21:40:23,151:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808BFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:23,151:INFO:Checking exceptions
2025-03-14 21:40:23,151:INFO:Preloading libraries
2025-03-14 21:40:23,151:INFO:Set up data.
2025-03-14 21:40:23,154:INFO:Set up index.
2025-03-14 21:40:23,240:INFO:Initializing predict_model()
2025-03-14 21:40:23,240:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38077210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:23,240:INFO:Checking exceptions
2025-03-14 21:40:23,240:INFO:Preloading libraries
2025-03-14 21:40:23,240:INFO:Set up data.
2025-03-14 21:40:23,243:INFO:Set up index.
2025-03-14 21:40:23,331:INFO:Initializing predict_model()
2025-03-14 21:40:23,331:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38199950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:23,331:INFO:Checking exceptions
2025-03-14 21:40:23,331:INFO:Preloading libraries
2025-03-14 21:40:23,331:INFO:Set up data.
2025-03-14 21:40:23,334:INFO:Set up index.
2025-03-14 21:40:23,425:INFO:Initializing predict_model()
2025-03-14 21:40:23,425:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CB250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:23,425:INFO:Checking exceptions
2025-03-14 21:40:23,425:INFO:Preloading libraries
2025-03-14 21:40:23,427:INFO:Set up data.
2025-03-14 21:40:23,428:INFO:Set up index.
2025-03-14 21:40:23,511:INFO:Initializing predict_model()
2025-03-14 21:40:23,511:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E343E9F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:23,511:INFO:Checking exceptions
2025-03-14 21:40:23,511:INFO:Preloading libraries
2025-03-14 21:40:23,511:INFO:Set up data.
2025-03-14 21:40:23,516:INFO:Set up index.
2025-03-14 21:40:23,603:INFO:Initializing predict_model()
2025-03-14 21:40:23,603:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38077210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:23,603:INFO:Checking exceptions
2025-03-14 21:40:23,603:INFO:Preloading libraries
2025-03-14 21:40:23,603:INFO:Set up data.
2025-03-14 21:40:23,606:INFO:Set up index.
2025-03-14 21:40:23,691:INFO:Initializing predict_model()
2025-03-14 21:40:23,691:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38075AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:23,691:INFO:Checking exceptions
2025-03-14 21:40:23,691:INFO:Preloading libraries
2025-03-14 21:40:23,691:INFO:Set up data.
2025-03-14 21:40:23,694:INFO:Set up index.
2025-03-14 21:40:23,782:INFO:Initializing predict_model()
2025-03-14 21:40:23,782:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38079150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:23,782:INFO:Checking exceptions
2025-03-14 21:40:23,782:INFO:Preloading libraries
2025-03-14 21:40:23,782:INFO:Set up data.
2025-03-14 21:40:23,785:INFO:Set up index.
2025-03-14 21:40:23,868:INFO:Initializing predict_model()
2025-03-14 21:40:23,868:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CA990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:23,868:INFO:Checking exceptions
2025-03-14 21:40:23,868:INFO:Preloading libraries
2025-03-14 21:40:23,868:INFO:Set up data.
2025-03-14 21:40:23,871:INFO:Set up index.
2025-03-14 21:40:23,964:INFO:Initializing predict_model()
2025-03-14 21:40:23,964:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32F51A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:23,964:INFO:Checking exceptions
2025-03-14 21:40:23,964:INFO:Preloading libraries
2025-03-14 21:40:23,965:INFO:Set up data.
2025-03-14 21:40:23,967:INFO:Set up index.
2025-03-14 21:40:24,056:INFO:Initializing predict_model()
2025-03-14 21:40:24,056:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CA990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:24,056:INFO:Checking exceptions
2025-03-14 21:40:24,056:INFO:Preloading libraries
2025-03-14 21:40:24,056:INFO:Set up data.
2025-03-14 21:40:24,059:INFO:Set up index.
2025-03-14 21:40:24,148:INFO:Initializing predict_model()
2025-03-14 21:40:24,148:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38093B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:24,148:INFO:Checking exceptions
2025-03-14 21:40:24,148:INFO:Preloading libraries
2025-03-14 21:40:24,148:INFO:Set up data.
2025-03-14 21:40:24,151:INFO:Set up index.
2025-03-14 21:40:24,238:INFO:Initializing predict_model()
2025-03-14 21:40:24,238:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CEA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:24,238:INFO:Checking exceptions
2025-03-14 21:40:24,238:INFO:Preloading libraries
2025-03-14 21:40:24,238:INFO:Set up data.
2025-03-14 21:40:24,241:INFO:Set up index.
2025-03-14 21:40:24,325:INFO:Initializing predict_model()
2025-03-14 21:40:24,325:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381069D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:24,326:INFO:Checking exceptions
2025-03-14 21:40:24,326:INFO:Preloading libraries
2025-03-14 21:40:24,326:INFO:Set up data.
2025-03-14 21:40:24,328:INFO:Set up index.
2025-03-14 21:40:24,408:INFO:Initializing predict_model()
2025-03-14 21:40:24,408:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38090910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:24,408:INFO:Checking exceptions
2025-03-14 21:40:24,408:INFO:Preloading libraries
2025-03-14 21:40:24,408:INFO:Set up data.
2025-03-14 21:40:24,413:INFO:Set up index.
2025-03-14 21:40:24,500:INFO:Initializing predict_model()
2025-03-14 21:40:24,500:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32F51A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:24,500:INFO:Checking exceptions
2025-03-14 21:40:24,500:INFO:Preloading libraries
2025-03-14 21:40:24,502:INFO:Set up data.
2025-03-14 21:40:24,505:INFO:Set up index.
2025-03-14 21:40:24,599:INFO:Initializing predict_model()
2025-03-14 21:40:24,599:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36FA1010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:24,599:INFO:Checking exceptions
2025-03-14 21:40:24,599:INFO:Preloading libraries
2025-03-14 21:40:24,600:INFO:Set up data.
2025-03-14 21:40:24,602:INFO:Set up index.
2025-03-14 21:40:24,683:INFO:Initializing predict_model()
2025-03-14 21:40:24,683:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38106ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:24,685:INFO:Checking exceptions
2025-03-14 21:40:24,685:INFO:Preloading libraries
2025-03-14 21:40:24,685:INFO:Set up data.
2025-03-14 21:40:24,686:INFO:Set up index.
2025-03-14 21:40:24,772:INFO:Initializing predict_model()
2025-03-14 21:40:24,772:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381970D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:24,772:INFO:Checking exceptions
2025-03-14 21:40:24,772:INFO:Preloading libraries
2025-03-14 21:40:24,772:INFO:Set up data.
2025-03-14 21:40:24,775:INFO:Set up index.
2025-03-14 21:40:24,867:INFO:Initializing predict_model()
2025-03-14 21:40:24,867:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38108390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:24,867:INFO:Checking exceptions
2025-03-14 21:40:24,867:INFO:Preloading libraries
2025-03-14 21:40:24,867:INFO:Set up data.
2025-03-14 21:40:24,871:INFO:Set up index.
2025-03-14 21:40:24,957:INFO:Initializing predict_model()
2025-03-14 21:40:24,957:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38171710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:24,957:INFO:Checking exceptions
2025-03-14 21:40:24,957:INFO:Preloading libraries
2025-03-14 21:40:24,957:INFO:Set up data.
2025-03-14 21:40:24,960:INFO:Set up index.
2025-03-14 21:40:25,060:INFO:Initializing predict_model()
2025-03-14 21:40:25,060:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381963D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:25,060:INFO:Checking exceptions
2025-03-14 21:40:25,060:INFO:Preloading libraries
2025-03-14 21:40:25,060:INFO:Set up data.
2025-03-14 21:40:25,061:INFO:Set up index.
2025-03-14 21:40:25,144:INFO:Initializing predict_model()
2025-03-14 21:40:25,144:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38093DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:25,144:INFO:Checking exceptions
2025-03-14 21:40:25,144:INFO:Preloading libraries
2025-03-14 21:40:25,144:INFO:Set up data.
2025-03-14 21:40:25,147:INFO:Set up index.
2025-03-14 21:40:25,229:INFO:Initializing predict_model()
2025-03-14 21:40:25,229:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CAC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:25,229:INFO:Checking exceptions
2025-03-14 21:40:25,229:INFO:Preloading libraries
2025-03-14 21:40:25,229:INFO:Set up data.
2025-03-14 21:40:25,230:INFO:Set up index.
2025-03-14 21:40:25,313:INFO:Initializing predict_model()
2025-03-14 21:40:25,313:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38076350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:25,313:INFO:Checking exceptions
2025-03-14 21:40:25,313:INFO:Preloading libraries
2025-03-14 21:40:25,313:INFO:Set up data.
2025-03-14 21:40:25,316:INFO:Set up index.
2025-03-14 21:40:25,396:INFO:Initializing predict_model()
2025-03-14 21:40:25,396:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38097C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:25,396:INFO:Checking exceptions
2025-03-14 21:40:25,396:INFO:Preloading libraries
2025-03-14 21:40:25,397:INFO:Set up data.
2025-03-14 21:40:25,399:INFO:Set up index.
2025-03-14 21:40:25,483:INFO:Initializing predict_model()
2025-03-14 21:40:25,483:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CA750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:25,483:INFO:Checking exceptions
2025-03-14 21:40:25,483:INFO:Preloading libraries
2025-03-14 21:40:25,483:INFO:Set up data.
2025-03-14 21:40:25,486:INFO:Set up index.
2025-03-14 21:40:25,568:INFO:Initializing predict_model()
2025-03-14 21:40:25,568:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38194610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:25,568:INFO:Checking exceptions
2025-03-14 21:40:25,568:INFO:Preloading libraries
2025-03-14 21:40:25,568:INFO:Set up data.
2025-03-14 21:40:25,571:INFO:Set up index.
2025-03-14 21:40:25,660:INFO:Initializing predict_model()
2025-03-14 21:40:25,660:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:25,660:INFO:Checking exceptions
2025-03-14 21:40:25,660:INFO:Preloading libraries
2025-03-14 21:40:25,660:INFO:Set up data.
2025-03-14 21:40:25,663:INFO:Set up index.
2025-03-14 21:40:25,750:INFO:Initializing predict_model()
2025-03-14 21:40:25,750:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36FA0F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:25,750:INFO:Checking exceptions
2025-03-14 21:40:25,750:INFO:Preloading libraries
2025-03-14 21:40:25,750:INFO:Set up data.
2025-03-14 21:40:25,754:INFO:Set up index.
2025-03-14 21:40:25,833:INFO:Initializing predict_model()
2025-03-14 21:40:25,835:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38078950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:25,835:INFO:Checking exceptions
2025-03-14 21:40:25,835:INFO:Preloading libraries
2025-03-14 21:40:25,835:INFO:Set up data.
2025-03-14 21:40:25,836:INFO:Set up index.
2025-03-14 21:40:25,917:INFO:Initializing predict_model()
2025-03-14 21:40:25,917:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4592D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:25,917:INFO:Checking exceptions
2025-03-14 21:40:25,917:INFO:Preloading libraries
2025-03-14 21:40:25,917:INFO:Set up data.
2025-03-14 21:40:25,918:INFO:Set up index.
2025-03-14 21:40:26,003:INFO:Initializing predict_model()
2025-03-14 21:40:26,003:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38088990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:26,003:INFO:Checking exceptions
2025-03-14 21:40:26,003:INFO:Preloading libraries
2025-03-14 21:40:26,003:INFO:Set up data.
2025-03-14 21:40:26,004:INFO:Set up index.
2025-03-14 21:40:26,086:INFO:Initializing predict_model()
2025-03-14 21:40:26,086:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4875D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:26,086:INFO:Checking exceptions
2025-03-14 21:40:26,086:INFO:Preloading libraries
2025-03-14 21:40:26,086:INFO:Set up data.
2025-03-14 21:40:26,087:INFO:Set up index.
2025-03-14 21:40:26,168:INFO:Initializing predict_model()
2025-03-14 21:40:26,168:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E363DBBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:26,168:INFO:Checking exceptions
2025-03-14 21:40:26,168:INFO:Preloading libraries
2025-03-14 21:40:26,168:INFO:Set up data.
2025-03-14 21:40:26,171:INFO:Set up index.
2025-03-14 21:40:26,252:INFO:Initializing predict_model()
2025-03-14 21:40:26,252:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CB090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:26,252:INFO:Checking exceptions
2025-03-14 21:40:26,252:INFO:Preloading libraries
2025-03-14 21:40:26,253:INFO:Set up data.
2025-03-14 21:40:26,257:INFO:Set up index.
2025-03-14 21:40:26,337:INFO:Initializing predict_model()
2025-03-14 21:40:26,337:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38091350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:26,337:INFO:Checking exceptions
2025-03-14 21:40:26,337:INFO:Preloading libraries
2025-03-14 21:40:26,339:INFO:Set up data.
2025-03-14 21:40:26,340:INFO:Set up index.
2025-03-14 21:40:26,428:INFO:Initializing predict_model()
2025-03-14 21:40:26,428:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38108390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:26,428:INFO:Checking exceptions
2025-03-14 21:40:26,428:INFO:Preloading libraries
2025-03-14 21:40:26,428:INFO:Set up data.
2025-03-14 21:40:26,431:INFO:Set up index.
2025-03-14 21:40:26,511:INFO:Initializing predict_model()
2025-03-14 21:40:26,511:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380917D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:26,511:INFO:Checking exceptions
2025-03-14 21:40:26,511:INFO:Preloading libraries
2025-03-14 21:40:26,511:INFO:Set up data.
2025-03-14 21:40:26,513:INFO:Set up index.
2025-03-14 21:40:26,604:INFO:Initializing predict_model()
2025-03-14 21:40:26,604:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808AB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:26,604:INFO:Checking exceptions
2025-03-14 21:40:26,604:INFO:Preloading libraries
2025-03-14 21:40:26,604:INFO:Set up data.
2025-03-14 21:40:26,607:INFO:Set up index.
2025-03-14 21:40:26,690:INFO:Initializing predict_model()
2025-03-14 21:40:26,691:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CE2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:26,691:INFO:Checking exceptions
2025-03-14 21:40:26,691:INFO:Preloading libraries
2025-03-14 21:40:26,691:INFO:Set up data.
2025-03-14 21:40:26,693:INFO:Set up index.
2025-03-14 21:40:26,778:INFO:Initializing predict_model()
2025-03-14 21:40:26,778:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380754D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:26,778:INFO:Checking exceptions
2025-03-14 21:40:26,778:INFO:Preloading libraries
2025-03-14 21:40:26,778:INFO:Set up data.
2025-03-14 21:40:26,781:INFO:Set up index.
2025-03-14 21:40:26,862:INFO:Initializing predict_model()
2025-03-14 21:40:26,862:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38075E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:26,862:INFO:Checking exceptions
2025-03-14 21:40:26,862:INFO:Preloading libraries
2025-03-14 21:40:26,862:INFO:Set up data.
2025-03-14 21:40:26,865:INFO:Set up index.
2025-03-14 21:40:26,946:INFO:Initializing predict_model()
2025-03-14 21:40:26,946:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A6F7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:26,946:INFO:Checking exceptions
2025-03-14 21:40:26,946:INFO:Preloading libraries
2025-03-14 21:40:26,946:INFO:Set up data.
2025-03-14 21:40:26,949:INFO:Set up index.
2025-03-14 21:40:27,032:INFO:Initializing predict_model()
2025-03-14 21:40:27,032:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38093B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:27,032:INFO:Checking exceptions
2025-03-14 21:40:27,032:INFO:Preloading libraries
2025-03-14 21:40:27,032:INFO:Set up data.
2025-03-14 21:40:27,035:INFO:Set up index.
2025-03-14 21:40:27,115:INFO:Initializing predict_model()
2025-03-14 21:40:27,115:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38090AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:27,115:INFO:Checking exceptions
2025-03-14 21:40:27,115:INFO:Preloading libraries
2025-03-14 21:40:27,115:INFO:Set up data.
2025-03-14 21:40:27,118:INFO:Set up index.
2025-03-14 21:40:27,207:INFO:Initializing predict_model()
2025-03-14 21:40:27,207:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36691150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:27,207:INFO:Checking exceptions
2025-03-14 21:40:27,207:INFO:Preloading libraries
2025-03-14 21:40:27,207:INFO:Set up data.
2025-03-14 21:40:27,210:INFO:Set up index.
2025-03-14 21:40:27,293:INFO:Initializing predict_model()
2025-03-14 21:40:27,293:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38090650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:27,293:INFO:Checking exceptions
2025-03-14 21:40:27,293:INFO:Preloading libraries
2025-03-14 21:40:27,293:INFO:Set up data.
2025-03-14 21:40:27,296:INFO:Set up index.
2025-03-14 21:40:27,378:INFO:Initializing predict_model()
2025-03-14 21:40:27,378:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808BD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:27,378:INFO:Checking exceptions
2025-03-14 21:40:27,378:INFO:Preloading libraries
2025-03-14 21:40:27,378:INFO:Set up data.
2025-03-14 21:40:27,381:INFO:Set up index.
2025-03-14 21:40:27,467:INFO:Initializing predict_model()
2025-03-14 21:40:27,467:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38091F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:27,467:INFO:Checking exceptions
2025-03-14 21:40:27,467:INFO:Preloading libraries
2025-03-14 21:40:27,467:INFO:Set up data.
2025-03-14 21:40:27,470:INFO:Set up index.
2025-03-14 21:40:27,554:INFO:Initializing predict_model()
2025-03-14 21:40:27,554:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807B850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:27,554:INFO:Checking exceptions
2025-03-14 21:40:27,554:INFO:Preloading libraries
2025-03-14 21:40:27,554:INFO:Set up data.
2025-03-14 21:40:27,557:INFO:Set up index.
2025-03-14 21:40:27,645:INFO:Initializing predict_model()
2025-03-14 21:40:27,645:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38194C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:27,645:INFO:Checking exceptions
2025-03-14 21:40:27,645:INFO:Preloading libraries
2025-03-14 21:40:27,645:INFO:Set up data.
2025-03-14 21:40:27,647:INFO:Set up index.
2025-03-14 21:40:27,734:INFO:Initializing predict_model()
2025-03-14 21:40:27,734:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CB4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:27,734:INFO:Checking exceptions
2025-03-14 21:40:27,734:INFO:Preloading libraries
2025-03-14 21:40:27,734:INFO:Set up data.
2025-03-14 21:40:27,738:INFO:Set up index.
2025-03-14 21:40:27,817:INFO:Initializing predict_model()
2025-03-14 21:40:27,817:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807BF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:27,817:INFO:Checking exceptions
2025-03-14 21:40:27,817:INFO:Preloading libraries
2025-03-14 21:40:27,817:INFO:Set up data.
2025-03-14 21:40:27,820:INFO:Set up index.
2025-03-14 21:40:27,900:INFO:Initializing predict_model()
2025-03-14 21:40:27,900:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808B390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:27,900:INFO:Checking exceptions
2025-03-14 21:40:27,900:INFO:Preloading libraries
2025-03-14 21:40:27,900:INFO:Set up data.
2025-03-14 21:40:27,904:INFO:Set up index.
2025-03-14 21:40:27,987:INFO:Initializing predict_model()
2025-03-14 21:40:27,987:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807BB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:27,987:INFO:Checking exceptions
2025-03-14 21:40:27,987:INFO:Preloading libraries
2025-03-14 21:40:27,987:INFO:Set up data.
2025-03-14 21:40:27,990:INFO:Set up index.
2025-03-14 21:40:28,070:INFO:Initializing predict_model()
2025-03-14 21:40:28,070:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38090650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:28,070:INFO:Checking exceptions
2025-03-14 21:40:28,070:INFO:Preloading libraries
2025-03-14 21:40:28,070:INFO:Set up data.
2025-03-14 21:40:28,073:INFO:Set up index.
2025-03-14 21:40:28,158:INFO:Initializing predict_model()
2025-03-14 21:40:28,158:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38199A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:28,158:INFO:Checking exceptions
2025-03-14 21:40:28,158:INFO:Preloading libraries
2025-03-14 21:40:28,158:INFO:Set up data.
2025-03-14 21:40:28,161:INFO:Set up index.
2025-03-14 21:40:28,242:INFO:Initializing predict_model()
2025-03-14 21:40:28,242:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38079D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:28,242:INFO:Checking exceptions
2025-03-14 21:40:28,242:INFO:Preloading libraries
2025-03-14 21:40:28,242:INFO:Set up data.
2025-03-14 21:40:28,245:INFO:Set up index.
2025-03-14 21:40:28,329:INFO:Initializing predict_model()
2025-03-14 21:40:28,329:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CBD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:28,329:INFO:Checking exceptions
2025-03-14 21:40:28,329:INFO:Preloading libraries
2025-03-14 21:40:28,329:INFO:Set up data.
2025-03-14 21:40:28,332:INFO:Set up index.
2025-03-14 21:40:28,416:INFO:Initializing predict_model()
2025-03-14 21:40:28,416:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380930D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:28,416:INFO:Checking exceptions
2025-03-14 21:40:28,416:INFO:Preloading libraries
2025-03-14 21:40:28,416:INFO:Set up data.
2025-03-14 21:40:28,420:INFO:Set up index.
2025-03-14 21:40:28,508:INFO:Initializing predict_model()
2025-03-14 21:40:28,508:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38088ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:28,508:INFO:Checking exceptions
2025-03-14 21:40:28,508:INFO:Preloading libraries
2025-03-14 21:40:28,508:INFO:Set up data.
2025-03-14 21:40:28,511:INFO:Set up index.
2025-03-14 21:40:28,601:INFO:Initializing predict_model()
2025-03-14 21:40:28,601:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:28,601:INFO:Checking exceptions
2025-03-14 21:40:28,601:INFO:Preloading libraries
2025-03-14 21:40:28,601:INFO:Set up data.
2025-03-14 21:40:28,604:INFO:Set up index.
2025-03-14 21:40:28,690:INFO:Initializing predict_model()
2025-03-14 21:40:28,690:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38109890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:28,690:INFO:Checking exceptions
2025-03-14 21:40:28,690:INFO:Preloading libraries
2025-03-14 21:40:28,690:INFO:Set up data.
2025-03-14 21:40:28,693:INFO:Set up index.
2025-03-14 21:40:28,776:INFO:Initializing predict_model()
2025-03-14 21:40:28,776:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3810B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:28,776:INFO:Checking exceptions
2025-03-14 21:40:28,776:INFO:Preloading libraries
2025-03-14 21:40:28,777:INFO:Set up data.
2025-03-14 21:40:28,780:INFO:Set up index.
2025-03-14 21:40:28,864:INFO:Initializing predict_model()
2025-03-14 21:40:28,864:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34B32310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:28,864:INFO:Checking exceptions
2025-03-14 21:40:28,864:INFO:Preloading libraries
2025-03-14 21:40:28,864:INFO:Set up data.
2025-03-14 21:40:28,867:INFO:Set up index.
2025-03-14 21:40:28,948:INFO:Initializing predict_model()
2025-03-14 21:40:28,948:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E322592D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:28,948:INFO:Checking exceptions
2025-03-14 21:40:28,948:INFO:Preloading libraries
2025-03-14 21:40:28,948:INFO:Set up data.
2025-03-14 21:40:28,951:INFO:Set up index.
2025-03-14 21:40:29,032:INFO:Initializing predict_model()
2025-03-14 21:40:29,032:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808AA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:29,032:INFO:Checking exceptions
2025-03-14 21:40:29,032:INFO:Preloading libraries
2025-03-14 21:40:29,032:INFO:Set up data.
2025-03-14 21:40:29,035:INFO:Set up index.
2025-03-14 21:40:29,115:INFO:Initializing predict_model()
2025-03-14 21:40:29,115:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CA690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:29,115:INFO:Checking exceptions
2025-03-14 21:40:29,115:INFO:Preloading libraries
2025-03-14 21:40:29,116:INFO:Set up data.
2025-03-14 21:40:29,118:INFO:Set up index.
2025-03-14 21:40:29,199:INFO:Initializing predict_model()
2025-03-14 21:40:29,200:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38074ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:29,200:INFO:Checking exceptions
2025-03-14 21:40:29,200:INFO:Preloading libraries
2025-03-14 21:40:29,200:INFO:Set up data.
2025-03-14 21:40:29,202:INFO:Set up index.
2025-03-14 21:40:29,286:INFO:Initializing predict_model()
2025-03-14 21:40:29,286:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E345BA650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:29,286:INFO:Checking exceptions
2025-03-14 21:40:29,286:INFO:Preloading libraries
2025-03-14 21:40:29,286:INFO:Set up data.
2025-03-14 21:40:29,289:INFO:Set up index.
2025-03-14 21:40:29,373:INFO:Initializing predict_model()
2025-03-14 21:40:29,373:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808BE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:29,373:INFO:Checking exceptions
2025-03-14 21:40:29,373:INFO:Preloading libraries
2025-03-14 21:40:29,373:INFO:Set up data.
2025-03-14 21:40:29,376:INFO:Set up index.
2025-03-14 21:40:29,457:INFO:Initializing predict_model()
2025-03-14 21:40:29,457:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38198F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:29,457:INFO:Checking exceptions
2025-03-14 21:40:29,457:INFO:Preloading libraries
2025-03-14 21:40:29,457:INFO:Set up data.
2025-03-14 21:40:29,458:INFO:Set up index.
2025-03-14 21:40:29,542:INFO:Initializing predict_model()
2025-03-14 21:40:29,542:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38170090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:29,542:INFO:Checking exceptions
2025-03-14 21:40:29,542:INFO:Preloading libraries
2025-03-14 21:40:29,542:INFO:Set up data.
2025-03-14 21:40:29,545:INFO:Set up index.
2025-03-14 21:40:29,626:INFO:Initializing predict_model()
2025-03-14 21:40:29,626:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E343E9F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:29,626:INFO:Checking exceptions
2025-03-14 21:40:29,626:INFO:Preloading libraries
2025-03-14 21:40:29,626:INFO:Set up data.
2025-03-14 21:40:29,629:INFO:Set up index.
2025-03-14 21:40:29,733:INFO:Initializing predict_model()
2025-03-14 21:40:29,733:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E344A4110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:29,733:INFO:Checking exceptions
2025-03-14 21:40:29,733:INFO:Preloading libraries
2025-03-14 21:40:29,735:INFO:Set up data.
2025-03-14 21:40:29,739:INFO:Set up index.
2025-03-14 21:40:29,826:INFO:Initializing predict_model()
2025-03-14 21:40:29,826:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38079E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:29,826:INFO:Checking exceptions
2025-03-14 21:40:29,826:INFO:Preloading libraries
2025-03-14 21:40:29,826:INFO:Set up data.
2025-03-14 21:40:29,829:INFO:Set up index.
2025-03-14 21:40:29,912:INFO:Initializing predict_model()
2025-03-14 21:40:29,912:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4AC610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:29,912:INFO:Checking exceptions
2025-03-14 21:40:29,912:INFO:Preloading libraries
2025-03-14 21:40:29,912:INFO:Set up data.
2025-03-14 21:40:29,913:INFO:Set up index.
2025-03-14 21:40:29,997:INFO:Initializing predict_model()
2025-03-14 21:40:29,997:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38198F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:29,997:INFO:Checking exceptions
2025-03-14 21:40:29,997:INFO:Preloading libraries
2025-03-14 21:40:29,997:INFO:Set up data.
2025-03-14 21:40:30,000:INFO:Set up index.
2025-03-14 21:40:30,086:INFO:Initializing predict_model()
2025-03-14 21:40:30,086:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380C8BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:30,086:INFO:Checking exceptions
2025-03-14 21:40:30,086:INFO:Preloading libraries
2025-03-14 21:40:30,086:INFO:Set up data.
2025-03-14 21:40:30,089:INFO:Set up index.
2025-03-14 21:40:30,176:INFO:Initializing predict_model()
2025-03-14 21:40:30,176:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3810AD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:30,176:INFO:Checking exceptions
2025-03-14 21:40:30,176:INFO:Preloading libraries
2025-03-14 21:40:30,176:INFO:Set up data.
2025-03-14 21:40:30,179:INFO:Set up index.
2025-03-14 21:40:30,263:INFO:Initializing predict_model()
2025-03-14 21:40:30,263:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CA0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:30,263:INFO:Checking exceptions
2025-03-14 21:40:30,263:INFO:Preloading libraries
2025-03-14 21:40:30,263:INFO:Set up data.
2025-03-14 21:40:30,266:INFO:Set up index.
2025-03-14 21:40:30,346:INFO:Initializing predict_model()
2025-03-14 21:40:30,346:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380902D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:30,346:INFO:Checking exceptions
2025-03-14 21:40:30,348:INFO:Preloading libraries
2025-03-14 21:40:30,348:INFO:Set up data.
2025-03-14 21:40:30,349:INFO:Set up index.
2025-03-14 21:40:30,432:INFO:Initializing predict_model()
2025-03-14 21:40:30,432:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381999D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:30,432:INFO:Checking exceptions
2025-03-14 21:40:30,432:INFO:Preloading libraries
2025-03-14 21:40:30,432:INFO:Set up data.
2025-03-14 21:40:30,435:INFO:Set up index.
2025-03-14 21:40:30,519:INFO:Initializing predict_model()
2025-03-14 21:40:30,519:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36B5A9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:30,519:INFO:Checking exceptions
2025-03-14 21:40:30,519:INFO:Preloading libraries
2025-03-14 21:40:30,519:INFO:Set up data.
2025-03-14 21:40:30,522:INFO:Set up index.
2025-03-14 21:40:30,625:INFO:Initializing predict_model()
2025-03-14 21:40:30,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381722D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:30,625:INFO:Checking exceptions
2025-03-14 21:40:30,625:INFO:Preloading libraries
2025-03-14 21:40:30,625:INFO:Set up data.
2025-03-14 21:40:30,628:INFO:Set up index.
2025-03-14 21:40:30,710:INFO:Initializing predict_model()
2025-03-14 21:40:30,710:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CC550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:30,710:INFO:Checking exceptions
2025-03-14 21:40:30,710:INFO:Preloading libraries
2025-03-14 21:40:30,710:INFO:Set up data.
2025-03-14 21:40:30,711:INFO:Set up index.
2025-03-14 21:40:30,798:INFO:Initializing predict_model()
2025-03-14 21:40:30,798:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01813690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:30,798:INFO:Checking exceptions
2025-03-14 21:40:30,800:INFO:Preloading libraries
2025-03-14 21:40:30,800:INFO:Set up data.
2025-03-14 21:40:30,801:INFO:Set up index.
2025-03-14 21:40:30,890:INFO:Initializing predict_model()
2025-03-14 21:40:30,890:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38075B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:30,890:INFO:Checking exceptions
2025-03-14 21:40:30,890:INFO:Preloading libraries
2025-03-14 21:40:30,890:INFO:Set up data.
2025-03-14 21:40:30,893:INFO:Set up index.
2025-03-14 21:40:30,981:INFO:Initializing predict_model()
2025-03-14 21:40:30,981:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:30,981:INFO:Checking exceptions
2025-03-14 21:40:30,981:INFO:Preloading libraries
2025-03-14 21:40:30,981:INFO:Set up data.
2025-03-14 21:40:30,984:INFO:Set up index.
2025-03-14 21:40:31,069:INFO:Initializing predict_model()
2025-03-14 21:40:31,069:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CB790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:31,069:INFO:Checking exceptions
2025-03-14 21:40:31,069:INFO:Preloading libraries
2025-03-14 21:40:31,069:INFO:Set up data.
2025-03-14 21:40:31,072:INFO:Set up index.
2025-03-14 21:40:31,155:INFO:Initializing predict_model()
2025-03-14 21:40:31,155:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38171E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:31,155:INFO:Checking exceptions
2025-03-14 21:40:31,155:INFO:Preloading libraries
2025-03-14 21:40:31,155:INFO:Set up data.
2025-03-14 21:40:31,158:INFO:Set up index.
2025-03-14 21:40:31,237:INFO:Initializing predict_model()
2025-03-14 21:40:31,237:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01813690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:31,237:INFO:Checking exceptions
2025-03-14 21:40:31,237:INFO:Preloading libraries
2025-03-14 21:40:31,237:INFO:Set up data.
2025-03-14 21:40:31,240:INFO:Set up index.
2025-03-14 21:40:31,323:INFO:Initializing predict_model()
2025-03-14 21:40:31,323:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38170390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:31,323:INFO:Checking exceptions
2025-03-14 21:40:31,324:INFO:Preloading libraries
2025-03-14 21:40:31,324:INFO:Set up data.
2025-03-14 21:40:31,326:INFO:Set up index.
2025-03-14 21:40:31,407:INFO:Initializing predict_model()
2025-03-14 21:40:31,408:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38075350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:31,408:INFO:Checking exceptions
2025-03-14 21:40:31,408:INFO:Preloading libraries
2025-03-14 21:40:31,408:INFO:Set up data.
2025-03-14 21:40:31,410:INFO:Set up index.
2025-03-14 21:40:31,495:INFO:Initializing predict_model()
2025-03-14 21:40:31,495:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38075890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:31,495:INFO:Checking exceptions
2025-03-14 21:40:31,495:INFO:Preloading libraries
2025-03-14 21:40:31,495:INFO:Set up data.
2025-03-14 21:40:31,498:INFO:Set up index.
2025-03-14 21:40:31,588:INFO:Initializing predict_model()
2025-03-14 21:40:31,588:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E345BA5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:31,588:INFO:Checking exceptions
2025-03-14 21:40:31,588:INFO:Preloading libraries
2025-03-14 21:40:31,588:INFO:Set up data.
2025-03-14 21:40:31,592:INFO:Set up index.
2025-03-14 21:40:31,678:INFO:Initializing predict_model()
2025-03-14 21:40:31,678:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38076610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:31,678:INFO:Checking exceptions
2025-03-14 21:40:31,678:INFO:Preloading libraries
2025-03-14 21:40:31,678:INFO:Set up data.
2025-03-14 21:40:31,681:INFO:Set up index.
2025-03-14 21:40:31,769:INFO:Initializing predict_model()
2025-03-14 21:40:31,769:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:31,769:INFO:Checking exceptions
2025-03-14 21:40:31,769:INFO:Preloading libraries
2025-03-14 21:40:31,769:INFO:Set up data.
2025-03-14 21:40:31,770:INFO:Set up index.
2025-03-14 21:40:31,852:INFO:Initializing predict_model()
2025-03-14 21:40:31,852:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38093750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:31,852:INFO:Checking exceptions
2025-03-14 21:40:31,852:INFO:Preloading libraries
2025-03-14 21:40:31,852:INFO:Set up data.
2025-03-14 21:40:31,854:INFO:Set up index.
2025-03-14 21:40:31,933:INFO:Initializing predict_model()
2025-03-14 21:40:31,933:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38076C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:31,933:INFO:Checking exceptions
2025-03-14 21:40:31,933:INFO:Preloading libraries
2025-03-14 21:40:31,935:INFO:Set up data.
2025-03-14 21:40:31,936:INFO:Set up index.
2025-03-14 21:40:32,020:INFO:Initializing predict_model()
2025-03-14 21:40:32,020:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:32,020:INFO:Checking exceptions
2025-03-14 21:40:32,020:INFO:Preloading libraries
2025-03-14 21:40:32,020:INFO:Set up data.
2025-03-14 21:40:32,023:INFO:Set up index.
2025-03-14 21:40:32,112:INFO:Initializing predict_model()
2025-03-14 21:40:32,112:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34DEEE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:32,112:INFO:Checking exceptions
2025-03-14 21:40:32,112:INFO:Preloading libraries
2025-03-14 21:40:32,112:INFO:Set up data.
2025-03-14 21:40:32,115:INFO:Set up index.
2025-03-14 21:40:32,198:INFO:Initializing predict_model()
2025-03-14 21:40:32,198:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381979D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:32,198:INFO:Checking exceptions
2025-03-14 21:40:32,198:INFO:Preloading libraries
2025-03-14 21:40:32,198:INFO:Set up data.
2025-03-14 21:40:32,201:INFO:Set up index.
2025-03-14 21:40:32,285:INFO:Initializing predict_model()
2025-03-14 21:40:32,285:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38199790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:32,285:INFO:Checking exceptions
2025-03-14 21:40:32,285:INFO:Preloading libraries
2025-03-14 21:40:32,285:INFO:Set up data.
2025-03-14 21:40:32,288:INFO:Set up index.
2025-03-14 21:40:32,370:INFO:Initializing predict_model()
2025-03-14 21:40:32,370:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38102790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:32,370:INFO:Checking exceptions
2025-03-14 21:40:32,370:INFO:Preloading libraries
2025-03-14 21:40:32,370:INFO:Set up data.
2025-03-14 21:40:32,373:INFO:Set up index.
2025-03-14 21:40:32,460:INFO:Initializing predict_model()
2025-03-14 21:40:32,460:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CFA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:32,460:INFO:Checking exceptions
2025-03-14 21:40:32,460:INFO:Preloading libraries
2025-03-14 21:40:32,460:INFO:Set up data.
2025-03-14 21:40:32,463:INFO:Set up index.
2025-03-14 21:40:32,551:INFO:Initializing predict_model()
2025-03-14 21:40:32,551:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380C8310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:32,551:INFO:Checking exceptions
2025-03-14 21:40:32,551:INFO:Preloading libraries
2025-03-14 21:40:32,551:INFO:Set up data.
2025-03-14 21:40:32,554:INFO:Set up index.
2025-03-14 21:40:32,636:INFO:Initializing predict_model()
2025-03-14 21:40:32,636:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34550910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:32,636:INFO:Checking exceptions
2025-03-14 21:40:32,636:INFO:Preloading libraries
2025-03-14 21:40:32,636:INFO:Set up data.
2025-03-14 21:40:32,637:INFO:Set up index.
2025-03-14 21:40:32,723:INFO:Initializing predict_model()
2025-03-14 21:40:32,723:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38106690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:32,725:INFO:Checking exceptions
2025-03-14 21:40:32,725:INFO:Preloading libraries
2025-03-14 21:40:32,725:INFO:Set up data.
2025-03-14 21:40:32,726:INFO:Set up index.
2025-03-14 21:40:32,812:INFO:Initializing predict_model()
2025-03-14 21:40:32,812:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CBD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:32,812:INFO:Checking exceptions
2025-03-14 21:40:32,812:INFO:Preloading libraries
2025-03-14 21:40:32,812:INFO:Set up data.
2025-03-14 21:40:32,815:INFO:Set up index.
2025-03-14 21:40:32,911:INFO:Initializing predict_model()
2025-03-14 21:40:32,911:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CE690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:32,911:INFO:Checking exceptions
2025-03-14 21:40:32,911:INFO:Preloading libraries
2025-03-14 21:40:32,912:INFO:Set up data.
2025-03-14 21:40:32,914:INFO:Set up index.
2025-03-14 21:40:33,001:INFO:Initializing predict_model()
2025-03-14 21:40:33,001:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381714D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:33,001:INFO:Checking exceptions
2025-03-14 21:40:33,001:INFO:Preloading libraries
2025-03-14 21:40:33,001:INFO:Set up data.
2025-03-14 21:40:33,004:INFO:Set up index.
2025-03-14 21:40:33,084:INFO:Initializing predict_model()
2025-03-14 21:40:33,085:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4875D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:33,085:INFO:Checking exceptions
2025-03-14 21:40:33,085:INFO:Preloading libraries
2025-03-14 21:40:33,085:INFO:Set up data.
2025-03-14 21:40:33,087:INFO:Set up index.
2025-03-14 21:40:33,177:INFO:Initializing predict_model()
2025-03-14 21:40:33,177:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807AC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:33,177:INFO:Checking exceptions
2025-03-14 21:40:33,177:INFO:Preloading libraries
2025-03-14 21:40:33,177:INFO:Set up data.
2025-03-14 21:40:33,180:INFO:Set up index.
2025-03-14 21:40:33,264:INFO:Initializing predict_model()
2025-03-14 21:40:33,264:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38076350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:33,264:INFO:Checking exceptions
2025-03-14 21:40:33,264:INFO:Preloading libraries
2025-03-14 21:40:33,264:INFO:Set up data.
2025-03-14 21:40:33,267:INFO:Set up index.
2025-03-14 21:40:33,353:INFO:Initializing predict_model()
2025-03-14 21:40:33,353:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36FA0E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:33,353:INFO:Checking exceptions
2025-03-14 21:40:33,353:INFO:Preloading libraries
2025-03-14 21:40:33,353:INFO:Set up data.
2025-03-14 21:40:33,354:INFO:Set up index.
2025-03-14 21:40:33,436:INFO:Initializing predict_model()
2025-03-14 21:40:33,436:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E323A8190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:33,436:INFO:Checking exceptions
2025-03-14 21:40:33,436:INFO:Preloading libraries
2025-03-14 21:40:33,436:INFO:Set up data.
2025-03-14 21:40:33,439:INFO:Set up index.
2025-03-14 21:40:33,527:INFO:Initializing predict_model()
2025-03-14 21:40:33,527:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CB250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:33,527:INFO:Checking exceptions
2025-03-14 21:40:33,527:INFO:Preloading libraries
2025-03-14 21:40:33,527:INFO:Set up data.
2025-03-14 21:40:33,530:INFO:Set up index.
2025-03-14 21:40:33,621:INFO:Initializing predict_model()
2025-03-14 21:40:33,621:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B467E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:33,621:INFO:Checking exceptions
2025-03-14 21:40:33,621:INFO:Preloading libraries
2025-03-14 21:40:33,621:INFO:Set up data.
2025-03-14 21:40:33,624:INFO:Set up index.
2025-03-14 21:40:33,704:INFO:Initializing predict_model()
2025-03-14 21:40:33,704:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38108310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:33,704:INFO:Checking exceptions
2025-03-14 21:40:33,704:INFO:Preloading libraries
2025-03-14 21:40:33,704:INFO:Set up data.
2025-03-14 21:40:33,707:INFO:Set up index.
2025-03-14 21:40:33,791:INFO:Initializing predict_model()
2025-03-14 21:40:33,791:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38077510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:33,791:INFO:Checking exceptions
2025-03-14 21:40:33,791:INFO:Preloading libraries
2025-03-14 21:40:33,791:INFO:Set up data.
2025-03-14 21:40:33,794:INFO:Set up index.
2025-03-14 21:40:33,878:INFO:Initializing predict_model()
2025-03-14 21:40:33,878:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380938D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:33,878:INFO:Checking exceptions
2025-03-14 21:40:33,878:INFO:Preloading libraries
2025-03-14 21:40:33,878:INFO:Set up data.
2025-03-14 21:40:33,881:INFO:Set up index.
2025-03-14 21:40:33,977:INFO:Initializing predict_model()
2025-03-14 21:40:33,979:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381735D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:33,979:INFO:Checking exceptions
2025-03-14 21:40:33,979:INFO:Preloading libraries
2025-03-14 21:40:33,979:INFO:Set up data.
2025-03-14 21:40:33,982:INFO:Set up index.
2025-03-14 21:40:34,075:INFO:Initializing predict_model()
2025-03-14 21:40:34,075:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:34,075:INFO:Checking exceptions
2025-03-14 21:40:34,075:INFO:Preloading libraries
2025-03-14 21:40:34,075:INFO:Set up data.
2025-03-14 21:40:34,078:INFO:Set up index.
2025-03-14 21:40:34,171:INFO:Initializing predict_model()
2025-03-14 21:40:34,171:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38077A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:34,171:INFO:Checking exceptions
2025-03-14 21:40:34,171:INFO:Preloading libraries
2025-03-14 21:40:34,171:INFO:Set up data.
2025-03-14 21:40:34,174:INFO:Set up index.
2025-03-14 21:40:34,261:INFO:Initializing predict_model()
2025-03-14 21:40:34,261:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B419A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:34,261:INFO:Checking exceptions
2025-03-14 21:40:34,261:INFO:Preloading libraries
2025-03-14 21:40:34,261:INFO:Set up data.
2025-03-14 21:40:34,265:INFO:Set up index.
2025-03-14 21:40:34,346:INFO:Initializing predict_model()
2025-03-14 21:40:34,346:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3810B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:34,346:INFO:Checking exceptions
2025-03-14 21:40:34,346:INFO:Preloading libraries
2025-03-14 21:40:34,346:INFO:Set up data.
2025-03-14 21:40:34,349:INFO:Set up index.
2025-03-14 21:40:34,438:INFO:Initializing predict_model()
2025-03-14 21:40:34,438:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38056850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:34,438:INFO:Checking exceptions
2025-03-14 21:40:34,438:INFO:Preloading libraries
2025-03-14 21:40:34,438:INFO:Set up data.
2025-03-14 21:40:34,441:INFO:Set up index.
2025-03-14 21:40:34,525:INFO:Initializing predict_model()
2025-03-14 21:40:34,525:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380C9990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:34,527:INFO:Checking exceptions
2025-03-14 21:40:34,527:INFO:Preloading libraries
2025-03-14 21:40:34,527:INFO:Set up data.
2025-03-14 21:40:34,529:INFO:Set up index.
2025-03-14 21:40:34,620:INFO:Initializing predict_model()
2025-03-14 21:40:34,622:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38076A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:34,622:INFO:Checking exceptions
2025-03-14 21:40:34,622:INFO:Preloading libraries
2025-03-14 21:40:34,622:INFO:Set up data.
2025-03-14 21:40:34,625:INFO:Set up index.
2025-03-14 21:40:34,710:INFO:Initializing predict_model()
2025-03-14 21:40:34,710:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38102E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:34,710:INFO:Checking exceptions
2025-03-14 21:40:34,710:INFO:Preloading libraries
2025-03-14 21:40:34,711:INFO:Set up data.
2025-03-14 21:40:34,715:INFO:Set up index.
2025-03-14 21:40:34,799:INFO:Initializing predict_model()
2025-03-14 21:40:34,799:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38103210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:34,799:INFO:Checking exceptions
2025-03-14 21:40:34,799:INFO:Preloading libraries
2025-03-14 21:40:34,799:INFO:Set up data.
2025-03-14 21:40:34,802:INFO:Set up index.
2025-03-14 21:40:34,886:INFO:Initializing predict_model()
2025-03-14 21:40:34,886:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E345B9010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:34,886:INFO:Checking exceptions
2025-03-14 21:40:34,888:INFO:Preloading libraries
2025-03-14 21:40:34,888:INFO:Set up data.
2025-03-14 21:40:34,889:INFO:Set up index.
2025-03-14 21:40:34,974:INFO:Initializing predict_model()
2025-03-14 21:40:34,974:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34550910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:34,974:INFO:Checking exceptions
2025-03-14 21:40:34,974:INFO:Preloading libraries
2025-03-14 21:40:34,974:INFO:Set up data.
2025-03-14 21:40:34,975:INFO:Set up index.
2025-03-14 21:40:35,063:INFO:Initializing predict_model()
2025-03-14 21:40:35,063:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38077210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:35,063:INFO:Checking exceptions
2025-03-14 21:40:35,063:INFO:Preloading libraries
2025-03-14 21:40:35,063:INFO:Set up data.
2025-03-14 21:40:35,067:INFO:Set up index.
2025-03-14 21:40:35,164:INFO:Initializing predict_model()
2025-03-14 21:40:35,164:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381977D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:35,164:INFO:Checking exceptions
2025-03-14 21:40:35,164:INFO:Preloading libraries
2025-03-14 21:40:35,164:INFO:Set up data.
2025-03-14 21:40:35,168:INFO:Set up index.
2025-03-14 21:40:35,253:INFO:Initializing predict_model()
2025-03-14 21:40:35,253:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FC890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:35,253:INFO:Checking exceptions
2025-03-14 21:40:35,253:INFO:Preloading libraries
2025-03-14 21:40:35,253:INFO:Set up data.
2025-03-14 21:40:35,255:INFO:Set up index.
2025-03-14 21:40:35,340:INFO:Initializing predict_model()
2025-03-14 21:40:35,340:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E325F6790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:35,340:INFO:Checking exceptions
2025-03-14 21:40:35,340:INFO:Preloading libraries
2025-03-14 21:40:35,342:INFO:Set up data.
2025-03-14 21:40:35,343:INFO:Set up index.
2025-03-14 21:40:35,434:INFO:Initializing predict_model()
2025-03-14 21:40:35,434:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32385C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:35,434:INFO:Checking exceptions
2025-03-14 21:40:35,434:INFO:Preloading libraries
2025-03-14 21:40:35,434:INFO:Set up data.
2025-03-14 21:40:35,435:INFO:Set up index.
2025-03-14 21:40:35,526:INFO:Initializing predict_model()
2025-03-14 21:40:35,526:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA62D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:35,526:INFO:Checking exceptions
2025-03-14 21:40:35,526:INFO:Preloading libraries
2025-03-14 21:40:35,526:INFO:Set up data.
2025-03-14 21:40:35,529:INFO:Set up index.
2025-03-14 21:40:35,624:INFO:Initializing predict_model()
2025-03-14 21:40:35,624:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CB350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:35,624:INFO:Checking exceptions
2025-03-14 21:40:35,624:INFO:Preloading libraries
2025-03-14 21:40:35,624:INFO:Set up data.
2025-03-14 21:40:35,627:INFO:Set up index.
2025-03-14 21:40:35,712:INFO:Initializing predict_model()
2025-03-14 21:40:35,712:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38089610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:35,712:INFO:Checking exceptions
2025-03-14 21:40:35,712:INFO:Preloading libraries
2025-03-14 21:40:35,712:INFO:Set up data.
2025-03-14 21:40:35,715:INFO:Set up index.
2025-03-14 21:40:35,801:INFO:Initializing predict_model()
2025-03-14 21:40:35,801:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38056850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:35,801:INFO:Checking exceptions
2025-03-14 21:40:35,801:INFO:Preloading libraries
2025-03-14 21:40:35,801:INFO:Set up data.
2025-03-14 21:40:35,804:INFO:Set up index.
2025-03-14 21:40:35,889:INFO:Initializing predict_model()
2025-03-14 21:40:35,889:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38078DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:35,889:INFO:Checking exceptions
2025-03-14 21:40:35,889:INFO:Preloading libraries
2025-03-14 21:40:35,889:INFO:Set up data.
2025-03-14 21:40:35,892:INFO:Set up index.
2025-03-14 21:40:35,978:INFO:Initializing predict_model()
2025-03-14 21:40:35,978:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38093890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:35,978:INFO:Checking exceptions
2025-03-14 21:40:35,978:INFO:Preloading libraries
2025-03-14 21:40:35,978:INFO:Set up data.
2025-03-14 21:40:35,981:INFO:Set up index.
2025-03-14 21:40:36,075:INFO:Initializing predict_model()
2025-03-14 21:40:36,075:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E363DBBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:36,075:INFO:Checking exceptions
2025-03-14 21:40:36,075:INFO:Preloading libraries
2025-03-14 21:40:36,075:INFO:Set up data.
2025-03-14 21:40:36,078:INFO:Set up index.
2025-03-14 21:40:36,165:INFO:Initializing predict_model()
2025-03-14 21:40:36,165:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38170910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:36,165:INFO:Checking exceptions
2025-03-14 21:40:36,165:INFO:Preloading libraries
2025-03-14 21:40:36,165:INFO:Set up data.
2025-03-14 21:40:36,168:INFO:Set up index.
2025-03-14 21:40:36,258:INFO:Initializing predict_model()
2025-03-14 21:40:36,258:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FE9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:36,258:INFO:Checking exceptions
2025-03-14 21:40:36,258:INFO:Preloading libraries
2025-03-14 21:40:36,258:INFO:Set up data.
2025-03-14 21:40:36,261:INFO:Set up index.
2025-03-14 21:40:36,355:INFO:Initializing predict_model()
2025-03-14 21:40:36,356:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38090D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:36,356:INFO:Checking exceptions
2025-03-14 21:40:36,356:INFO:Preloading libraries
2025-03-14 21:40:36,356:INFO:Set up data.
2025-03-14 21:40:36,358:INFO:Set up index.
2025-03-14 21:40:36,454:INFO:Initializing predict_model()
2025-03-14 21:40:36,454:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38172990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:36,454:INFO:Checking exceptions
2025-03-14 21:40:36,454:INFO:Preloading libraries
2025-03-14 21:40:36,454:INFO:Set up data.
2025-03-14 21:40:36,457:INFO:Set up index.
2025-03-14 21:40:36,542:INFO:Initializing predict_model()
2025-03-14 21:40:36,543:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FDC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:36,543:INFO:Checking exceptions
2025-03-14 21:40:36,543:INFO:Preloading libraries
2025-03-14 21:40:36,543:INFO:Set up data.
2025-03-14 21:40:36,547:INFO:Set up index.
2025-03-14 21:40:36,637:INFO:Initializing predict_model()
2025-03-14 21:40:36,637:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B46B050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:36,637:INFO:Checking exceptions
2025-03-14 21:40:36,637:INFO:Preloading libraries
2025-03-14 21:40:36,637:INFO:Set up data.
2025-03-14 21:40:36,640:INFO:Set up index.
2025-03-14 21:40:36,731:INFO:Initializing predict_model()
2025-03-14 21:40:36,731:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807A110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:36,731:INFO:Checking exceptions
2025-03-14 21:40:36,731:INFO:Preloading libraries
2025-03-14 21:40:36,731:INFO:Set up data.
2025-03-14 21:40:36,734:INFO:Set up index.
2025-03-14 21:40:36,825:INFO:Initializing predict_model()
2025-03-14 21:40:36,826:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807AB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:36,826:INFO:Checking exceptions
2025-03-14 21:40:36,826:INFO:Preloading libraries
2025-03-14 21:40:36,826:INFO:Set up data.
2025-03-14 21:40:36,827:INFO:Set up index.
2025-03-14 21:40:36,911:INFO:Initializing predict_model()
2025-03-14 21:40:36,911:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CBDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:36,911:INFO:Checking exceptions
2025-03-14 21:40:36,911:INFO:Preloading libraries
2025-03-14 21:40:36,911:INFO:Set up data.
2025-03-14 21:40:36,915:INFO:Set up index.
2025-03-14 21:40:37,000:INFO:Initializing predict_model()
2025-03-14 21:40:37,000:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38092310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:37,000:INFO:Checking exceptions
2025-03-14 21:40:37,000:INFO:Preloading libraries
2025-03-14 21:40:37,000:INFO:Set up data.
2025-03-14 21:40:37,003:INFO:Set up index.
2025-03-14 21:40:37,088:INFO:Initializing predict_model()
2025-03-14 21:40:37,088:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3810AF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:37,088:INFO:Checking exceptions
2025-03-14 21:40:37,088:INFO:Preloading libraries
2025-03-14 21:40:37,088:INFO:Set up data.
2025-03-14 21:40:37,091:INFO:Set up index.
2025-03-14 21:40:37,181:INFO:Initializing predict_model()
2025-03-14 21:40:37,181:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38196ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:37,181:INFO:Checking exceptions
2025-03-14 21:40:37,181:INFO:Preloading libraries
2025-03-14 21:40:37,181:INFO:Set up data.
2025-03-14 21:40:37,184:INFO:Set up index.
2025-03-14 21:40:37,278:INFO:Initializing predict_model()
2025-03-14 21:40:37,278:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38172FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:37,278:INFO:Checking exceptions
2025-03-14 21:40:37,278:INFO:Preloading libraries
2025-03-14 21:40:37,278:INFO:Set up data.
2025-03-14 21:40:37,281:INFO:Set up index.
2025-03-14 21:40:37,368:INFO:Initializing predict_model()
2025-03-14 21:40:37,368:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819EA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:37,368:INFO:Checking exceptions
2025-03-14 21:40:37,368:INFO:Preloading libraries
2025-03-14 21:40:37,369:INFO:Set up data.
2025-03-14 21:40:37,371:INFO:Set up index.
2025-03-14 21:40:37,459:INFO:Initializing predict_model()
2025-03-14 21:40:37,459:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380799D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:37,459:INFO:Checking exceptions
2025-03-14 21:40:37,459:INFO:Preloading libraries
2025-03-14 21:40:37,459:INFO:Set up data.
2025-03-14 21:40:37,462:INFO:Set up index.
2025-03-14 21:40:37,551:INFO:Initializing predict_model()
2025-03-14 21:40:37,551:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34962890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:37,551:INFO:Checking exceptions
2025-03-14 21:40:37,551:INFO:Preloading libraries
2025-03-14 21:40:37,551:INFO:Set up data.
2025-03-14 21:40:37,554:INFO:Set up index.
2025-03-14 21:40:37,647:INFO:Initializing predict_model()
2025-03-14 21:40:37,647:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38076C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:37,647:INFO:Checking exceptions
2025-03-14 21:40:37,647:INFO:Preloading libraries
2025-03-14 21:40:37,648:INFO:Set up data.
2025-03-14 21:40:37,650:INFO:Set up index.
2025-03-14 21:40:37,741:INFO:Initializing predict_model()
2025-03-14 21:40:37,741:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34B32390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:37,741:INFO:Checking exceptions
2025-03-14 21:40:37,741:INFO:Preloading libraries
2025-03-14 21:40:37,741:INFO:Set up data.
2025-03-14 21:40:37,744:INFO:Set up index.
2025-03-14 21:40:37,844:INFO:Initializing predict_model()
2025-03-14 21:40:37,844:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3810AB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:37,844:INFO:Checking exceptions
2025-03-14 21:40:37,844:INFO:Preloading libraries
2025-03-14 21:40:37,844:INFO:Set up data.
2025-03-14 21:40:37,849:INFO:Set up index.
2025-03-14 21:40:37,936:INFO:Initializing predict_model()
2025-03-14 21:40:37,936:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38106E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:37,936:INFO:Checking exceptions
2025-03-14 21:40:37,936:INFO:Preloading libraries
2025-03-14 21:40:37,936:INFO:Set up data.
2025-03-14 21:40:37,937:INFO:Set up index.
2025-03-14 21:40:38,022:INFO:Initializing predict_model()
2025-03-14 21:40:38,022:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA4410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:38,022:INFO:Checking exceptions
2025-03-14 21:40:38,022:INFO:Preloading libraries
2025-03-14 21:40:38,022:INFO:Set up data.
2025-03-14 21:40:38,025:INFO:Set up index.
2025-03-14 21:40:38,118:INFO:Initializing predict_model()
2025-03-14 21:40:38,118:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA4410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:38,118:INFO:Checking exceptions
2025-03-14 21:40:38,118:INFO:Preloading libraries
2025-03-14 21:40:38,118:INFO:Set up data.
2025-03-14 21:40:38,121:INFO:Set up index.
2025-03-14 21:40:38,207:INFO:Initializing predict_model()
2025-03-14 21:40:38,207:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A6E590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:38,207:INFO:Checking exceptions
2025-03-14 21:40:38,207:INFO:Preloading libraries
2025-03-14 21:40:38,207:INFO:Set up data.
2025-03-14 21:40:38,210:INFO:Set up index.
2025-03-14 21:40:38,297:INFO:Initializing predict_model()
2025-03-14 21:40:38,297:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:38,297:INFO:Checking exceptions
2025-03-14 21:40:38,297:INFO:Preloading libraries
2025-03-14 21:40:38,297:INFO:Set up data.
2025-03-14 21:40:38,299:INFO:Set up index.
2025-03-14 21:40:38,395:INFO:Initializing predict_model()
2025-03-14 21:40:38,395:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807AD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:38,395:INFO:Checking exceptions
2025-03-14 21:40:38,395:INFO:Preloading libraries
2025-03-14 21:40:38,397:INFO:Set up data.
2025-03-14 21:40:38,399:INFO:Set up index.
2025-03-14 21:40:38,488:INFO:Initializing predict_model()
2025-03-14 21:40:38,488:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CEF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:38,488:INFO:Checking exceptions
2025-03-14 21:40:38,488:INFO:Preloading libraries
2025-03-14 21:40:38,488:INFO:Set up data.
2025-03-14 21:40:38,491:INFO:Set up index.
2025-03-14 21:40:38,575:INFO:Initializing predict_model()
2025-03-14 21:40:38,575:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA4410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:38,575:INFO:Checking exceptions
2025-03-14 21:40:38,575:INFO:Preloading libraries
2025-03-14 21:40:38,575:INFO:Set up data.
2025-03-14 21:40:38,578:INFO:Set up index.
2025-03-14 21:40:38,661:INFO:Initializing predict_model()
2025-03-14 21:40:38,662:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CAC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:38,662:INFO:Checking exceptions
2025-03-14 21:40:38,662:INFO:Preloading libraries
2025-03-14 21:40:38,662:INFO:Set up data.
2025-03-14 21:40:38,664:INFO:Set up index.
2025-03-14 21:40:38,754:INFO:Initializing predict_model()
2025-03-14 21:40:38,754:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A6F7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:38,754:INFO:Checking exceptions
2025-03-14 21:40:38,754:INFO:Preloading libraries
2025-03-14 21:40:38,754:INFO:Set up data.
2025-03-14 21:40:38,756:INFO:Set up index.
2025-03-14 21:40:38,841:INFO:Initializing predict_model()
2025-03-14 21:40:38,841:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808B610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:38,841:INFO:Checking exceptions
2025-03-14 21:40:38,841:INFO:Preloading libraries
2025-03-14 21:40:38,841:INFO:Set up data.
2025-03-14 21:40:38,844:INFO:Set up index.
2025-03-14 21:40:38,928:INFO:Initializing predict_model()
2025-03-14 21:40:38,928:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381722D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:38,928:INFO:Checking exceptions
2025-03-14 21:40:38,928:INFO:Preloading libraries
2025-03-14 21:40:38,928:INFO:Set up data.
2025-03-14 21:40:38,931:INFO:Set up index.
2025-03-14 21:40:39,015:INFO:Initializing predict_model()
2025-03-14 21:40:39,015:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CBC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:39,017:INFO:Checking exceptions
2025-03-14 21:40:39,017:INFO:Preloading libraries
2025-03-14 21:40:39,017:INFO:Set up data.
2025-03-14 21:40:39,018:INFO:Set up index.
2025-03-14 21:40:39,105:INFO:Initializing predict_model()
2025-03-14 21:40:39,105:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38106D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:39,105:INFO:Checking exceptions
2025-03-14 21:40:39,105:INFO:Preloading libraries
2025-03-14 21:40:39,105:INFO:Set up data.
2025-03-14 21:40:39,108:INFO:Set up index.
2025-03-14 21:40:39,194:INFO:Initializing predict_model()
2025-03-14 21:40:39,194:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E345505D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:39,194:INFO:Checking exceptions
2025-03-14 21:40:39,194:INFO:Preloading libraries
2025-03-14 21:40:39,194:INFO:Set up data.
2025-03-14 21:40:39,196:INFO:Set up index.
2025-03-14 21:40:39,292:INFO:Initializing predict_model()
2025-03-14 21:40:39,292:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38196F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:39,292:INFO:Checking exceptions
2025-03-14 21:40:39,292:INFO:Preloading libraries
2025-03-14 21:40:39,292:INFO:Set up data.
2025-03-14 21:40:39,299:INFO:Set up index.
2025-03-14 21:40:39,386:INFO:Initializing predict_model()
2025-03-14 21:40:39,386:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38090D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:39,386:INFO:Checking exceptions
2025-03-14 21:40:39,386:INFO:Preloading libraries
2025-03-14 21:40:39,386:INFO:Set up data.
2025-03-14 21:40:39,390:INFO:Set up index.
2025-03-14 21:40:39,477:INFO:Initializing predict_model()
2025-03-14 21:40:39,477:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807A050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:39,477:INFO:Checking exceptions
2025-03-14 21:40:39,477:INFO:Preloading libraries
2025-03-14 21:40:39,477:INFO:Set up data.
2025-03-14 21:40:39,479:INFO:Set up index.
2025-03-14 21:40:39,574:INFO:Initializing predict_model()
2025-03-14 21:40:39,574:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380C9990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:39,574:INFO:Checking exceptions
2025-03-14 21:40:39,574:INFO:Preloading libraries
2025-03-14 21:40:39,574:INFO:Set up data.
2025-03-14 21:40:39,577:INFO:Set up index.
2025-03-14 21:40:39,663:INFO:Initializing predict_model()
2025-03-14 21:40:39,663:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381999D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:39,663:INFO:Checking exceptions
2025-03-14 21:40:39,663:INFO:Preloading libraries
2025-03-14 21:40:39,663:INFO:Set up data.
2025-03-14 21:40:39,666:INFO:Set up index.
2025-03-14 21:40:39,752:INFO:Initializing predict_model()
2025-03-14 21:40:39,752:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38194310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:39,752:INFO:Checking exceptions
2025-03-14 21:40:39,752:INFO:Preloading libraries
2025-03-14 21:40:39,752:INFO:Set up data.
2025-03-14 21:40:39,755:INFO:Set up index.
2025-03-14 21:40:39,841:INFO:Initializing predict_model()
2025-03-14 21:40:39,841:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:39,841:INFO:Checking exceptions
2025-03-14 21:40:39,841:INFO:Preloading libraries
2025-03-14 21:40:39,841:INFO:Set up data.
2025-03-14 21:40:39,844:INFO:Set up index.
2025-03-14 21:40:39,931:INFO:Initializing predict_model()
2025-03-14 21:40:39,931:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:39,931:INFO:Checking exceptions
2025-03-14 21:40:39,931:INFO:Preloading libraries
2025-03-14 21:40:39,933:INFO:Set up data.
2025-03-14 21:40:39,935:INFO:Set up index.
2025-03-14 21:40:40,032:INFO:Initializing predict_model()
2025-03-14 21:40:40,032:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CA090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:40,032:INFO:Checking exceptions
2025-03-14 21:40:40,032:INFO:Preloading libraries
2025-03-14 21:40:40,032:INFO:Set up data.
2025-03-14 21:40:40,035:INFO:Set up index.
2025-03-14 21:40:40,124:INFO:Initializing predict_model()
2025-03-14 21:40:40,124:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38100490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:40,124:INFO:Checking exceptions
2025-03-14 21:40:40,124:INFO:Preloading libraries
2025-03-14 21:40:40,124:INFO:Set up data.
2025-03-14 21:40:40,127:INFO:Set up index.
2025-03-14 21:40:40,213:INFO:Initializing predict_model()
2025-03-14 21:40:40,213:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38091610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:40,213:INFO:Checking exceptions
2025-03-14 21:40:40,213:INFO:Preloading libraries
2025-03-14 21:40:40,213:INFO:Set up data.
2025-03-14 21:40:40,216:INFO:Set up index.
2025-03-14 21:40:40,311:INFO:Initializing predict_model()
2025-03-14 21:40:40,311:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38101990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:40,311:INFO:Checking exceptions
2025-03-14 21:40:40,311:INFO:Preloading libraries
2025-03-14 21:40:40,311:INFO:Set up data.
2025-03-14 21:40:40,314:INFO:Set up index.
2025-03-14 21:40:40,402:INFO:Initializing predict_model()
2025-03-14 21:40:40,402:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38100710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:40,402:INFO:Checking exceptions
2025-03-14 21:40:40,402:INFO:Preloading libraries
2025-03-14 21:40:40,402:INFO:Set up data.
2025-03-14 21:40:40,405:INFO:Set up index.
2025-03-14 21:40:40,491:INFO:Initializing predict_model()
2025-03-14 21:40:40,491:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808BFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:40,491:INFO:Checking exceptions
2025-03-14 21:40:40,491:INFO:Preloading libraries
2025-03-14 21:40:40,491:INFO:Set up data.
2025-03-14 21:40:40,494:INFO:Set up index.
2025-03-14 21:40:40,578:INFO:Initializing predict_model()
2025-03-14 21:40:40,578:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380C89D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:40,578:INFO:Checking exceptions
2025-03-14 21:40:40,578:INFO:Preloading libraries
2025-03-14 21:40:40,578:INFO:Set up data.
2025-03-14 21:40:40,582:INFO:Set up index.
2025-03-14 21:40:40,667:INFO:Initializing predict_model()
2025-03-14 21:40:40,667:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380938D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:40,667:INFO:Checking exceptions
2025-03-14 21:40:40,667:INFO:Preloading libraries
2025-03-14 21:40:40,669:INFO:Set up data.
2025-03-14 21:40:40,670:INFO:Set up index.
2025-03-14 21:40:40,759:INFO:Initializing predict_model()
2025-03-14 21:40:40,759:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CBC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:40,759:INFO:Checking exceptions
2025-03-14 21:40:40,759:INFO:Preloading libraries
2025-03-14 21:40:40,759:INFO:Set up data.
2025-03-14 21:40:40,762:INFO:Set up index.
2025-03-14 21:40:40,844:INFO:Initializing predict_model()
2025-03-14 21:40:40,844:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38102B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:40,844:INFO:Checking exceptions
2025-03-14 21:40:40,844:INFO:Preloading libraries
2025-03-14 21:40:40,844:INFO:Set up data.
2025-03-14 21:40:40,847:INFO:Set up index.
2025-03-14 21:40:40,937:INFO:Initializing predict_model()
2025-03-14 21:40:40,937:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381999D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:40,937:INFO:Checking exceptions
2025-03-14 21:40:40,937:INFO:Preloading libraries
2025-03-14 21:40:40,937:INFO:Set up data.
2025-03-14 21:40:40,940:INFO:Set up index.
2025-03-14 21:40:41,032:INFO:Initializing predict_model()
2025-03-14 21:40:41,032:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4599D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:41,032:INFO:Checking exceptions
2025-03-14 21:40:41,032:INFO:Preloading libraries
2025-03-14 21:40:41,032:INFO:Set up data.
2025-03-14 21:40:41,033:INFO:Set up index.
2025-03-14 21:40:41,120:INFO:Initializing predict_model()
2025-03-14 21:40:41,120:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A6E590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:41,120:INFO:Checking exceptions
2025-03-14 21:40:41,120:INFO:Preloading libraries
2025-03-14 21:40:41,120:INFO:Set up data.
2025-03-14 21:40:41,123:INFO:Set up index.
2025-03-14 21:40:41,215:INFO:Initializing predict_model()
2025-03-14 21:40:41,215:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807A390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:41,216:INFO:Checking exceptions
2025-03-14 21:40:41,216:INFO:Preloading libraries
2025-03-14 21:40:41,216:INFO:Set up data.
2025-03-14 21:40:41,218:INFO:Set up index.
2025-03-14 21:40:41,321:INFO:Initializing predict_model()
2025-03-14 21:40:41,321:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA2D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:41,321:INFO:Checking exceptions
2025-03-14 21:40:41,321:INFO:Preloading libraries
2025-03-14 21:40:41,323:INFO:Set up data.
2025-03-14 21:40:41,326:INFO:Set up index.
2025-03-14 21:40:41,420:INFO:Initializing predict_model()
2025-03-14 21:40:41,420:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3810B8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:41,420:INFO:Checking exceptions
2025-03-14 21:40:41,420:INFO:Preloading libraries
2025-03-14 21:40:41,420:INFO:Set up data.
2025-03-14 21:40:41,423:INFO:Set up index.
2025-03-14 21:40:41,512:INFO:Initializing predict_model()
2025-03-14 21:40:41,512:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E340677D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:41,512:INFO:Checking exceptions
2025-03-14 21:40:41,512:INFO:Preloading libraries
2025-03-14 21:40:41,512:INFO:Set up data.
2025-03-14 21:40:41,515:INFO:Set up index.
2025-03-14 21:40:41,610:INFO:Initializing predict_model()
2025-03-14 21:40:41,610:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E322592D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:41,610:INFO:Checking exceptions
2025-03-14 21:40:41,610:INFO:Preloading libraries
2025-03-14 21:40:41,610:INFO:Set up data.
2025-03-14 21:40:41,613:INFO:Set up index.
2025-03-14 21:40:41,701:INFO:Initializing predict_model()
2025-03-14 21:40:41,701:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38194510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:41,702:INFO:Checking exceptions
2025-03-14 21:40:41,702:INFO:Preloading libraries
2025-03-14 21:40:41,702:INFO:Set up data.
2025-03-14 21:40:41,704:INFO:Set up index.
2025-03-14 21:40:41,794:INFO:Initializing predict_model()
2025-03-14 21:40:41,794:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3810A910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:41,794:INFO:Checking exceptions
2025-03-14 21:40:41,794:INFO:Preloading libraries
2025-03-14 21:40:41,794:INFO:Set up data.
2025-03-14 21:40:41,797:INFO:Set up index.
2025-03-14 21:40:41,891:INFO:Initializing predict_model()
2025-03-14 21:40:41,891:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E344A7D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:41,891:INFO:Checking exceptions
2025-03-14 21:40:41,891:INFO:Preloading libraries
2025-03-14 21:40:41,891:INFO:Set up data.
2025-03-14 21:40:41,894:INFO:Set up index.
2025-03-14 21:40:41,979:INFO:Initializing predict_model()
2025-03-14 21:40:41,979:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38056790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:41,979:INFO:Checking exceptions
2025-03-14 21:40:41,979:INFO:Preloading libraries
2025-03-14 21:40:41,979:INFO:Set up data.
2025-03-14 21:40:41,982:INFO:Set up index.
2025-03-14 21:40:42,065:INFO:Initializing predict_model()
2025-03-14 21:40:42,065:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CB250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:42,065:INFO:Checking exceptions
2025-03-14 21:40:42,065:INFO:Preloading libraries
2025-03-14 21:40:42,065:INFO:Set up data.
2025-03-14 21:40:42,067:INFO:Set up index.
2025-03-14 21:40:42,154:INFO:Initializing predict_model()
2025-03-14 21:40:42,154:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38323C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:42,154:INFO:Checking exceptions
2025-03-14 21:40:42,154:INFO:Preloading libraries
2025-03-14 21:40:42,154:INFO:Set up data.
2025-03-14 21:40:42,157:INFO:Set up index.
2025-03-14 21:40:42,242:INFO:Initializing predict_model()
2025-03-14 21:40:42,242:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38172E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:42,242:INFO:Checking exceptions
2025-03-14 21:40:42,242:INFO:Preloading libraries
2025-03-14 21:40:42,242:INFO:Set up data.
2025-03-14 21:40:42,244:INFO:Set up index.
2025-03-14 21:40:42,336:INFO:Initializing predict_model()
2025-03-14 21:40:42,336:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38092E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:42,336:INFO:Checking exceptions
2025-03-14 21:40:42,336:INFO:Preloading libraries
2025-03-14 21:40:42,336:INFO:Set up data.
2025-03-14 21:40:42,339:INFO:Set up index.
2025-03-14 21:40:42,445:INFO:Initializing predict_model()
2025-03-14 21:40:42,445:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32F51A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:42,445:INFO:Checking exceptions
2025-03-14 21:40:42,445:INFO:Preloading libraries
2025-03-14 21:40:42,446:INFO:Set up data.
2025-03-14 21:40:42,448:INFO:Set up index.
2025-03-14 21:40:42,537:INFO:Initializing predict_model()
2025-03-14 21:40:42,537:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CFF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:42,537:INFO:Checking exceptions
2025-03-14 21:40:42,539:INFO:Preloading libraries
2025-03-14 21:40:42,539:INFO:Set up data.
2025-03-14 21:40:42,544:INFO:Set up index.
2025-03-14 21:40:42,638:INFO:Initializing predict_model()
2025-03-14 21:40:42,638:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E343055D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:42,638:INFO:Checking exceptions
2025-03-14 21:40:42,638:INFO:Preloading libraries
2025-03-14 21:40:42,638:INFO:Set up data.
2025-03-14 21:40:42,642:INFO:Set up index.
2025-03-14 21:40:42,746:INFO:Initializing predict_model()
2025-03-14 21:40:42,746:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38090AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:42,746:INFO:Checking exceptions
2025-03-14 21:40:42,746:INFO:Preloading libraries
2025-03-14 21:40:42,747:INFO:Set up data.
2025-03-14 21:40:42,749:INFO:Set up index.
2025-03-14 21:40:42,834:INFO:Initializing predict_model()
2025-03-14 21:40:42,834:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FE750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:42,834:INFO:Checking exceptions
2025-03-14 21:40:42,834:INFO:Preloading libraries
2025-03-14 21:40:42,834:INFO:Set up data.
2025-03-14 21:40:42,835:INFO:Set up index.
2025-03-14 21:40:42,922:INFO:Initializing predict_model()
2025-03-14 21:40:42,923:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CBE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:42,923:INFO:Checking exceptions
2025-03-14 21:40:42,923:INFO:Preloading libraries
2025-03-14 21:40:42,923:INFO:Set up data.
2025-03-14 21:40:42,926:INFO:Set up index.
2025-03-14 21:40:43,016:INFO:Initializing predict_model()
2025-03-14 21:40:43,016:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38056850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:43,016:INFO:Checking exceptions
2025-03-14 21:40:43,016:INFO:Preloading libraries
2025-03-14 21:40:43,016:INFO:Set up data.
2025-03-14 21:40:43,017:INFO:Set up index.
2025-03-14 21:40:43,111:INFO:Initializing predict_model()
2025-03-14 21:40:43,111:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38075C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:43,111:INFO:Checking exceptions
2025-03-14 21:40:43,111:INFO:Preloading libraries
2025-03-14 21:40:43,111:INFO:Set up data.
2025-03-14 21:40:43,115:INFO:Set up index.
2025-03-14 21:40:43,198:INFO:Initializing predict_model()
2025-03-14 21:40:43,198:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4592D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:43,198:INFO:Checking exceptions
2025-03-14 21:40:43,198:INFO:Preloading libraries
2025-03-14 21:40:43,198:INFO:Set up data.
2025-03-14 21:40:43,201:INFO:Set up index.
2025-03-14 21:40:43,285:INFO:Initializing predict_model()
2025-03-14 21:40:43,287:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38199810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:43,287:INFO:Checking exceptions
2025-03-14 21:40:43,287:INFO:Preloading libraries
2025-03-14 21:40:43,287:INFO:Set up data.
2025-03-14 21:40:43,288:INFO:Set up index.
2025-03-14 21:40:43,375:INFO:Initializing predict_model()
2025-03-14 21:40:43,375:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CFE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:43,375:INFO:Checking exceptions
2025-03-14 21:40:43,375:INFO:Preloading libraries
2025-03-14 21:40:43,375:INFO:Set up data.
2025-03-14 21:40:43,377:INFO:Set up index.
2025-03-14 21:40:43,471:INFO:Initializing predict_model()
2025-03-14 21:40:43,471:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380C9E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:43,471:INFO:Checking exceptions
2025-03-14 21:40:43,473:INFO:Preloading libraries
2025-03-14 21:40:43,473:INFO:Set up data.
2025-03-14 21:40:43,474:INFO:Set up index.
2025-03-14 21:40:43,568:INFO:Initializing predict_model()
2025-03-14 21:40:43,568:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38089610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:43,568:INFO:Checking exceptions
2025-03-14 21:40:43,568:INFO:Preloading libraries
2025-03-14 21:40:43,568:INFO:Set up data.
2025-03-14 21:40:43,570:INFO:Set up index.
2025-03-14 21:40:43,656:INFO:Initializing predict_model()
2025-03-14 21:40:43,656:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FD510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:43,656:INFO:Checking exceptions
2025-03-14 21:40:43,656:INFO:Preloading libraries
2025-03-14 21:40:43,657:INFO:Set up data.
2025-03-14 21:40:43,659:INFO:Set up index.
2025-03-14 21:40:43,747:INFO:Initializing predict_model()
2025-03-14 21:40:43,747:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38106010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:43,747:INFO:Checking exceptions
2025-03-14 21:40:43,747:INFO:Preloading libraries
2025-03-14 21:40:43,747:INFO:Set up data.
2025-03-14 21:40:43,750:INFO:Set up index.
2025-03-14 21:40:43,833:INFO:Initializing predict_model()
2025-03-14 21:40:43,833:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38173050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:43,833:INFO:Checking exceptions
2025-03-14 21:40:43,833:INFO:Preloading libraries
2025-03-14 21:40:43,833:INFO:Set up data.
2025-03-14 21:40:43,836:INFO:Set up index.
2025-03-14 21:40:43,920:INFO:Initializing predict_model()
2025-03-14 21:40:43,920:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38102B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:43,920:INFO:Checking exceptions
2025-03-14 21:40:43,922:INFO:Preloading libraries
2025-03-14 21:40:43,922:INFO:Set up data.
2025-03-14 21:40:43,925:INFO:Set up index.
2025-03-14 21:40:44,010:INFO:Initializing predict_model()
2025-03-14 21:40:44,010:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38076A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:44,010:INFO:Checking exceptions
2025-03-14 21:40:44,010:INFO:Preloading libraries
2025-03-14 21:40:44,010:INFO:Set up data.
2025-03-14 21:40:44,013:INFO:Set up index.
2025-03-14 21:40:44,099:INFO:Initializing predict_model()
2025-03-14 21:40:44,099:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38093890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:44,099:INFO:Checking exceptions
2025-03-14 21:40:44,099:INFO:Preloading libraries
2025-03-14 21:40:44,099:INFO:Set up data.
2025-03-14 21:40:44,102:INFO:Set up index.
2025-03-14 21:40:44,188:INFO:Initializing predict_model()
2025-03-14 21:40:44,188:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38109A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:44,188:INFO:Checking exceptions
2025-03-14 21:40:44,188:INFO:Preloading libraries
2025-03-14 21:40:44,188:INFO:Set up data.
2025-03-14 21:40:44,191:INFO:Set up index.
2025-03-14 21:40:44,278:INFO:Initializing predict_model()
2025-03-14 21:40:44,278:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381974D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:44,278:INFO:Checking exceptions
2025-03-14 21:40:44,278:INFO:Preloading libraries
2025-03-14 21:40:44,278:INFO:Set up data.
2025-03-14 21:40:44,281:INFO:Set up index.
2025-03-14 21:40:44,367:INFO:Initializing predict_model()
2025-03-14 21:40:44,367:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38173790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:44,367:INFO:Checking exceptions
2025-03-14 21:40:44,367:INFO:Preloading libraries
2025-03-14 21:40:44,367:INFO:Set up data.
2025-03-14 21:40:44,371:INFO:Set up index.
2025-03-14 21:40:44,456:INFO:Initializing predict_model()
2025-03-14 21:40:44,456:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CFB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:44,456:INFO:Checking exceptions
2025-03-14 21:40:44,456:INFO:Preloading libraries
2025-03-14 21:40:44,456:INFO:Set up data.
2025-03-14 21:40:44,459:INFO:Set up index.
2025-03-14 21:40:44,549:INFO:Initializing predict_model()
2025-03-14 21:40:44,549:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38074490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:44,549:INFO:Checking exceptions
2025-03-14 21:40:44,549:INFO:Preloading libraries
2025-03-14 21:40:44,549:INFO:Set up data.
2025-03-14 21:40:44,552:INFO:Set up index.
2025-03-14 21:40:44,635:INFO:Initializing predict_model()
2025-03-14 21:40:44,635:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36FA0E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:44,635:INFO:Checking exceptions
2025-03-14 21:40:44,635:INFO:Preloading libraries
2025-03-14 21:40:44,635:INFO:Set up data.
2025-03-14 21:40:44,639:INFO:Set up index.
2025-03-14 21:40:44,719:INFO:Initializing predict_model()
2025-03-14 21:40:44,719:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38077B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:44,719:INFO:Checking exceptions
2025-03-14 21:40:44,719:INFO:Preloading libraries
2025-03-14 21:40:44,719:INFO:Set up data.
2025-03-14 21:40:44,721:INFO:Set up index.
2025-03-14 21:40:44,802:INFO:Initializing predict_model()
2025-03-14 21:40:44,802:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38172750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:44,802:INFO:Checking exceptions
2025-03-14 21:40:44,802:INFO:Preloading libraries
2025-03-14 21:40:44,802:INFO:Set up data.
2025-03-14 21:40:44,805:INFO:Set up index.
2025-03-14 21:40:44,888:INFO:Initializing predict_model()
2025-03-14 21:40:44,888:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CC4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:44,888:INFO:Checking exceptions
2025-03-14 21:40:44,888:INFO:Preloading libraries
2025-03-14 21:40:44,888:INFO:Set up data.
2025-03-14 21:40:44,891:INFO:Set up index.
2025-03-14 21:40:44,972:INFO:Initializing predict_model()
2025-03-14 21:40:44,972:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36FA0F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:44,972:INFO:Checking exceptions
2025-03-14 21:40:44,972:INFO:Preloading libraries
2025-03-14 21:40:44,974:INFO:Set up data.
2025-03-14 21:40:44,975:INFO:Set up index.
2025-03-14 21:40:45,057:INFO:Initializing predict_model()
2025-03-14 21:40:45,057:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807AFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:45,057:INFO:Checking exceptions
2025-03-14 21:40:45,057:INFO:Preloading libraries
2025-03-14 21:40:45,057:INFO:Set up data.
2025-03-14 21:40:45,060:INFO:Set up index.
2025-03-14 21:40:45,142:INFO:Initializing predict_model()
2025-03-14 21:40:45,143:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E0181C250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:45,143:INFO:Checking exceptions
2025-03-14 21:40:45,143:INFO:Preloading libraries
2025-03-14 21:40:45,143:INFO:Set up data.
2025-03-14 21:40:45,147:INFO:Set up index.
2025-03-14 21:40:45,227:INFO:Initializing predict_model()
2025-03-14 21:40:45,227:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807A390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:45,227:INFO:Checking exceptions
2025-03-14 21:40:45,227:INFO:Preloading libraries
2025-03-14 21:40:45,227:INFO:Set up data.
2025-03-14 21:40:45,230:INFO:Set up index.
2025-03-14 21:40:45,314:INFO:Initializing predict_model()
2025-03-14 21:40:45,314:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808B750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:45,314:INFO:Checking exceptions
2025-03-14 21:40:45,314:INFO:Preloading libraries
2025-03-14 21:40:45,314:INFO:Set up data.
2025-03-14 21:40:45,315:INFO:Set up index.
2025-03-14 21:40:45,400:INFO:Initializing predict_model()
2025-03-14 21:40:45,400:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808B610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:45,400:INFO:Checking exceptions
2025-03-14 21:40:45,400:INFO:Preloading libraries
2025-03-14 21:40:45,400:INFO:Set up data.
2025-03-14 21:40:45,403:INFO:Set up index.
2025-03-14 21:40:45,484:INFO:Initializing predict_model()
2025-03-14 21:40:45,484:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38171F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:45,484:INFO:Checking exceptions
2025-03-14 21:40:45,484:INFO:Preloading libraries
2025-03-14 21:40:45,484:INFO:Set up data.
2025-03-14 21:40:45,486:INFO:Set up index.
2025-03-14 21:40:45,570:INFO:Initializing predict_model()
2025-03-14 21:40:45,570:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381971D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:45,571:INFO:Checking exceptions
2025-03-14 21:40:45,571:INFO:Preloading libraries
2025-03-14 21:40:45,571:INFO:Set up data.
2025-03-14 21:40:45,573:INFO:Set up index.
2025-03-14 21:40:45,670:INFO:Initializing predict_model()
2025-03-14 21:40:45,670:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CE910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:45,670:INFO:Checking exceptions
2025-03-14 21:40:45,670:INFO:Preloading libraries
2025-03-14 21:40:45,670:INFO:Set up data.
2025-03-14 21:40:45,673:INFO:Set up index.
2025-03-14 21:40:45,759:INFO:Initializing predict_model()
2025-03-14 21:40:45,759:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B467550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:45,759:INFO:Checking exceptions
2025-03-14 21:40:45,759:INFO:Preloading libraries
2025-03-14 21:40:45,759:INFO:Set up data.
2025-03-14 21:40:45,762:INFO:Set up index.
2025-03-14 21:40:45,848:INFO:Initializing predict_model()
2025-03-14 21:40:45,848:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38075ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:45,848:INFO:Checking exceptions
2025-03-14 21:40:45,848:INFO:Preloading libraries
2025-03-14 21:40:45,848:INFO:Set up data.
2025-03-14 21:40:45,854:INFO:Set up index.
2025-03-14 21:40:45,943:INFO:Initializing predict_model()
2025-03-14 21:40:45,943:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA62D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:45,943:INFO:Checking exceptions
2025-03-14 21:40:45,943:INFO:Preloading libraries
2025-03-14 21:40:45,943:INFO:Set up data.
2025-03-14 21:40:45,946:INFO:Set up index.
2025-03-14 21:40:46,035:INFO:Initializing predict_model()
2025-03-14 21:40:46,035:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A92B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:46,035:INFO:Checking exceptions
2025-03-14 21:40:46,035:INFO:Preloading libraries
2025-03-14 21:40:46,036:INFO:Set up data.
2025-03-14 21:40:46,039:INFO:Set up index.
2025-03-14 21:40:46,126:INFO:Initializing predict_model()
2025-03-14 21:40:46,126:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38109250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:46,126:INFO:Checking exceptions
2025-03-14 21:40:46,126:INFO:Preloading libraries
2025-03-14 21:40:46,126:INFO:Set up data.
2025-03-14 21:40:46,129:INFO:Set up index.
2025-03-14 21:40:46,217:INFO:Initializing predict_model()
2025-03-14 21:40:46,217:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32523B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:46,217:INFO:Checking exceptions
2025-03-14 21:40:46,217:INFO:Preloading libraries
2025-03-14 21:40:46,217:INFO:Set up data.
2025-03-14 21:40:46,221:INFO:Set up index.
2025-03-14 21:40:46,315:INFO:Initializing predict_model()
2025-03-14 21:40:46,315:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380FE850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:46,315:INFO:Checking exceptions
2025-03-14 21:40:46,315:INFO:Preloading libraries
2025-03-14 21:40:46,317:INFO:Set up data.
2025-03-14 21:40:46,320:INFO:Set up index.
2025-03-14 21:40:46,407:INFO:Initializing predict_model()
2025-03-14 21:40:46,407:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38172A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:46,407:INFO:Checking exceptions
2025-03-14 21:40:46,407:INFO:Preloading libraries
2025-03-14 21:40:46,407:INFO:Set up data.
2025-03-14 21:40:46,409:INFO:Set up index.
2025-03-14 21:40:46,492:INFO:Initializing predict_model()
2025-03-14 21:40:46,492:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4AC610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:46,492:INFO:Checking exceptions
2025-03-14 21:40:46,492:INFO:Preloading libraries
2025-03-14 21:40:46,492:INFO:Set up data.
2025-03-14 21:40:46,495:INFO:Set up index.
2025-03-14 21:40:46,578:INFO:Initializing predict_model()
2025-03-14 21:40:46,578:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38197F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:46,578:INFO:Checking exceptions
2025-03-14 21:40:46,578:INFO:Preloading libraries
2025-03-14 21:40:46,578:INFO:Set up data.
2025-03-14 21:40:46,582:INFO:Set up index.
2025-03-14 21:40:46,663:INFO:Initializing predict_model()
2025-03-14 21:40:46,663:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01EE0E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:46,663:INFO:Checking exceptions
2025-03-14 21:40:46,663:INFO:Preloading libraries
2025-03-14 21:40:46,665:INFO:Set up data.
2025-03-14 21:40:46,666:INFO:Set up index.
2025-03-14 21:40:46,749:INFO:Initializing predict_model()
2025-03-14 21:40:46,749:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38170110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:46,749:INFO:Checking exceptions
2025-03-14 21:40:46,749:INFO:Preloading libraries
2025-03-14 21:40:46,749:INFO:Set up data.
2025-03-14 21:40:46,752:INFO:Set up index.
2025-03-14 21:40:46,840:INFO:Initializing predict_model()
2025-03-14 21:40:46,840:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3807AC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:46,840:INFO:Checking exceptions
2025-03-14 21:40:46,840:INFO:Preloading libraries
2025-03-14 21:40:46,840:INFO:Set up data.
2025-03-14 21:40:46,844:INFO:Set up index.
2025-03-14 21:40:46,931:INFO:Initializing predict_model()
2025-03-14 21:40:46,931:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38101350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:46,931:INFO:Checking exceptions
2025-03-14 21:40:46,931:INFO:Preloading libraries
2025-03-14 21:40:46,931:INFO:Set up data.
2025-03-14 21:40:46,934:INFO:Set up index.
2025-03-14 21:40:47,029:INFO:Initializing predict_model()
2025-03-14 21:40:47,029:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CF5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:47,029:INFO:Checking exceptions
2025-03-14 21:40:47,029:INFO:Preloading libraries
2025-03-14 21:40:47,031:INFO:Set up data.
2025-03-14 21:40:47,032:INFO:Set up index.
2025-03-14 21:40:47,117:INFO:Initializing predict_model()
2025-03-14 21:40:47,117:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38056790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:47,117:INFO:Checking exceptions
2025-03-14 21:40:47,117:INFO:Preloading libraries
2025-03-14 21:40:47,117:INFO:Set up data.
2025-03-14 21:40:47,120:INFO:Set up index.
2025-03-14 21:40:47,201:INFO:Initializing predict_model()
2025-03-14 21:40:47,201:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38106610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:47,201:INFO:Checking exceptions
2025-03-14 21:40:47,201:INFO:Preloading libraries
2025-03-14 21:40:47,201:INFO:Set up data.
2025-03-14 21:40:47,204:INFO:Set up index.
2025-03-14 21:40:47,289:INFO:Initializing predict_model()
2025-03-14 21:40:47,289:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808B750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:47,289:INFO:Checking exceptions
2025-03-14 21:40:47,289:INFO:Preloading libraries
2025-03-14 21:40:47,289:INFO:Set up data.
2025-03-14 21:40:47,292:INFO:Set up index.
2025-03-14 21:40:47,374:INFO:Initializing predict_model()
2025-03-14 21:40:47,374:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34550910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:47,374:INFO:Checking exceptions
2025-03-14 21:40:47,374:INFO:Preloading libraries
2025-03-14 21:40:47,374:INFO:Set up data.
2025-03-14 21:40:47,377:INFO:Set up index.
2025-03-14 21:40:47,460:INFO:Initializing predict_model()
2025-03-14 21:40:47,460:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38199990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:47,460:INFO:Checking exceptions
2025-03-14 21:40:47,460:INFO:Preloading libraries
2025-03-14 21:40:47,460:INFO:Set up data.
2025-03-14 21:40:47,464:INFO:Set up index.
2025-03-14 21:40:47,544:INFO:Initializing predict_model()
2025-03-14 21:40:47,544:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380CDE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E32541800>)
2025-03-14 21:40:47,544:INFO:Checking exceptions
2025-03-14 21:40:47,544:INFO:Preloading libraries
2025-03-14 21:40:47,544:INFO:Set up data.
2025-03-14 21:40:47,547:INFO:Set up index.
2025-03-14 21:40:47,631:INFO:Initializing predict_model()
2025-03-14 21:40:47,631:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3808AED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E19A11580>)
2025-03-14 21:40:47,631:INFO:Checking exceptions
2025-03-14 21:40:47,631:INFO:Preloading libraries
2025-03-14 21:40:47,631:INFO:Set up data.
2025-03-14 21:40:47,634:INFO:Set up index.
2025-03-14 21:40:47,716:INFO:Initializing predict_model()
2025-03-14 21:40:47,716:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3638B8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E366DB2E0>)
2025-03-14 21:40:47,716:INFO:Checking exceptions
2025-03-14 21:40:47,716:INFO:Preloading libraries
2025-03-14 21:40:47,716:INFO:Set up data.
2025-03-14 21:40:47,718:INFO:Set up index.
2025-03-14 21:43:57,413:INFO:Initializing load_model()
2025-03-14 21:43:57,413:INFO:load_model(model_name=ada_and_dt_jsps01_temp_model, platform=None, authentication=None, verbose=True)
2025-03-14 21:43:58,458:INFO:Initializing predict_model()
2025-03-14 21:43:58,458:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36B5B3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E36F0AFC0>)
2025-03-14 21:43:58,458:INFO:Checking exceptions
2025-03-14 21:43:58,458:INFO:Preloading libraries
2025-03-14 21:43:58,458:INFO:Set up data.
2025-03-14 21:43:58,461:INFO:Set up index.
2025-03-14 21:43:58,556:INFO:Initializing predict_model()
2025-03-14 21:43:58,556:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA27D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:43:58,556:INFO:Checking exceptions
2025-03-14 21:43:58,556:INFO:Preloading libraries
2025-03-14 21:43:58,556:INFO:Set up data.
2025-03-14 21:43:58,559:INFO:Set up index.
2025-03-14 21:43:58,662:INFO:Initializing predict_model()
2025-03-14 21:43:58,662:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34C98FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:43:58,662:INFO:Checking exceptions
2025-03-14 21:43:58,662:INFO:Preloading libraries
2025-03-14 21:43:58,662:INFO:Set up data.
2025-03-14 21:43:58,665:INFO:Set up index.
2025-03-14 21:43:58,759:INFO:Initializing predict_model()
2025-03-14 21:43:58,759:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:43:58,759:INFO:Checking exceptions
2025-03-14 21:43:58,759:INFO:Preloading libraries
2025-03-14 21:43:58,759:INFO:Set up data.
2025-03-14 21:43:58,762:INFO:Set up index.
2025-03-14 21:43:58,851:INFO:Initializing predict_model()
2025-03-14 21:43:58,851:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36970A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:43:58,851:INFO:Checking exceptions
2025-03-14 21:43:58,851:INFO:Preloading libraries
2025-03-14 21:43:58,852:INFO:Set up data.
2025-03-14 21:43:58,854:INFO:Set up index.
2025-03-14 21:43:58,949:INFO:Initializing predict_model()
2025-03-14 21:43:58,949:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19A496D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:43:58,949:INFO:Checking exceptions
2025-03-14 21:43:58,950:INFO:Preloading libraries
2025-03-14 21:43:58,950:INFO:Set up data.
2025-03-14 21:43:58,953:INFO:Set up index.
2025-03-14 21:43:59,048:INFO:Initializing predict_model()
2025-03-14 21:43:59,048:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696F450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:43:59,048:INFO:Checking exceptions
2025-03-14 21:43:59,048:INFO:Preloading libraries
2025-03-14 21:43:59,048:INFO:Set up data.
2025-03-14 21:43:59,051:INFO:Set up index.
2025-03-14 21:43:59,143:INFO:Initializing predict_model()
2025-03-14 21:43:59,143:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA2D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:43:59,143:INFO:Checking exceptions
2025-03-14 21:43:59,143:INFO:Preloading libraries
2025-03-14 21:43:59,144:INFO:Set up data.
2025-03-14 21:43:59,147:INFO:Set up index.
2025-03-14 21:43:59,247:INFO:Initializing predict_model()
2025-03-14 21:43:59,247:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51B3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:43:59,247:INFO:Checking exceptions
2025-03-14 21:43:59,247:INFO:Preloading libraries
2025-03-14 21:43:59,247:INFO:Set up data.
2025-03-14 21:43:59,250:INFO:Set up index.
2025-03-14 21:43:59,344:INFO:Initializing predict_model()
2025-03-14 21:43:59,344:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B45B350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:43:59,344:INFO:Checking exceptions
2025-03-14 21:43:59,344:INFO:Preloading libraries
2025-03-14 21:43:59,346:INFO:Set up data.
2025-03-14 21:43:59,348:INFO:Set up index.
2025-03-14 21:43:59,441:INFO:Initializing predict_model()
2025-03-14 21:43:59,441:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B62FF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:43:59,441:INFO:Checking exceptions
2025-03-14 21:43:59,441:INFO:Preloading libraries
2025-03-14 21:43:59,441:INFO:Set up data.
2025-03-14 21:43:59,444:INFO:Set up index.
2025-03-14 21:43:59,538:INFO:Initializing predict_model()
2025-03-14 21:43:59,538:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382939D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:43:59,538:INFO:Checking exceptions
2025-03-14 21:43:59,538:INFO:Preloading libraries
2025-03-14 21:43:59,538:INFO:Set up data.
2025-03-14 21:43:59,541:INFO:Set up index.
2025-03-14 21:43:59,633:INFO:Initializing predict_model()
2025-03-14 21:43:59,633:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:43:59,633:INFO:Checking exceptions
2025-03-14 21:43:59,633:INFO:Preloading libraries
2025-03-14 21:43:59,633:INFO:Set up data.
2025-03-14 21:43:59,636:INFO:Set up index.
2025-03-14 21:43:59,721:INFO:Initializing predict_model()
2025-03-14 21:43:59,721:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4599D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:43:59,721:INFO:Checking exceptions
2025-03-14 21:43:59,721:INFO:Preloading libraries
2025-03-14 21:43:59,721:INFO:Set up data.
2025-03-14 21:43:59,724:INFO:Set up index.
2025-03-14 21:43:59,820:INFO:Initializing predict_model()
2025-03-14 21:43:59,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34986F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:43:59,820:INFO:Checking exceptions
2025-03-14 21:43:59,820:INFO:Preloading libraries
2025-03-14 21:43:59,820:INFO:Set up data.
2025-03-14 21:43:59,823:INFO:Set up index.
2025-03-14 21:43:59,914:INFO:Initializing predict_model()
2025-03-14 21:43:59,914:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B9A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:43:59,914:INFO:Checking exceptions
2025-03-14 21:43:59,914:INFO:Preloading libraries
2025-03-14 21:43:59,914:INFO:Set up data.
2025-03-14 21:43:59,917:INFO:Set up index.
2025-03-14 21:44:00,008:INFO:Initializing predict_model()
2025-03-14 21:44:00,010:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEE950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:00,010:INFO:Checking exceptions
2025-03-14 21:44:00,010:INFO:Preloading libraries
2025-03-14 21:44:00,010:INFO:Set up data.
2025-03-14 21:44:00,013:INFO:Set up index.
2025-03-14 21:44:00,097:INFO:Initializing predict_model()
2025-03-14 21:44:00,097:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A92D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:00,097:INFO:Checking exceptions
2025-03-14 21:44:00,097:INFO:Preloading libraries
2025-03-14 21:44:00,097:INFO:Set up data.
2025-03-14 21:44:00,101:INFO:Set up index.
2025-03-14 21:44:00,193:INFO:Initializing predict_model()
2025-03-14 21:44:00,193:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34B48390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:00,193:INFO:Checking exceptions
2025-03-14 21:44:00,193:INFO:Preloading libraries
2025-03-14 21:44:00,193:INFO:Set up data.
2025-03-14 21:44:00,196:INFO:Set up index.
2025-03-14 21:44:00,293:INFO:Initializing predict_model()
2025-03-14 21:44:00,293:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B45B190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:00,293:INFO:Checking exceptions
2025-03-14 21:44:00,293:INFO:Preloading libraries
2025-03-14 21:44:00,293:INFO:Set up data.
2025-03-14 21:44:00,296:INFO:Set up index.
2025-03-14 21:44:00,384:INFO:Initializing predict_model()
2025-03-14 21:44:00,384:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36971410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:00,384:INFO:Checking exceptions
2025-03-14 21:44:00,384:INFO:Preloading libraries
2025-03-14 21:44:00,384:INFO:Set up data.
2025-03-14 21:44:00,387:INFO:Set up index.
2025-03-14 21:44:00,494:INFO:Initializing predict_model()
2025-03-14 21:44:00,494:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B9110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:00,494:INFO:Checking exceptions
2025-03-14 21:44:00,494:INFO:Preloading libraries
2025-03-14 21:44:00,494:INFO:Set up data.
2025-03-14 21:44:00,497:INFO:Set up index.
2025-03-14 21:44:00,595:INFO:Initializing predict_model()
2025-03-14 21:44:00,595:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36973A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:00,595:INFO:Checking exceptions
2025-03-14 21:44:00,595:INFO:Preloading libraries
2025-03-14 21:44:00,595:INFO:Set up data.
2025-03-14 21:44:00,598:INFO:Set up index.
2025-03-14 21:44:00,698:INFO:Initializing predict_model()
2025-03-14 21:44:00,698:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:00,698:INFO:Checking exceptions
2025-03-14 21:44:00,698:INFO:Preloading libraries
2025-03-14 21:44:00,698:INFO:Set up data.
2025-03-14 21:44:00,703:INFO:Set up index.
2025-03-14 21:44:00,807:INFO:Initializing predict_model()
2025-03-14 21:44:00,807:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38311A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:00,807:INFO:Checking exceptions
2025-03-14 21:44:00,807:INFO:Preloading libraries
2025-03-14 21:44:00,807:INFO:Set up data.
2025-03-14 21:44:00,810:INFO:Set up index.
2025-03-14 21:44:00,903:INFO:Initializing predict_model()
2025-03-14 21:44:00,903:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BD990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:00,903:INFO:Checking exceptions
2025-03-14 21:44:00,903:INFO:Preloading libraries
2025-03-14 21:44:00,903:INFO:Set up data.
2025-03-14 21:44:00,906:INFO:Set up index.
2025-03-14 21:44:01,005:INFO:Initializing predict_model()
2025-03-14 21:44:01,005:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38063C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:01,005:INFO:Checking exceptions
2025-03-14 21:44:01,005:INFO:Preloading libraries
2025-03-14 21:44:01,005:INFO:Set up data.
2025-03-14 21:44:01,008:INFO:Set up index.
2025-03-14 21:44:01,107:INFO:Initializing predict_model()
2025-03-14 21:44:01,109:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B62FF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:01,109:INFO:Checking exceptions
2025-03-14 21:44:01,109:INFO:Preloading libraries
2025-03-14 21:44:01,109:INFO:Set up data.
2025-03-14 21:44:01,112:INFO:Set up index.
2025-03-14 21:44:01,218:INFO:Initializing predict_model()
2025-03-14 21:44:01,218:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01EAA310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:01,218:INFO:Checking exceptions
2025-03-14 21:44:01,218:INFO:Preloading libraries
2025-03-14 21:44:01,218:INFO:Set up data.
2025-03-14 21:44:01,221:INFO:Set up index.
2025-03-14 21:44:01,323:INFO:Initializing predict_model()
2025-03-14 21:44:01,323:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696E390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:01,323:INFO:Checking exceptions
2025-03-14 21:44:01,323:INFO:Preloading libraries
2025-03-14 21:44:01,323:INFO:Set up data.
2025-03-14 21:44:01,326:INFO:Set up index.
2025-03-14 21:44:01,427:INFO:Initializing predict_model()
2025-03-14 21:44:01,427:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4877D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:01,427:INFO:Checking exceptions
2025-03-14 21:44:01,427:INFO:Preloading libraries
2025-03-14 21:44:01,427:INFO:Set up data.
2025-03-14 21:44:01,430:INFO:Set up index.
2025-03-14 21:44:01,525:INFO:Initializing predict_model()
2025-03-14 21:44:01,525:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32536DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:01,525:INFO:Checking exceptions
2025-03-14 21:44:01,525:INFO:Preloading libraries
2025-03-14 21:44:01,525:INFO:Set up data.
2025-03-14 21:44:01,528:INFO:Set up index.
2025-03-14 21:44:01,617:INFO:Initializing predict_model()
2025-03-14 21:44:01,617:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4EB090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:01,617:INFO:Checking exceptions
2025-03-14 21:44:01,617:INFO:Preloading libraries
2025-03-14 21:44:01,619:INFO:Set up data.
2025-03-14 21:44:01,621:INFO:Set up index.
2025-03-14 21:44:01,710:INFO:Initializing predict_model()
2025-03-14 21:44:01,710:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819E5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:01,710:INFO:Checking exceptions
2025-03-14 21:44:01,710:INFO:Preloading libraries
2025-03-14 21:44:01,710:INFO:Set up data.
2025-03-14 21:44:01,713:INFO:Set up index.
2025-03-14 21:44:01,829:INFO:Initializing predict_model()
2025-03-14 21:44:01,829:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34987010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:01,829:INFO:Checking exceptions
2025-03-14 21:44:01,829:INFO:Preloading libraries
2025-03-14 21:44:01,829:INFO:Set up data.
2025-03-14 21:44:01,832:INFO:Set up index.
2025-03-14 21:44:01,925:INFO:Initializing predict_model()
2025-03-14 21:44:01,925:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEE950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:01,925:INFO:Checking exceptions
2025-03-14 21:44:01,925:INFO:Preloading libraries
2025-03-14 21:44:01,926:INFO:Set up data.
2025-03-14 21:44:01,928:INFO:Set up index.
2025-03-14 21:44:02,022:INFO:Initializing predict_model()
2025-03-14 21:44:02,022:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36974790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:02,022:INFO:Checking exceptions
2025-03-14 21:44:02,022:INFO:Preloading libraries
2025-03-14 21:44:02,022:INFO:Set up data.
2025-03-14 21:44:02,025:INFO:Set up index.
2025-03-14 21:44:02,111:INFO:Initializing predict_model()
2025-03-14 21:44:02,111:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B464A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:02,111:INFO:Checking exceptions
2025-03-14 21:44:02,111:INFO:Preloading libraries
2025-03-14 21:44:02,111:INFO:Set up data.
2025-03-14 21:44:02,114:INFO:Set up index.
2025-03-14 21:44:02,209:INFO:Initializing predict_model()
2025-03-14 21:44:02,209:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01C77B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:02,209:INFO:Checking exceptions
2025-03-14 21:44:02,209:INFO:Preloading libraries
2025-03-14 21:44:02,209:INFO:Set up data.
2025-03-14 21:44:02,212:INFO:Set up index.
2025-03-14 21:44:02,303:INFO:Initializing predict_model()
2025-03-14 21:44:02,303:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369716D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:02,303:INFO:Checking exceptions
2025-03-14 21:44:02,303:INFO:Preloading libraries
2025-03-14 21:44:02,303:INFO:Set up data.
2025-03-14 21:44:02,306:INFO:Set up index.
2025-03-14 21:44:02,427:INFO:Initializing predict_model()
2025-03-14 21:44:02,427:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4EB750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:02,427:INFO:Checking exceptions
2025-03-14 21:44:02,427:INFO:Preloading libraries
2025-03-14 21:44:02,429:INFO:Set up data.
2025-03-14 21:44:02,433:INFO:Set up index.
2025-03-14 21:44:02,536:INFO:Initializing predict_model()
2025-03-14 21:44:02,536:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819E390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:02,536:INFO:Checking exceptions
2025-03-14 21:44:02,536:INFO:Preloading libraries
2025-03-14 21:44:02,536:INFO:Set up data.
2025-03-14 21:44:02,539:INFO:Set up index.
2025-03-14 21:44:02,639:INFO:Initializing predict_model()
2025-03-14 21:44:02,639:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34962A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:02,639:INFO:Checking exceptions
2025-03-14 21:44:02,639:INFO:Preloading libraries
2025-03-14 21:44:02,639:INFO:Set up data.
2025-03-14 21:44:02,642:INFO:Set up index.
2025-03-14 21:44:02,747:INFO:Initializing predict_model()
2025-03-14 21:44:02,747:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BDD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:02,747:INFO:Checking exceptions
2025-03-14 21:44:02,747:INFO:Preloading libraries
2025-03-14 21:44:02,747:INFO:Set up data.
2025-03-14 21:44:02,750:INFO:Set up index.
2025-03-14 21:44:02,842:INFO:Initializing predict_model()
2025-03-14 21:44:02,842:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EF0110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:02,842:INFO:Checking exceptions
2025-03-14 21:44:02,842:INFO:Preloading libraries
2025-03-14 21:44:02,842:INFO:Set up data.
2025-03-14 21:44:02,845:INFO:Set up index.
2025-03-14 21:44:02,939:INFO:Initializing predict_model()
2025-03-14 21:44:02,939:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38349990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:02,940:INFO:Checking exceptions
2025-03-14 21:44:02,940:INFO:Preloading libraries
2025-03-14 21:44:02,940:INFO:Set up data.
2025-03-14 21:44:02,943:INFO:Set up index.
2025-03-14 21:44:03,042:INFO:Initializing predict_model()
2025-03-14 21:44:03,042:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BCB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:03,043:INFO:Checking exceptions
2025-03-14 21:44:03,043:INFO:Preloading libraries
2025-03-14 21:44:03,043:INFO:Set up data.
2025-03-14 21:44:03,045:INFO:Set up index.
2025-03-14 21:44:03,142:INFO:Initializing predict_model()
2025-03-14 21:44:03,142:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369747D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:03,142:INFO:Checking exceptions
2025-03-14 21:44:03,142:INFO:Preloading libraries
2025-03-14 21:44:03,142:INFO:Set up data.
2025-03-14 21:44:03,145:INFO:Set up index.
2025-03-14 21:44:03,233:INFO:Initializing predict_model()
2025-03-14 21:44:03,233:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:03,233:INFO:Checking exceptions
2025-03-14 21:44:03,233:INFO:Preloading libraries
2025-03-14 21:44:03,233:INFO:Set up data.
2025-03-14 21:44:03,237:INFO:Set up index.
2025-03-14 21:44:03,324:INFO:Initializing predict_model()
2025-03-14 21:44:03,324:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38063CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:03,324:INFO:Checking exceptions
2025-03-14 21:44:03,324:INFO:Preloading libraries
2025-03-14 21:44:03,324:INFO:Set up data.
2025-03-14 21:44:03,326:INFO:Set up index.
2025-03-14 21:44:03,417:INFO:Initializing predict_model()
2025-03-14 21:44:03,417:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4EB090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:03,417:INFO:Checking exceptions
2025-03-14 21:44:03,417:INFO:Preloading libraries
2025-03-14 21:44:03,417:INFO:Set up data.
2025-03-14 21:44:03,420:INFO:Set up index.
2025-03-14 21:44:03,514:INFO:Initializing predict_model()
2025-03-14 21:44:03,514:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36972010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:03,514:INFO:Checking exceptions
2025-03-14 21:44:03,514:INFO:Preloading libraries
2025-03-14 21:44:03,514:INFO:Set up data.
2025-03-14 21:44:03,517:INFO:Set up index.
2025-03-14 21:44:03,603:INFO:Initializing predict_model()
2025-03-14 21:44:03,603:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01F096D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:03,603:INFO:Checking exceptions
2025-03-14 21:44:03,603:INFO:Preloading libraries
2025-03-14 21:44:03,603:INFO:Set up data.
2025-03-14 21:44:03,606:INFO:Set up index.
2025-03-14 21:44:03,693:INFO:Initializing predict_model()
2025-03-14 21:44:03,693:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01EAA310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:03,693:INFO:Checking exceptions
2025-03-14 21:44:03,693:INFO:Preloading libraries
2025-03-14 21:44:03,693:INFO:Set up data.
2025-03-14 21:44:03,696:INFO:Set up index.
2025-03-14 21:44:03,785:INFO:Initializing predict_model()
2025-03-14 21:44:03,785:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19871A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:03,785:INFO:Checking exceptions
2025-03-14 21:44:03,785:INFO:Preloading libraries
2025-03-14 21:44:03,787:INFO:Set up data.
2025-03-14 21:44:03,790:INFO:Set up index.
2025-03-14 21:44:03,879:INFO:Initializing predict_model()
2025-03-14 21:44:03,879:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E323872D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:03,879:INFO:Checking exceptions
2025-03-14 21:44:03,879:INFO:Preloading libraries
2025-03-14 21:44:03,879:INFO:Set up data.
2025-03-14 21:44:03,882:INFO:Set up index.
2025-03-14 21:44:03,969:INFO:Initializing predict_model()
2025-03-14 21:44:03,969:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51BBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:03,969:INFO:Checking exceptions
2025-03-14 21:44:03,969:INFO:Preloading libraries
2025-03-14 21:44:03,969:INFO:Set up data.
2025-03-14 21:44:03,972:INFO:Set up index.
2025-03-14 21:44:04,066:INFO:Initializing predict_model()
2025-03-14 21:44:04,066:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BB3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:04,066:INFO:Checking exceptions
2025-03-14 21:44:04,066:INFO:Preloading libraries
2025-03-14 21:44:04,068:INFO:Set up data.
2025-03-14 21:44:04,071:INFO:Set up index.
2025-03-14 21:44:04,174:INFO:Initializing predict_model()
2025-03-14 21:44:04,174:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4E9510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:04,174:INFO:Checking exceptions
2025-03-14 21:44:04,174:INFO:Preloading libraries
2025-03-14 21:44:04,174:INFO:Set up data.
2025-03-14 21:44:04,177:INFO:Set up index.
2025-03-14 21:44:04,265:INFO:Initializing predict_model()
2025-03-14 21:44:04,265:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B467E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:04,265:INFO:Checking exceptions
2025-03-14 21:44:04,265:INFO:Preloading libraries
2025-03-14 21:44:04,265:INFO:Set up data.
2025-03-14 21:44:04,269:INFO:Set up index.
2025-03-14 21:44:04,356:INFO:Initializing predict_model()
2025-03-14 21:44:04,356:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36B5B3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:04,356:INFO:Checking exceptions
2025-03-14 21:44:04,356:INFO:Preloading libraries
2025-03-14 21:44:04,356:INFO:Set up data.
2025-03-14 21:44:04,359:INFO:Set up index.
2025-03-14 21:44:04,460:INFO:Initializing predict_model()
2025-03-14 21:44:04,460:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38185F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:04,460:INFO:Checking exceptions
2025-03-14 21:44:04,460:INFO:Preloading libraries
2025-03-14 21:44:04,460:INFO:Set up data.
2025-03-14 21:44:04,463:INFO:Set up index.
2025-03-14 21:44:04,556:INFO:Initializing predict_model()
2025-03-14 21:44:04,556:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846EA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:04,556:INFO:Checking exceptions
2025-03-14 21:44:04,556:INFO:Preloading libraries
2025-03-14 21:44:04,556:INFO:Set up data.
2025-03-14 21:44:04,559:INFO:Set up index.
2025-03-14 21:44:04,644:INFO:Initializing predict_model()
2025-03-14 21:44:04,644:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:04,644:INFO:Checking exceptions
2025-03-14 21:44:04,644:INFO:Preloading libraries
2025-03-14 21:44:04,644:INFO:Set up data.
2025-03-14 21:44:04,647:INFO:Set up index.
2025-03-14 21:44:04,736:INFO:Initializing predict_model()
2025-03-14 21:44:04,736:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382C0290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:04,736:INFO:Checking exceptions
2025-03-14 21:44:04,736:INFO:Preloading libraries
2025-03-14 21:44:04,736:INFO:Set up data.
2025-03-14 21:44:04,738:INFO:Set up index.
2025-03-14 21:44:04,836:INFO:Initializing predict_model()
2025-03-14 21:44:04,836:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BA150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:04,836:INFO:Checking exceptions
2025-03-14 21:44:04,836:INFO:Preloading libraries
2025-03-14 21:44:04,836:INFO:Set up data.
2025-03-14 21:44:04,839:INFO:Set up index.
2025-03-14 21:44:04,933:INFO:Initializing predict_model()
2025-03-14 21:44:04,933:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E0119C690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:04,933:INFO:Checking exceptions
2025-03-14 21:44:04,933:INFO:Preloading libraries
2025-03-14 21:44:04,933:INFO:Set up data.
2025-03-14 21:44:04,935:INFO:Set up index.
2025-03-14 21:44:05,020:INFO:Initializing predict_model()
2025-03-14 21:44:05,020:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA6950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:05,020:INFO:Checking exceptions
2025-03-14 21:44:05,020:INFO:Preloading libraries
2025-03-14 21:44:05,021:INFO:Set up data.
2025-03-14 21:44:05,023:INFO:Set up index.
2025-03-14 21:44:05,109:INFO:Initializing predict_model()
2025-03-14 21:44:05,109:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B96D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:05,109:INFO:Checking exceptions
2025-03-14 21:44:05,109:INFO:Preloading libraries
2025-03-14 21:44:05,109:INFO:Set up data.
2025-03-14 21:44:05,112:INFO:Set up index.
2025-03-14 21:44:05,204:INFO:Initializing predict_model()
2025-03-14 21:44:05,204:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819F490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:05,206:INFO:Checking exceptions
2025-03-14 21:44:05,206:INFO:Preloading libraries
2025-03-14 21:44:05,206:INFO:Set up data.
2025-03-14 21:44:05,209:INFO:Set up index.
2025-03-14 21:44:05,300:INFO:Initializing predict_model()
2025-03-14 21:44:05,300:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E344A7D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:05,300:INFO:Checking exceptions
2025-03-14 21:44:05,300:INFO:Preloading libraries
2025-03-14 21:44:05,301:INFO:Set up data.
2025-03-14 21:44:05,303:INFO:Set up index.
2025-03-14 21:44:05,406:INFO:Initializing predict_model()
2025-03-14 21:44:05,406:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4EB090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:05,406:INFO:Checking exceptions
2025-03-14 21:44:05,406:INFO:Preloading libraries
2025-03-14 21:44:05,406:INFO:Set up data.
2025-03-14 21:44:05,410:INFO:Set up index.
2025-03-14 21:44:05,512:INFO:Initializing predict_model()
2025-03-14 21:44:05,512:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34CF7410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:05,512:INFO:Checking exceptions
2025-03-14 21:44:05,512:INFO:Preloading libraries
2025-03-14 21:44:05,513:INFO:Set up data.
2025-03-14 21:44:05,516:INFO:Set up index.
2025-03-14 21:44:05,613:INFO:Initializing predict_model()
2025-03-14 21:44:05,613:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51AE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:05,613:INFO:Checking exceptions
2025-03-14 21:44:05,613:INFO:Preloading libraries
2025-03-14 21:44:05,613:INFO:Set up data.
2025-03-14 21:44:05,616:INFO:Set up index.
2025-03-14 21:44:05,707:INFO:Initializing predict_model()
2025-03-14 21:44:05,709:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B62FF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:05,709:INFO:Checking exceptions
2025-03-14 21:44:05,709:INFO:Preloading libraries
2025-03-14 21:44:05,709:INFO:Set up data.
2025-03-14 21:44:05,712:INFO:Set up index.
2025-03-14 21:44:05,796:INFO:Initializing predict_model()
2025-03-14 21:44:05,798:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BBA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:05,798:INFO:Checking exceptions
2025-03-14 21:44:05,798:INFO:Preloading libraries
2025-03-14 21:44:05,798:INFO:Set up data.
2025-03-14 21:44:05,799:INFO:Set up index.
2025-03-14 21:44:05,889:INFO:Initializing predict_model()
2025-03-14 21:44:05,889:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51BDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:05,889:INFO:Checking exceptions
2025-03-14 21:44:05,889:INFO:Preloading libraries
2025-03-14 21:44:05,889:INFO:Set up data.
2025-03-14 21:44:05,892:INFO:Set up index.
2025-03-14 21:44:05,981:INFO:Initializing predict_model()
2025-03-14 21:44:05,981:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:05,981:INFO:Checking exceptions
2025-03-14 21:44:05,981:INFO:Preloading libraries
2025-03-14 21:44:05,981:INFO:Set up data.
2025-03-14 21:44:05,984:INFO:Set up index.
2025-03-14 21:44:06,071:INFO:Initializing predict_model()
2025-03-14 21:44:06,071:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BA150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:06,071:INFO:Checking exceptions
2025-03-14 21:44:06,071:INFO:Preloading libraries
2025-03-14 21:44:06,071:INFO:Set up data.
2025-03-14 21:44:06,074:INFO:Set up index.
2025-03-14 21:44:06,168:INFO:Initializing predict_model()
2025-03-14 21:44:06,168:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B45B190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:06,168:INFO:Checking exceptions
2025-03-14 21:44:06,168:INFO:Preloading libraries
2025-03-14 21:44:06,168:INFO:Set up data.
2025-03-14 21:44:06,171:INFO:Set up index.
2025-03-14 21:44:06,261:INFO:Initializing predict_model()
2025-03-14 21:44:06,261:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:06,261:INFO:Checking exceptions
2025-03-14 21:44:06,261:INFO:Preloading libraries
2025-03-14 21:44:06,261:INFO:Set up data.
2025-03-14 21:44:06,264:INFO:Set up index.
2025-03-14 21:44:06,350:INFO:Initializing predict_model()
2025-03-14 21:44:06,350:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E323872D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:06,350:INFO:Checking exceptions
2025-03-14 21:44:06,350:INFO:Preloading libraries
2025-03-14 21:44:06,350:INFO:Set up data.
2025-03-14 21:44:06,353:INFO:Set up index.
2025-03-14 21:44:06,443:INFO:Initializing predict_model()
2025-03-14 21:44:06,443:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38311990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:06,443:INFO:Checking exceptions
2025-03-14 21:44:06,443:INFO:Preloading libraries
2025-03-14 21:44:06,443:INFO:Set up data.
2025-03-14 21:44:06,447:INFO:Set up index.
2025-03-14 21:44:06,537:INFO:Initializing predict_model()
2025-03-14 21:44:06,537:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38311610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:06,537:INFO:Checking exceptions
2025-03-14 21:44:06,537:INFO:Preloading libraries
2025-03-14 21:44:06,538:INFO:Set up data.
2025-03-14 21:44:06,540:INFO:Set up index.
2025-03-14 21:44:06,633:INFO:Initializing predict_model()
2025-03-14 21:44:06,633:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B9F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:06,633:INFO:Checking exceptions
2025-03-14 21:44:06,633:INFO:Preloading libraries
2025-03-14 21:44:06,635:INFO:Set up data.
2025-03-14 21:44:06,638:INFO:Set up index.
2025-03-14 21:44:06,725:INFO:Initializing predict_model()
2025-03-14 21:44:06,725:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BC410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:06,725:INFO:Checking exceptions
2025-03-14 21:44:06,725:INFO:Preloading libraries
2025-03-14 21:44:06,727:INFO:Set up data.
2025-03-14 21:44:06,729:INFO:Set up index.
2025-03-14 21:44:06,820:INFO:Initializing predict_model()
2025-03-14 21:44:06,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:06,820:INFO:Checking exceptions
2025-03-14 21:44:06,820:INFO:Preloading libraries
2025-03-14 21:44:06,820:INFO:Set up data.
2025-03-14 21:44:06,823:INFO:Set up index.
2025-03-14 21:44:06,932:INFO:Initializing predict_model()
2025-03-14 21:44:06,932:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4EB110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:06,932:INFO:Checking exceptions
2025-03-14 21:44:06,932:INFO:Preloading libraries
2025-03-14 21:44:06,932:INFO:Set up data.
2025-03-14 21:44:06,935:INFO:Set up index.
2025-03-14 21:44:07,030:INFO:Initializing predict_model()
2025-03-14 21:44:07,030:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA79D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:07,030:INFO:Checking exceptions
2025-03-14 21:44:07,030:INFO:Preloading libraries
2025-03-14 21:44:07,030:INFO:Set up data.
2025-03-14 21:44:07,033:INFO:Set up index.
2025-03-14 21:44:07,121:INFO:Initializing predict_model()
2025-03-14 21:44:07,121:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:07,121:INFO:Checking exceptions
2025-03-14 21:44:07,122:INFO:Preloading libraries
2025-03-14 21:44:07,122:INFO:Set up data.
2025-03-14 21:44:07,124:INFO:Set up index.
2025-03-14 21:44:07,210:INFO:Initializing predict_model()
2025-03-14 21:44:07,210:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34D94BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:07,210:INFO:Checking exceptions
2025-03-14 21:44:07,210:INFO:Preloading libraries
2025-03-14 21:44:07,210:INFO:Set up data.
2025-03-14 21:44:07,213:INFO:Set up index.
2025-03-14 21:44:07,304:INFO:Initializing predict_model()
2025-03-14 21:44:07,304:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B62FF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:07,304:INFO:Checking exceptions
2025-03-14 21:44:07,304:INFO:Preloading libraries
2025-03-14 21:44:07,304:INFO:Set up data.
2025-03-14 21:44:07,308:INFO:Set up index.
2025-03-14 21:44:07,401:INFO:Initializing predict_model()
2025-03-14 21:44:07,401:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38185F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:07,401:INFO:Checking exceptions
2025-03-14 21:44:07,401:INFO:Preloading libraries
2025-03-14 21:44:07,401:INFO:Set up data.
2025-03-14 21:44:07,404:INFO:Set up index.
2025-03-14 21:44:07,492:INFO:Initializing predict_model()
2025-03-14 21:44:07,492:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B9F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:07,492:INFO:Checking exceptions
2025-03-14 21:44:07,492:INFO:Preloading libraries
2025-03-14 21:44:07,492:INFO:Set up data.
2025-03-14 21:44:07,495:INFO:Set up index.
2025-03-14 21:44:07,587:INFO:Initializing predict_model()
2025-03-14 21:44:07,588:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:07,588:INFO:Checking exceptions
2025-03-14 21:44:07,588:INFO:Preloading libraries
2025-03-14 21:44:07,588:INFO:Set up data.
2025-03-14 21:44:07,591:INFO:Set up index.
2025-03-14 21:44:07,681:INFO:Initializing predict_model()
2025-03-14 21:44:07,681:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696D090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:07,681:INFO:Checking exceptions
2025-03-14 21:44:07,681:INFO:Preloading libraries
2025-03-14 21:44:07,681:INFO:Set up data.
2025-03-14 21:44:07,684:INFO:Set up index.
2025-03-14 21:44:07,773:INFO:Initializing predict_model()
2025-03-14 21:44:07,773:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36972010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:07,773:INFO:Checking exceptions
2025-03-14 21:44:07,773:INFO:Preloading libraries
2025-03-14 21:44:07,773:INFO:Set up data.
2025-03-14 21:44:07,776:INFO:Set up index.
2025-03-14 21:44:07,862:INFO:Initializing predict_model()
2025-03-14 21:44:07,862:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38311510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:07,862:INFO:Checking exceptions
2025-03-14 21:44:07,862:INFO:Preloading libraries
2025-03-14 21:44:07,862:INFO:Set up data.
2025-03-14 21:44:07,865:INFO:Set up index.
2025-03-14 21:44:07,956:INFO:Initializing predict_model()
2025-03-14 21:44:07,956:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34CF7510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:07,956:INFO:Checking exceptions
2025-03-14 21:44:07,956:INFO:Preloading libraries
2025-03-14 21:44:07,956:INFO:Set up data.
2025-03-14 21:44:07,959:INFO:Set up index.
2025-03-14 21:44:08,045:INFO:Initializing predict_model()
2025-03-14 21:44:08,045:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34B4B890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:08,045:INFO:Checking exceptions
2025-03-14 21:44:08,045:INFO:Preloading libraries
2025-03-14 21:44:08,045:INFO:Set up data.
2025-03-14 21:44:08,047:INFO:Set up index.
2025-03-14 21:44:08,134:INFO:Initializing predict_model()
2025-03-14 21:44:08,134:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4998D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:08,134:INFO:Checking exceptions
2025-03-14 21:44:08,136:INFO:Preloading libraries
2025-03-14 21:44:08,136:INFO:Set up data.
2025-03-14 21:44:08,137:INFO:Set up index.
2025-03-14 21:44:08,227:INFO:Initializing predict_model()
2025-03-14 21:44:08,227:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34E9A010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:08,227:INFO:Checking exceptions
2025-03-14 21:44:08,227:INFO:Preloading libraries
2025-03-14 21:44:08,227:INFO:Set up data.
2025-03-14 21:44:08,229:INFO:Set up index.
2025-03-14 21:44:08,323:INFO:Initializing predict_model()
2025-03-14 21:44:08,323:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B419410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:08,323:INFO:Checking exceptions
2025-03-14 21:44:08,323:INFO:Preloading libraries
2025-03-14 21:44:08,325:INFO:Set up data.
2025-03-14 21:44:08,330:INFO:Set up index.
2025-03-14 21:44:08,426:INFO:Initializing predict_model()
2025-03-14 21:44:08,426:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BE790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:08,426:INFO:Checking exceptions
2025-03-14 21:44:08,426:INFO:Preloading libraries
2025-03-14 21:44:08,426:INFO:Set up data.
2025-03-14 21:44:08,429:INFO:Set up index.
2025-03-14 21:44:08,522:INFO:Initializing predict_model()
2025-03-14 21:44:08,522:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381870D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:08,522:INFO:Checking exceptions
2025-03-14 21:44:08,522:INFO:Preloading libraries
2025-03-14 21:44:08,522:INFO:Set up data.
2025-03-14 21:44:08,525:INFO:Set up index.
2025-03-14 21:44:08,614:INFO:Initializing predict_model()
2025-03-14 21:44:08,614:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38186590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:08,614:INFO:Checking exceptions
2025-03-14 21:44:08,614:INFO:Preloading libraries
2025-03-14 21:44:08,614:INFO:Set up data.
2025-03-14 21:44:08,617:INFO:Set up index.
2025-03-14 21:44:08,706:INFO:Initializing predict_model()
2025-03-14 21:44:08,706:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BDC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:08,706:INFO:Checking exceptions
2025-03-14 21:44:08,706:INFO:Preloading libraries
2025-03-14 21:44:08,706:INFO:Set up data.
2025-03-14 21:44:08,709:INFO:Set up index.
2025-03-14 21:44:08,797:INFO:Initializing predict_model()
2025-03-14 21:44:08,797:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BA390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:08,797:INFO:Checking exceptions
2025-03-14 21:44:08,797:INFO:Preloading libraries
2025-03-14 21:44:08,797:INFO:Set up data.
2025-03-14 21:44:08,800:INFO:Set up index.
2025-03-14 21:44:08,890:INFO:Initializing predict_model()
2025-03-14 21:44:08,890:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:08,890:INFO:Checking exceptions
2025-03-14 21:44:08,890:INFO:Preloading libraries
2025-03-14 21:44:08,890:INFO:Set up data.
2025-03-14 21:44:08,893:INFO:Set up index.
2025-03-14 21:44:08,978:INFO:Initializing predict_model()
2025-03-14 21:44:08,978:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38063B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:08,978:INFO:Checking exceptions
2025-03-14 21:44:08,978:INFO:Preloading libraries
2025-03-14 21:44:08,978:INFO:Set up data.
2025-03-14 21:44:08,981:INFO:Set up index.
2025-03-14 21:44:09,080:INFO:Initializing predict_model()
2025-03-14 21:44:09,080:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34B484D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:09,080:INFO:Checking exceptions
2025-03-14 21:44:09,080:INFO:Preloading libraries
2025-03-14 21:44:09,080:INFO:Set up data.
2025-03-14 21:44:09,083:INFO:Set up index.
2025-03-14 21:44:09,172:INFO:Initializing predict_model()
2025-03-14 21:44:09,172:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01EAA310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:09,172:INFO:Checking exceptions
2025-03-14 21:44:09,172:INFO:Preloading libraries
2025-03-14 21:44:09,172:INFO:Set up data.
2025-03-14 21:44:09,175:INFO:Set up index.
2025-03-14 21:44:09,262:INFO:Initializing predict_model()
2025-03-14 21:44:09,262:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34B484D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:09,262:INFO:Checking exceptions
2025-03-14 21:44:09,262:INFO:Preloading libraries
2025-03-14 21:44:09,262:INFO:Set up data.
2025-03-14 21:44:09,265:INFO:Set up index.
2025-03-14 21:44:09,354:INFO:Initializing predict_model()
2025-03-14 21:44:09,354:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B473C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:09,354:INFO:Checking exceptions
2025-03-14 21:44:09,354:INFO:Preloading libraries
2025-03-14 21:44:09,355:INFO:Set up data.
2025-03-14 21:44:09,357:INFO:Set up index.
2025-03-14 21:44:09,450:INFO:Initializing predict_model()
2025-03-14 21:44:09,450:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B9F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:09,450:INFO:Checking exceptions
2025-03-14 21:44:09,450:INFO:Preloading libraries
2025-03-14 21:44:09,450:INFO:Set up data.
2025-03-14 21:44:09,453:INFO:Set up index.
2025-03-14 21:44:09,542:INFO:Initializing predict_model()
2025-03-14 21:44:09,542:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38311510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:09,542:INFO:Checking exceptions
2025-03-14 21:44:09,542:INFO:Preloading libraries
2025-03-14 21:44:09,542:INFO:Set up data.
2025-03-14 21:44:09,543:INFO:Set up index.
2025-03-14 21:44:09,633:INFO:Initializing predict_model()
2025-03-14 21:44:09,635:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E345B8110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:09,635:INFO:Checking exceptions
2025-03-14 21:44:09,635:INFO:Preloading libraries
2025-03-14 21:44:09,635:INFO:Set up data.
2025-03-14 21:44:09,637:INFO:Set up index.
2025-03-14 21:44:09,735:INFO:Initializing predict_model()
2025-03-14 21:44:09,735:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B45B350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:09,735:INFO:Checking exceptions
2025-03-14 21:44:09,735:INFO:Preloading libraries
2025-03-14 21:44:09,735:INFO:Set up data.
2025-03-14 21:44:09,738:INFO:Set up index.
2025-03-14 21:44:09,826:INFO:Initializing predict_model()
2025-03-14 21:44:09,826:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369746D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:09,826:INFO:Checking exceptions
2025-03-14 21:44:09,826:INFO:Preloading libraries
2025-03-14 21:44:09,826:INFO:Set up data.
2025-03-14 21:44:09,829:INFO:Set up index.
2025-03-14 21:44:09,919:INFO:Initializing predict_model()
2025-03-14 21:44:09,920:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381859D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:09,920:INFO:Checking exceptions
2025-03-14 21:44:09,920:INFO:Preloading libraries
2025-03-14 21:44:09,920:INFO:Set up data.
2025-03-14 21:44:09,923:INFO:Set up index.
2025-03-14 21:44:10,031:INFO:Initializing predict_model()
2025-03-14 21:44:10,031:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38311A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:10,031:INFO:Checking exceptions
2025-03-14 21:44:10,031:INFO:Preloading libraries
2025-03-14 21:44:10,031:INFO:Set up data.
2025-03-14 21:44:10,034:INFO:Set up index.
2025-03-14 21:44:10,134:INFO:Initializing predict_model()
2025-03-14 21:44:10,134:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B49AF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:10,134:INFO:Checking exceptions
2025-03-14 21:44:10,134:INFO:Preloading libraries
2025-03-14 21:44:10,134:INFO:Set up data.
2025-03-14 21:44:10,137:INFO:Set up index.
2025-03-14 21:44:10,233:INFO:Initializing predict_model()
2025-03-14 21:44:10,233:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA68D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:10,233:INFO:Checking exceptions
2025-03-14 21:44:10,233:INFO:Preloading libraries
2025-03-14 21:44:10,233:INFO:Set up data.
2025-03-14 21:44:10,236:INFO:Set up index.
2025-03-14 21:44:10,325:INFO:Initializing predict_model()
2025-03-14 21:44:10,325:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34E4F710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:10,325:INFO:Checking exceptions
2025-03-14 21:44:10,325:INFO:Preloading libraries
2025-03-14 21:44:10,325:INFO:Set up data.
2025-03-14 21:44:10,328:INFO:Set up index.
2025-03-14 21:44:10,426:INFO:Initializing predict_model()
2025-03-14 21:44:10,426:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E325232D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:10,426:INFO:Checking exceptions
2025-03-14 21:44:10,426:INFO:Preloading libraries
2025-03-14 21:44:10,426:INFO:Set up data.
2025-03-14 21:44:10,429:INFO:Set up index.
2025-03-14 21:44:10,518:INFO:Initializing predict_model()
2025-03-14 21:44:10,518:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:10,518:INFO:Checking exceptions
2025-03-14 21:44:10,518:INFO:Preloading libraries
2025-03-14 21:44:10,518:INFO:Set up data.
2025-03-14 21:44:10,521:INFO:Set up index.
2025-03-14 21:44:10,610:INFO:Initializing predict_model()
2025-03-14 21:44:10,610:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:10,610:INFO:Checking exceptions
2025-03-14 21:44:10,610:INFO:Preloading libraries
2025-03-14 21:44:10,610:INFO:Set up data.
2025-03-14 21:44:10,613:INFO:Set up index.
2025-03-14 21:44:10,701:INFO:Initializing predict_model()
2025-03-14 21:44:10,701:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38185610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:10,701:INFO:Checking exceptions
2025-03-14 21:44:10,701:INFO:Preloading libraries
2025-03-14 21:44:10,701:INFO:Set up data.
2025-03-14 21:44:10,704:INFO:Set up index.
2025-03-14 21:44:10,793:INFO:Initializing predict_model()
2025-03-14 21:44:10,793:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B49BB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:10,793:INFO:Checking exceptions
2025-03-14 21:44:10,793:INFO:Preloading libraries
2025-03-14 21:44:10,793:INFO:Set up data.
2025-03-14 21:44:10,797:INFO:Set up index.
2025-03-14 21:44:10,882:INFO:Initializing predict_model()
2025-03-14 21:44:10,884:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:10,884:INFO:Checking exceptions
2025-03-14 21:44:10,884:INFO:Preloading libraries
2025-03-14 21:44:10,884:INFO:Set up data.
2025-03-14 21:44:10,885:INFO:Set up index.
2025-03-14 21:44:10,976:INFO:Initializing predict_model()
2025-03-14 21:44:10,976:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382C0190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:10,976:INFO:Checking exceptions
2025-03-14 21:44:10,976:INFO:Preloading libraries
2025-03-14 21:44:10,976:INFO:Set up data.
2025-03-14 21:44:10,979:INFO:Set up index.
2025-03-14 21:44:11,067:INFO:Initializing predict_model()
2025-03-14 21:44:11,067:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38290110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:11,067:INFO:Checking exceptions
2025-03-14 21:44:11,067:INFO:Preloading libraries
2025-03-14 21:44:11,068:INFO:Set up data.
2025-03-14 21:44:11,070:INFO:Set up index.
2025-03-14 21:44:11,159:INFO:Initializing predict_model()
2025-03-14 21:44:11,159:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BCB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:11,159:INFO:Checking exceptions
2025-03-14 21:44:11,159:INFO:Preloading libraries
2025-03-14 21:44:11,159:INFO:Set up data.
2025-03-14 21:44:11,162:INFO:Set up index.
2025-03-14 21:44:11,249:INFO:Initializing predict_model()
2025-03-14 21:44:11,249:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:11,249:INFO:Checking exceptions
2025-03-14 21:44:11,249:INFO:Preloading libraries
2025-03-14 21:44:11,249:INFO:Set up data.
2025-03-14 21:44:11,252:INFO:Set up index.
2025-03-14 21:44:11,340:INFO:Initializing predict_model()
2025-03-14 21:44:11,340:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA6950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:11,340:INFO:Checking exceptions
2025-03-14 21:44:11,340:INFO:Preloading libraries
2025-03-14 21:44:11,341:INFO:Set up data.
2025-03-14 21:44:11,343:INFO:Set up index.
2025-03-14 21:44:11,435:INFO:Initializing predict_model()
2025-03-14 21:44:11,435:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01C88E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:11,435:INFO:Checking exceptions
2025-03-14 21:44:11,435:INFO:Preloading libraries
2025-03-14 21:44:11,435:INFO:Set up data.
2025-03-14 21:44:11,438:INFO:Set up index.
2025-03-14 21:44:11,529:INFO:Initializing predict_model()
2025-03-14 21:44:11,529:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382922D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:11,529:INFO:Checking exceptions
2025-03-14 21:44:11,529:INFO:Preloading libraries
2025-03-14 21:44:11,529:INFO:Set up data.
2025-03-14 21:44:11,530:INFO:Set up index.
2025-03-14 21:44:11,621:INFO:Initializing predict_model()
2025-03-14 21:44:11,621:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36974050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:11,621:INFO:Checking exceptions
2025-03-14 21:44:11,621:INFO:Preloading libraries
2025-03-14 21:44:11,622:INFO:Set up data.
2025-03-14 21:44:11,624:INFO:Set up index.
2025-03-14 21:44:11,712:INFO:Initializing predict_model()
2025-03-14 21:44:11,712:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B467E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:11,712:INFO:Checking exceptions
2025-03-14 21:44:11,712:INFO:Preloading libraries
2025-03-14 21:44:11,712:INFO:Set up data.
2025-03-14 21:44:11,714:INFO:Set up index.
2025-03-14 21:44:11,802:INFO:Initializing predict_model()
2025-03-14 21:44:11,802:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384AEC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:11,802:INFO:Checking exceptions
2025-03-14 21:44:11,802:INFO:Preloading libraries
2025-03-14 21:44:11,802:INFO:Set up data.
2025-03-14 21:44:11,804:INFO:Set up index.
2025-03-14 21:44:11,893:INFO:Initializing predict_model()
2025-03-14 21:44:11,893:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34A92B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:11,893:INFO:Checking exceptions
2025-03-14 21:44:11,893:INFO:Preloading libraries
2025-03-14 21:44:11,893:INFO:Set up data.
2025-03-14 21:44:11,894:INFO:Set up index.
2025-03-14 21:44:11,988:INFO:Initializing predict_model()
2025-03-14 21:44:11,988:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51BB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:11,988:INFO:Checking exceptions
2025-03-14 21:44:11,988:INFO:Preloading libraries
2025-03-14 21:44:11,988:INFO:Set up data.
2025-03-14 21:44:11,993:INFO:Set up index.
2025-03-14 21:44:12,090:INFO:Initializing predict_model()
2025-03-14 21:44:12,090:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38290510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:12,090:INFO:Checking exceptions
2025-03-14 21:44:12,090:INFO:Preloading libraries
2025-03-14 21:44:12,090:INFO:Set up data.
2025-03-14 21:44:12,093:INFO:Set up index.
2025-03-14 21:44:12,182:INFO:Initializing predict_model()
2025-03-14 21:44:12,182:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BE710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:12,182:INFO:Checking exceptions
2025-03-14 21:44:12,182:INFO:Preloading libraries
2025-03-14 21:44:12,182:INFO:Set up data.
2025-03-14 21:44:12,185:INFO:Set up index.
2025-03-14 21:44:12,275:INFO:Initializing predict_model()
2025-03-14 21:44:12,275:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:12,275:INFO:Checking exceptions
2025-03-14 21:44:12,275:INFO:Preloading libraries
2025-03-14 21:44:12,275:INFO:Set up data.
2025-03-14 21:44:12,278:INFO:Set up index.
2025-03-14 21:44:12,367:INFO:Initializing predict_model()
2025-03-14 21:44:12,367:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B49BB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:12,367:INFO:Checking exceptions
2025-03-14 21:44:12,367:INFO:Preloading libraries
2025-03-14 21:44:12,367:INFO:Set up data.
2025-03-14 21:44:12,370:INFO:Set up index.
2025-03-14 21:44:12,458:INFO:Initializing predict_model()
2025-03-14 21:44:12,458:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E0119DCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:12,458:INFO:Checking exceptions
2025-03-14 21:44:12,458:INFO:Preloading libraries
2025-03-14 21:44:12,458:INFO:Set up data.
2025-03-14 21:44:12,461:INFO:Set up index.
2025-03-14 21:44:12,551:INFO:Initializing predict_model()
2025-03-14 21:44:12,551:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51A750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:12,551:INFO:Checking exceptions
2025-03-14 21:44:12,551:INFO:Preloading libraries
2025-03-14 21:44:12,551:INFO:Set up data.
2025-03-14 21:44:12,554:INFO:Set up index.
2025-03-14 21:44:12,654:INFO:Initializing predict_model()
2025-03-14 21:44:12,654:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38290190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:12,654:INFO:Checking exceptions
2025-03-14 21:44:12,654:INFO:Preloading libraries
2025-03-14 21:44:12,654:INFO:Set up data.
2025-03-14 21:44:12,657:INFO:Set up index.
2025-03-14 21:44:12,750:INFO:Initializing predict_model()
2025-03-14 21:44:12,750:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36974AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:12,750:INFO:Checking exceptions
2025-03-14 21:44:12,750:INFO:Preloading libraries
2025-03-14 21:44:12,750:INFO:Set up data.
2025-03-14 21:44:12,753:INFO:Set up index.
2025-03-14 21:44:12,839:INFO:Initializing predict_model()
2025-03-14 21:44:12,839:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:12,839:INFO:Checking exceptions
2025-03-14 21:44:12,839:INFO:Preloading libraries
2025-03-14 21:44:12,839:INFO:Set up data.
2025-03-14 21:44:12,843:INFO:Set up index.
2025-03-14 21:44:12,935:INFO:Initializing predict_model()
2025-03-14 21:44:12,935:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BB950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:12,935:INFO:Checking exceptions
2025-03-14 21:44:12,935:INFO:Preloading libraries
2025-03-14 21:44:12,935:INFO:Set up data.
2025-03-14 21:44:12,938:INFO:Set up index.
2025-03-14 21:44:13,031:INFO:Initializing predict_model()
2025-03-14 21:44:13,031:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BA310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:13,031:INFO:Checking exceptions
2025-03-14 21:44:13,031:INFO:Preloading libraries
2025-03-14 21:44:13,031:INFO:Set up data.
2025-03-14 21:44:13,034:INFO:Set up index.
2025-03-14 21:44:13,130:INFO:Initializing predict_model()
2025-03-14 21:44:13,130:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36B5B3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:13,130:INFO:Checking exceptions
2025-03-14 21:44:13,130:INFO:Preloading libraries
2025-03-14 21:44:13,130:INFO:Set up data.
2025-03-14 21:44:13,133:INFO:Set up index.
2025-03-14 21:44:13,220:INFO:Initializing predict_model()
2025-03-14 21:44:13,220:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51A750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:13,220:INFO:Checking exceptions
2025-03-14 21:44:13,220:INFO:Preloading libraries
2025-03-14 21:44:13,220:INFO:Set up data.
2025-03-14 21:44:13,223:INFO:Set up index.
2025-03-14 21:44:13,311:INFO:Initializing predict_model()
2025-03-14 21:44:13,311:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36973090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:13,311:INFO:Checking exceptions
2025-03-14 21:44:13,311:INFO:Preloading libraries
2025-03-14 21:44:13,311:INFO:Set up data.
2025-03-14 21:44:13,312:INFO:Set up index.
2025-03-14 21:44:13,402:INFO:Initializing predict_model()
2025-03-14 21:44:13,402:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B49AF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:13,402:INFO:Checking exceptions
2025-03-14 21:44:13,402:INFO:Preloading libraries
2025-03-14 21:44:13,402:INFO:Set up data.
2025-03-14 21:44:13,403:INFO:Set up index.
2025-03-14 21:44:13,496:INFO:Initializing predict_model()
2025-03-14 21:44:13,496:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B518B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:13,497:INFO:Checking exceptions
2025-03-14 21:44:13,497:INFO:Preloading libraries
2025-03-14 21:44:13,497:INFO:Set up data.
2025-03-14 21:44:13,500:INFO:Set up index.
2025-03-14 21:44:13,588:INFO:Initializing predict_model()
2025-03-14 21:44:13,588:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36973A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:13,588:INFO:Checking exceptions
2025-03-14 21:44:13,588:INFO:Preloading libraries
2025-03-14 21:44:13,588:INFO:Set up data.
2025-03-14 21:44:13,591:INFO:Set up index.
2025-03-14 21:44:13,679:INFO:Initializing predict_model()
2025-03-14 21:44:13,679:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32F51A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:13,679:INFO:Checking exceptions
2025-03-14 21:44:13,679:INFO:Preloading libraries
2025-03-14 21:44:13,679:INFO:Set up data.
2025-03-14 21:44:13,682:INFO:Set up index.
2025-03-14 21:44:13,773:INFO:Initializing predict_model()
2025-03-14 21:44:13,773:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B49AE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:13,773:INFO:Checking exceptions
2025-03-14 21:44:13,773:INFO:Preloading libraries
2025-03-14 21:44:13,774:INFO:Set up data.
2025-03-14 21:44:13,776:INFO:Set up index.
2025-03-14 21:44:13,865:INFO:Initializing predict_model()
2025-03-14 21:44:13,865:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:13,865:INFO:Checking exceptions
2025-03-14 21:44:13,865:INFO:Preloading libraries
2025-03-14 21:44:13,865:INFO:Set up data.
2025-03-14 21:44:13,868:INFO:Set up index.
2025-03-14 21:44:13,960:INFO:Initializing predict_model()
2025-03-14 21:44:13,960:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38293A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:13,960:INFO:Checking exceptions
2025-03-14 21:44:13,960:INFO:Preloading libraries
2025-03-14 21:44:13,960:INFO:Set up data.
2025-03-14 21:44:13,963:INFO:Set up index.
2025-03-14 21:44:14,074:INFO:Initializing predict_model()
2025-03-14 21:44:14,074:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BC7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:14,074:INFO:Checking exceptions
2025-03-14 21:44:14,074:INFO:Preloading libraries
2025-03-14 21:44:14,074:INFO:Set up data.
2025-03-14 21:44:14,077:INFO:Set up index.
2025-03-14 21:44:14,165:INFO:Initializing predict_model()
2025-03-14 21:44:14,165:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38292710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:14,165:INFO:Checking exceptions
2025-03-14 21:44:14,165:INFO:Preloading libraries
2025-03-14 21:44:14,166:INFO:Set up data.
2025-03-14 21:44:14,168:INFO:Set up index.
2025-03-14 21:44:14,258:INFO:Initializing predict_model()
2025-03-14 21:44:14,258:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696D090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:14,258:INFO:Checking exceptions
2025-03-14 21:44:14,258:INFO:Preloading libraries
2025-03-14 21:44:14,259:INFO:Set up data.
2025-03-14 21:44:14,261:INFO:Set up index.
2025-03-14 21:44:14,350:INFO:Initializing predict_model()
2025-03-14 21:44:14,350:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B9A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:14,350:INFO:Checking exceptions
2025-03-14 21:44:14,350:INFO:Preloading libraries
2025-03-14 21:44:14,350:INFO:Set up data.
2025-03-14 21:44:14,353:INFO:Set up index.
2025-03-14 21:44:14,443:INFO:Initializing predict_model()
2025-03-14 21:44:14,443:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA3B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:14,443:INFO:Checking exceptions
2025-03-14 21:44:14,443:INFO:Preloading libraries
2025-03-14 21:44:14,443:INFO:Set up data.
2025-03-14 21:44:14,446:INFO:Set up index.
2025-03-14 21:44:14,535:INFO:Initializing predict_model()
2025-03-14 21:44:14,537:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BED10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:14,537:INFO:Checking exceptions
2025-03-14 21:44:14,537:INFO:Preloading libraries
2025-03-14 21:44:14,537:INFO:Set up data.
2025-03-14 21:44:14,539:INFO:Set up index.
2025-03-14 21:44:14,629:INFO:Initializing predict_model()
2025-03-14 21:44:14,629:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:14,629:INFO:Checking exceptions
2025-03-14 21:44:14,629:INFO:Preloading libraries
2025-03-14 21:44:14,629:INFO:Set up data.
2025-03-14 21:44:14,632:INFO:Set up index.
2025-03-14 21:44:14,717:INFO:Initializing predict_model()
2025-03-14 21:44:14,717:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BEB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:14,717:INFO:Checking exceptions
2025-03-14 21:44:14,717:INFO:Preloading libraries
2025-03-14 21:44:14,717:INFO:Set up data.
2025-03-14 21:44:14,720:INFO:Set up index.
2025-03-14 21:44:14,809:INFO:Initializing predict_model()
2025-03-14 21:44:14,809:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696FE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:14,809:INFO:Checking exceptions
2025-03-14 21:44:14,809:INFO:Preloading libraries
2025-03-14 21:44:14,810:INFO:Set up data.
2025-03-14 21:44:14,812:INFO:Set up index.
2025-03-14 21:44:14,902:INFO:Initializing predict_model()
2025-03-14 21:44:14,902:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51A150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:14,902:INFO:Checking exceptions
2025-03-14 21:44:14,902:INFO:Preloading libraries
2025-03-14 21:44:14,902:INFO:Set up data.
2025-03-14 21:44:14,905:INFO:Set up index.
2025-03-14 21:44:14,995:INFO:Initializing predict_model()
2025-03-14 21:44:14,995:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369742D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:14,995:INFO:Checking exceptions
2025-03-14 21:44:14,995:INFO:Preloading libraries
2025-03-14 21:44:14,995:INFO:Set up data.
2025-03-14 21:44:14,996:INFO:Set up index.
2025-03-14 21:44:15,099:INFO:Initializing predict_model()
2025-03-14 21:44:15,099:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819E610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:15,099:INFO:Checking exceptions
2025-03-14 21:44:15,100:INFO:Preloading libraries
2025-03-14 21:44:15,100:INFO:Set up data.
2025-03-14 21:44:15,103:INFO:Set up index.
2025-03-14 21:44:15,195:INFO:Initializing predict_model()
2025-03-14 21:44:15,195:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01E46F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:15,195:INFO:Checking exceptions
2025-03-14 21:44:15,195:INFO:Preloading libraries
2025-03-14 21:44:15,195:INFO:Set up data.
2025-03-14 21:44:15,198:INFO:Set up index.
2025-03-14 21:44:15,291:INFO:Initializing predict_model()
2025-03-14 21:44:15,292:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34D94BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:15,292:INFO:Checking exceptions
2025-03-14 21:44:15,292:INFO:Preloading libraries
2025-03-14 21:44:15,292:INFO:Set up data.
2025-03-14 21:44:15,294:INFO:Set up index.
2025-03-14 21:44:15,382:INFO:Initializing predict_model()
2025-03-14 21:44:15,382:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38311510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:15,382:INFO:Checking exceptions
2025-03-14 21:44:15,382:INFO:Preloading libraries
2025-03-14 21:44:15,382:INFO:Set up data.
2025-03-14 21:44:15,385:INFO:Set up index.
2025-03-14 21:44:15,490:INFO:Initializing predict_model()
2025-03-14 21:44:15,490:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32F51A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:15,490:INFO:Checking exceptions
2025-03-14 21:44:15,490:INFO:Preloading libraries
2025-03-14 21:44:15,490:INFO:Set up data.
2025-03-14 21:44:15,493:INFO:Set up index.
2025-03-14 21:44:15,583:INFO:Initializing predict_model()
2025-03-14 21:44:15,583:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38311990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:15,583:INFO:Checking exceptions
2025-03-14 21:44:15,583:INFO:Preloading libraries
2025-03-14 21:44:15,583:INFO:Set up data.
2025-03-14 21:44:15,586:INFO:Set up index.
2025-03-14 21:44:15,712:INFO:Initializing predict_model()
2025-03-14 21:44:15,712:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369716D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:15,712:INFO:Checking exceptions
2025-03-14 21:44:15,712:INFO:Preloading libraries
2025-03-14 21:44:15,712:INFO:Set up data.
2025-03-14 21:44:15,715:INFO:Set up index.
2025-03-14 21:44:15,808:INFO:Initializing predict_model()
2025-03-14 21:44:15,808:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369738D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:15,808:INFO:Checking exceptions
2025-03-14 21:44:15,808:INFO:Preloading libraries
2025-03-14 21:44:15,808:INFO:Set up data.
2025-03-14 21:44:15,812:INFO:Set up index.
2025-03-14 21:44:15,898:INFO:Initializing predict_model()
2025-03-14 21:44:15,899:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BA410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:15,899:INFO:Checking exceptions
2025-03-14 21:44:15,899:INFO:Preloading libraries
2025-03-14 21:44:15,899:INFO:Set up data.
2025-03-14 21:44:15,901:INFO:Set up index.
2025-03-14 21:44:15,990:INFO:Initializing predict_model()
2025-03-14 21:44:15,990:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E380877D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:15,990:INFO:Checking exceptions
2025-03-14 21:44:15,990:INFO:Preloading libraries
2025-03-14 21:44:15,990:INFO:Set up data.
2025-03-14 21:44:15,993:INFO:Set up index.
2025-03-14 21:44:16,084:INFO:Initializing predict_model()
2025-03-14 21:44:16,084:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36970E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:16,084:INFO:Checking exceptions
2025-03-14 21:44:16,084:INFO:Preloading libraries
2025-03-14 21:44:16,086:INFO:Set up data.
2025-03-14 21:44:16,087:INFO:Set up index.
2025-03-14 21:44:16,179:INFO:Initializing predict_model()
2025-03-14 21:44:16,179:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34974450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:16,179:INFO:Checking exceptions
2025-03-14 21:44:16,179:INFO:Preloading libraries
2025-03-14 21:44:16,179:INFO:Set up data.
2025-03-14 21:44:16,182:INFO:Set up index.
2025-03-14 21:44:16,271:INFO:Initializing predict_model()
2025-03-14 21:44:16,271:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA6950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:16,271:INFO:Checking exceptions
2025-03-14 21:44:16,271:INFO:Preloading libraries
2025-03-14 21:44:16,271:INFO:Set up data.
2025-03-14 21:44:16,274:INFO:Set up index.
2025-03-14 21:44:16,369:INFO:Initializing predict_model()
2025-03-14 21:44:16,369:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382C06D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:16,369:INFO:Checking exceptions
2025-03-14 21:44:16,369:INFO:Preloading libraries
2025-03-14 21:44:16,369:INFO:Set up data.
2025-03-14 21:44:16,372:INFO:Set up index.
2025-03-14 21:44:16,463:INFO:Initializing predict_model()
2025-03-14 21:44:16,463:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369706D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:16,463:INFO:Checking exceptions
2025-03-14 21:44:16,463:INFO:Preloading libraries
2025-03-14 21:44:16,463:INFO:Set up data.
2025-03-14 21:44:16,466:INFO:Set up index.
2025-03-14 21:44:16,556:INFO:Initializing predict_model()
2025-03-14 21:44:16,556:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38292F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:16,556:INFO:Checking exceptions
2025-03-14 21:44:16,556:INFO:Preloading libraries
2025-03-14 21:44:16,556:INFO:Set up data.
2025-03-14 21:44:16,559:INFO:Set up index.
2025-03-14 21:44:16,648:INFO:Initializing predict_model()
2025-03-14 21:44:16,648:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEE950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:16,648:INFO:Checking exceptions
2025-03-14 21:44:16,648:INFO:Preloading libraries
2025-03-14 21:44:16,648:INFO:Set up data.
2025-03-14 21:44:16,651:INFO:Set up index.
2025-03-14 21:44:16,744:INFO:Initializing predict_model()
2025-03-14 21:44:16,745:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819FC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:16,745:INFO:Checking exceptions
2025-03-14 21:44:16,745:INFO:Preloading libraries
2025-03-14 21:44:16,745:INFO:Set up data.
2025-03-14 21:44:16,747:INFO:Set up index.
2025-03-14 21:44:16,844:INFO:Initializing predict_model()
2025-03-14 21:44:16,844:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382932D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:16,844:INFO:Checking exceptions
2025-03-14 21:44:16,844:INFO:Preloading libraries
2025-03-14 21:44:16,844:INFO:Set up data.
2025-03-14 21:44:16,846:INFO:Set up index.
2025-03-14 21:44:16,939:INFO:Initializing predict_model()
2025-03-14 21:44:16,939:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:16,939:INFO:Checking exceptions
2025-03-14 21:44:16,939:INFO:Preloading libraries
2025-03-14 21:44:16,939:INFO:Set up data.
2025-03-14 21:44:16,942:INFO:Set up index.
2025-03-14 21:44:17,030:INFO:Initializing predict_model()
2025-03-14 21:44:17,030:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369721D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:17,030:INFO:Checking exceptions
2025-03-14 21:44:17,030:INFO:Preloading libraries
2025-03-14 21:44:17,030:INFO:Set up data.
2025-03-14 21:44:17,033:INFO:Set up index.
2025-03-14 21:44:17,119:INFO:Initializing predict_model()
2025-03-14 21:44:17,119:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696D490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:17,119:INFO:Checking exceptions
2025-03-14 21:44:17,119:INFO:Preloading libraries
2025-03-14 21:44:17,119:INFO:Set up data.
2025-03-14 21:44:17,122:INFO:Set up index.
2025-03-14 21:44:17,206:INFO:Initializing predict_model()
2025-03-14 21:44:17,206:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696D090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:17,206:INFO:Checking exceptions
2025-03-14 21:44:17,206:INFO:Preloading libraries
2025-03-14 21:44:17,206:INFO:Set up data.
2025-03-14 21:44:17,208:INFO:Set up index.
2025-03-14 21:44:17,297:INFO:Initializing predict_model()
2025-03-14 21:44:17,297:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4599D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:17,297:INFO:Checking exceptions
2025-03-14 21:44:17,297:INFO:Preloading libraries
2025-03-14 21:44:17,297:INFO:Set up data.
2025-03-14 21:44:17,300:INFO:Set up index.
2025-03-14 21:44:17,388:INFO:Initializing predict_model()
2025-03-14 21:44:17,390:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38187010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:17,390:INFO:Checking exceptions
2025-03-14 21:44:17,390:INFO:Preloading libraries
2025-03-14 21:44:17,390:INFO:Set up data.
2025-03-14 21:44:17,391:INFO:Set up index.
2025-03-14 21:44:17,487:INFO:Initializing predict_model()
2025-03-14 21:44:17,487:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382932D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:17,487:INFO:Checking exceptions
2025-03-14 21:44:17,487:INFO:Preloading libraries
2025-03-14 21:44:17,487:INFO:Set up data.
2025-03-14 21:44:17,488:INFO:Set up index.
2025-03-14 21:44:17,577:INFO:Initializing predict_model()
2025-03-14 21:44:17,577:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B464A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:17,577:INFO:Checking exceptions
2025-03-14 21:44:17,577:INFO:Preloading libraries
2025-03-14 21:44:17,577:INFO:Set up data.
2025-03-14 21:44:17,580:INFO:Set up index.
2025-03-14 21:44:17,664:INFO:Initializing predict_model()
2025-03-14 21:44:17,664:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEF550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:17,664:INFO:Checking exceptions
2025-03-14 21:44:17,664:INFO:Preloading libraries
2025-03-14 21:44:17,665:INFO:Set up data.
2025-03-14 21:44:17,667:INFO:Set up index.
2025-03-14 21:44:17,755:INFO:Initializing predict_model()
2025-03-14 21:44:17,755:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B9610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:17,755:INFO:Checking exceptions
2025-03-14 21:44:17,755:INFO:Preloading libraries
2025-03-14 21:44:17,755:INFO:Set up data.
2025-03-14 21:44:17,758:INFO:Set up index.
2025-03-14 21:44:17,848:INFO:Initializing predict_model()
2025-03-14 21:44:17,848:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34987010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:17,848:INFO:Checking exceptions
2025-03-14 21:44:17,848:INFO:Preloading libraries
2025-03-14 21:44:17,848:INFO:Set up data.
2025-03-14 21:44:17,851:INFO:Set up index.
2025-03-14 21:44:17,936:INFO:Initializing predict_model()
2025-03-14 21:44:17,936:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819EA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:17,936:INFO:Checking exceptions
2025-03-14 21:44:17,936:INFO:Preloading libraries
2025-03-14 21:44:17,936:INFO:Set up data.
2025-03-14 21:44:17,938:INFO:Set up index.
2025-03-14 21:44:18,025:INFO:Initializing predict_model()
2025-03-14 21:44:18,025:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B45A050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:18,025:INFO:Checking exceptions
2025-03-14 21:44:18,025:INFO:Preloading libraries
2025-03-14 21:44:18,025:INFO:Set up data.
2025-03-14 21:44:18,028:INFO:Set up index.
2025-03-14 21:44:18,114:INFO:Initializing predict_model()
2025-03-14 21:44:18,115:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:18,115:INFO:Checking exceptions
2025-03-14 21:44:18,115:INFO:Preloading libraries
2025-03-14 21:44:18,115:INFO:Set up data.
2025-03-14 21:44:18,117:INFO:Set up index.
2025-03-14 21:44:18,204:INFO:Initializing predict_model()
2025-03-14 21:44:18,204:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BB510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:18,206:INFO:Checking exceptions
2025-03-14 21:44:18,206:INFO:Preloading libraries
2025-03-14 21:44:18,206:INFO:Set up data.
2025-03-14 21:44:18,207:INFO:Set up index.
2025-03-14 21:44:18,295:INFO:Initializing predict_model()
2025-03-14 21:44:18,295:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369716D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:18,295:INFO:Checking exceptions
2025-03-14 21:44:18,295:INFO:Preloading libraries
2025-03-14 21:44:18,295:INFO:Set up data.
2025-03-14 21:44:18,298:INFO:Set up index.
2025-03-14 21:44:18,392:INFO:Initializing predict_model()
2025-03-14 21:44:18,392:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B49BB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:18,392:INFO:Checking exceptions
2025-03-14 21:44:18,392:INFO:Preloading libraries
2025-03-14 21:44:18,392:INFO:Set up data.
2025-03-14 21:44:18,395:INFO:Set up index.
2025-03-14 21:44:18,479:INFO:Initializing predict_model()
2025-03-14 21:44:18,479:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34E4F710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:18,479:INFO:Checking exceptions
2025-03-14 21:44:18,479:INFO:Preloading libraries
2025-03-14 21:44:18,480:INFO:Set up data.
2025-03-14 21:44:18,483:INFO:Set up index.
2025-03-14 21:44:18,567:INFO:Initializing predict_model()
2025-03-14 21:44:18,567:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382912D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:18,567:INFO:Checking exceptions
2025-03-14 21:44:18,567:INFO:Preloading libraries
2025-03-14 21:44:18,569:INFO:Set up data.
2025-03-14 21:44:18,571:INFO:Set up index.
2025-03-14 21:44:18,655:INFO:Initializing predict_model()
2025-03-14 21:44:18,655:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B8A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:18,655:INFO:Checking exceptions
2025-03-14 21:44:18,657:INFO:Preloading libraries
2025-03-14 21:44:18,657:INFO:Set up data.
2025-03-14 21:44:18,658:INFO:Set up index.
2025-03-14 21:44:18,747:INFO:Initializing predict_model()
2025-03-14 21:44:18,747:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:18,747:INFO:Checking exceptions
2025-03-14 21:44:18,747:INFO:Preloading libraries
2025-03-14 21:44:18,747:INFO:Set up data.
2025-03-14 21:44:18,750:INFO:Set up index.
2025-03-14 21:44:18,839:INFO:Initializing predict_model()
2025-03-14 21:44:18,839:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B473C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:18,839:INFO:Checking exceptions
2025-03-14 21:44:18,839:INFO:Preloading libraries
2025-03-14 21:44:18,839:INFO:Set up data.
2025-03-14 21:44:18,842:INFO:Set up index.
2025-03-14 21:44:18,929:INFO:Initializing predict_model()
2025-03-14 21:44:18,929:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA55D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:18,929:INFO:Checking exceptions
2025-03-14 21:44:18,929:INFO:Preloading libraries
2025-03-14 21:44:18,929:INFO:Set up data.
2025-03-14 21:44:18,932:INFO:Set up index.
2025-03-14 21:44:19,017:INFO:Initializing predict_model()
2025-03-14 21:44:19,019:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B696250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:19,019:INFO:Checking exceptions
2025-03-14 21:44:19,019:INFO:Preloading libraries
2025-03-14 21:44:19,019:INFO:Set up data.
2025-03-14 21:44:19,022:INFO:Set up index.
2025-03-14 21:44:19,107:INFO:Initializing predict_model()
2025-03-14 21:44:19,107:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696D5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:19,107:INFO:Checking exceptions
2025-03-14 21:44:19,107:INFO:Preloading libraries
2025-03-14 21:44:19,107:INFO:Set up data.
2025-03-14 21:44:19,108:INFO:Set up index.
2025-03-14 21:44:19,199:INFO:Initializing predict_model()
2025-03-14 21:44:19,199:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34374690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:19,199:INFO:Checking exceptions
2025-03-14 21:44:19,199:INFO:Preloading libraries
2025-03-14 21:44:19,199:INFO:Set up data.
2025-03-14 21:44:19,203:INFO:Set up index.
2025-03-14 21:44:19,288:INFO:Initializing predict_model()
2025-03-14 21:44:19,288:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51BBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:19,288:INFO:Checking exceptions
2025-03-14 21:44:19,288:INFO:Preloading libraries
2025-03-14 21:44:19,288:INFO:Set up data.
2025-03-14 21:44:19,291:INFO:Set up index.
2025-03-14 21:44:19,377:INFO:Initializing predict_model()
2025-03-14 21:44:19,377:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BDD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:19,377:INFO:Checking exceptions
2025-03-14 21:44:19,377:INFO:Preloading libraries
2025-03-14 21:44:19,377:INFO:Set up data.
2025-03-14 21:44:19,380:INFO:Set up index.
2025-03-14 21:44:19,470:INFO:Initializing predict_model()
2025-03-14 21:44:19,470:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:19,470:INFO:Checking exceptions
2025-03-14 21:44:19,470:INFO:Preloading libraries
2025-03-14 21:44:19,470:INFO:Set up data.
2025-03-14 21:44:19,473:INFO:Set up index.
2025-03-14 21:44:19,563:INFO:Initializing predict_model()
2025-03-14 21:44:19,563:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EF0110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:19,563:INFO:Checking exceptions
2025-03-14 21:44:19,563:INFO:Preloading libraries
2025-03-14 21:44:19,563:INFO:Set up data.
2025-03-14 21:44:19,566:INFO:Set up index.
2025-03-14 21:44:19,653:INFO:Initializing predict_model()
2025-03-14 21:44:19,653:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38311510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:19,653:INFO:Checking exceptions
2025-03-14 21:44:19,653:INFO:Preloading libraries
2025-03-14 21:44:19,653:INFO:Set up data.
2025-03-14 21:44:19,654:INFO:Set up index.
2025-03-14 21:44:19,744:INFO:Initializing predict_model()
2025-03-14 21:44:19,744:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BDD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:19,744:INFO:Checking exceptions
2025-03-14 21:44:19,744:INFO:Preloading libraries
2025-03-14 21:44:19,745:INFO:Set up data.
2025-03-14 21:44:19,747:INFO:Set up index.
2025-03-14 21:44:19,832:INFO:Initializing predict_model()
2025-03-14 21:44:19,832:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:19,832:INFO:Checking exceptions
2025-03-14 21:44:19,832:INFO:Preloading libraries
2025-03-14 21:44:19,832:INFO:Set up data.
2025-03-14 21:44:19,835:INFO:Set up index.
2025-03-14 21:44:19,926:INFO:Initializing predict_model()
2025-03-14 21:44:19,926:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B62FF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:19,926:INFO:Checking exceptions
2025-03-14 21:44:19,926:INFO:Preloading libraries
2025-03-14 21:44:19,926:INFO:Set up data.
2025-03-14 21:44:19,929:INFO:Set up index.
2025-03-14 21:44:20,015:INFO:Initializing predict_model()
2025-03-14 21:44:20,015:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEF550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:20,015:INFO:Checking exceptions
2025-03-14 21:44:20,015:INFO:Preloading libraries
2025-03-14 21:44:20,015:INFO:Set up data.
2025-03-14 21:44:20,018:INFO:Set up index.
2025-03-14 21:44:20,115:INFO:Initializing predict_model()
2025-03-14 21:44:20,115:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36973390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:20,115:INFO:Checking exceptions
2025-03-14 21:44:20,115:INFO:Preloading libraries
2025-03-14 21:44:20,115:INFO:Set up data.
2025-03-14 21:44:20,118:INFO:Set up index.
2025-03-14 21:44:20,202:INFO:Initializing predict_model()
2025-03-14 21:44:20,202:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01D5E410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:20,202:INFO:Checking exceptions
2025-03-14 21:44:20,202:INFO:Preloading libraries
2025-03-14 21:44:20,202:INFO:Set up data.
2025-03-14 21:44:20,204:INFO:Set up index.
2025-03-14 21:44:20,291:INFO:Initializing predict_model()
2025-03-14 21:44:20,291:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384AC6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:20,291:INFO:Checking exceptions
2025-03-14 21:44:20,291:INFO:Preloading libraries
2025-03-14 21:44:20,291:INFO:Set up data.
2025-03-14 21:44:20,294:INFO:Set up index.
2025-03-14 21:44:20,377:INFO:Initializing predict_model()
2025-03-14 21:44:20,377:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34987010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:20,377:INFO:Checking exceptions
2025-03-14 21:44:20,377:INFO:Preloading libraries
2025-03-14 21:44:20,377:INFO:Set up data.
2025-03-14 21:44:20,380:INFO:Set up index.
2025-03-14 21:44:20,467:INFO:Initializing predict_model()
2025-03-14 21:44:20,467:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:20,467:INFO:Checking exceptions
2025-03-14 21:44:20,467:INFO:Preloading libraries
2025-03-14 21:44:20,467:INFO:Set up data.
2025-03-14 21:44:20,468:INFO:Set up index.
2025-03-14 21:44:20,554:INFO:Initializing predict_model()
2025-03-14 21:44:20,554:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696E3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:20,554:INFO:Checking exceptions
2025-03-14 21:44:20,554:INFO:Preloading libraries
2025-03-14 21:44:20,554:INFO:Set up data.
2025-03-14 21:44:20,556:INFO:Set up index.
2025-03-14 21:44:20,642:INFO:Initializing predict_model()
2025-03-14 21:44:20,643:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51BA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:20,643:INFO:Checking exceptions
2025-03-14 21:44:20,643:INFO:Preloading libraries
2025-03-14 21:44:20,643:INFO:Set up data.
2025-03-14 21:44:20,645:INFO:Set up index.
2025-03-14 21:44:20,735:INFO:Initializing predict_model()
2025-03-14 21:44:20,735:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36974BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:20,735:INFO:Checking exceptions
2025-03-14 21:44:20,735:INFO:Preloading libraries
2025-03-14 21:44:20,735:INFO:Set up data.
2025-03-14 21:44:20,741:INFO:Set up index.
2025-03-14 21:44:20,842:INFO:Initializing predict_model()
2025-03-14 21:44:20,842:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36970310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:20,842:INFO:Checking exceptions
2025-03-14 21:44:20,842:INFO:Preloading libraries
2025-03-14 21:44:20,842:INFO:Set up data.
2025-03-14 21:44:20,845:INFO:Set up index.
2025-03-14 21:44:20,932:INFO:Initializing predict_model()
2025-03-14 21:44:20,932:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:20,932:INFO:Checking exceptions
2025-03-14 21:44:20,932:INFO:Preloading libraries
2025-03-14 21:44:20,932:INFO:Set up data.
2025-03-14 21:44:20,935:INFO:Set up index.
2025-03-14 21:44:21,018:INFO:Initializing predict_model()
2025-03-14 21:44:21,018:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:21,018:INFO:Checking exceptions
2025-03-14 21:44:21,018:INFO:Preloading libraries
2025-03-14 21:44:21,018:INFO:Set up data.
2025-03-14 21:44:21,021:INFO:Set up index.
2025-03-14 21:44:21,107:INFO:Initializing predict_model()
2025-03-14 21:44:21,107:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34987010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:21,107:INFO:Checking exceptions
2025-03-14 21:44:21,107:INFO:Preloading libraries
2025-03-14 21:44:21,107:INFO:Set up data.
2025-03-14 21:44:21,110:INFO:Set up index.
2025-03-14 21:44:21,195:INFO:Initializing predict_model()
2025-03-14 21:44:21,195:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36973A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:21,195:INFO:Checking exceptions
2025-03-14 21:44:21,195:INFO:Preloading libraries
2025-03-14 21:44:21,195:INFO:Set up data.
2025-03-14 21:44:21,197:INFO:Set up index.
2025-03-14 21:44:21,288:INFO:Initializing predict_model()
2025-03-14 21:44:21,288:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B45A050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:21,288:INFO:Checking exceptions
2025-03-14 21:44:21,288:INFO:Preloading libraries
2025-03-14 21:44:21,288:INFO:Set up data.
2025-03-14 21:44:21,291:INFO:Set up index.
2025-03-14 21:44:21,379:INFO:Initializing predict_model()
2025-03-14 21:44:21,379:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819D890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:21,379:INFO:Checking exceptions
2025-03-14 21:44:21,379:INFO:Preloading libraries
2025-03-14 21:44:21,380:INFO:Set up data.
2025-03-14 21:44:21,382:INFO:Set up index.
2025-03-14 21:44:21,477:INFO:Initializing predict_model()
2025-03-14 21:44:21,477:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BCF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:21,477:INFO:Checking exceptions
2025-03-14 21:44:21,477:INFO:Preloading libraries
2025-03-14 21:44:21,477:INFO:Set up data.
2025-03-14 21:44:21,480:INFO:Set up index.
2025-03-14 21:44:21,568:INFO:Initializing predict_model()
2025-03-14 21:44:21,568:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B45B950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:21,568:INFO:Checking exceptions
2025-03-14 21:44:21,568:INFO:Preloading libraries
2025-03-14 21:44:21,570:INFO:Set up data.
2025-03-14 21:44:21,571:INFO:Set up index.
2025-03-14 21:44:21,658:INFO:Initializing predict_model()
2025-03-14 21:44:21,658:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BA4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:21,658:INFO:Checking exceptions
2025-03-14 21:44:21,658:INFO:Preloading libraries
2025-03-14 21:44:21,658:INFO:Set up data.
2025-03-14 21:44:21,660:INFO:Set up index.
2025-03-14 21:44:21,749:INFO:Initializing predict_model()
2025-03-14 21:44:21,749:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BDD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:21,749:INFO:Checking exceptions
2025-03-14 21:44:21,749:INFO:Preloading libraries
2025-03-14 21:44:21,749:INFO:Set up data.
2025-03-14 21:44:21,752:INFO:Set up index.
2025-03-14 21:44:21,837:INFO:Initializing predict_model()
2025-03-14 21:44:21,837:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696F450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:21,837:INFO:Checking exceptions
2025-03-14 21:44:21,837:INFO:Preloading libraries
2025-03-14 21:44:21,837:INFO:Set up data.
2025-03-14 21:44:21,840:INFO:Set up index.
2025-03-14 21:44:21,926:INFO:Initializing predict_model()
2025-03-14 21:44:21,926:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819FF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:21,926:INFO:Checking exceptions
2025-03-14 21:44:21,926:INFO:Preloading libraries
2025-03-14 21:44:21,926:INFO:Set up data.
2025-03-14 21:44:21,929:INFO:Set up index.
2025-03-14 21:44:22,021:INFO:Initializing predict_model()
2025-03-14 21:44:22,021:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:22,021:INFO:Checking exceptions
2025-03-14 21:44:22,021:INFO:Preloading libraries
2025-03-14 21:44:22,021:INFO:Set up data.
2025-03-14 21:44:22,024:INFO:Set up index.
2025-03-14 21:44:22,114:INFO:Initializing predict_model()
2025-03-14 21:44:22,114:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:22,114:INFO:Checking exceptions
2025-03-14 21:44:22,114:INFO:Preloading libraries
2025-03-14 21:44:22,114:INFO:Set up data.
2025-03-14 21:44:22,117:INFO:Set up index.
2025-03-14 21:44:22,204:INFO:Initializing predict_model()
2025-03-14 21:44:22,204:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:22,204:INFO:Checking exceptions
2025-03-14 21:44:22,204:INFO:Preloading libraries
2025-03-14 21:44:22,204:INFO:Set up data.
2025-03-14 21:44:22,207:INFO:Set up index.
2025-03-14 21:44:22,292:INFO:Initializing predict_model()
2025-03-14 21:44:22,294:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01EAA310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:22,294:INFO:Checking exceptions
2025-03-14 21:44:22,294:INFO:Preloading libraries
2025-03-14 21:44:22,294:INFO:Set up data.
2025-03-14 21:44:22,295:INFO:Set up index.
2025-03-14 21:44:22,383:INFO:Initializing predict_model()
2025-03-14 21:44:22,383:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382C06D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:22,383:INFO:Checking exceptions
2025-03-14 21:44:22,384:INFO:Preloading libraries
2025-03-14 21:44:22,384:INFO:Set up data.
2025-03-14 21:44:22,386:INFO:Set up index.
2025-03-14 21:44:22,475:INFO:Initializing predict_model()
2025-03-14 21:44:22,475:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BB510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:22,475:INFO:Checking exceptions
2025-03-14 21:44:22,475:INFO:Preloading libraries
2025-03-14 21:44:22,475:INFO:Set up data.
2025-03-14 21:44:22,476:INFO:Set up index.
2025-03-14 21:44:22,563:INFO:Initializing predict_model()
2025-03-14 21:44:22,563:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696DD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:22,563:INFO:Checking exceptions
2025-03-14 21:44:22,563:INFO:Preloading libraries
2025-03-14 21:44:22,565:INFO:Set up data.
2025-03-14 21:44:22,566:INFO:Set up index.
2025-03-14 21:44:22,656:INFO:Initializing predict_model()
2025-03-14 21:44:22,658:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA62D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:22,658:INFO:Checking exceptions
2025-03-14 21:44:22,658:INFO:Preloading libraries
2025-03-14 21:44:22,658:INFO:Set up data.
2025-03-14 21:44:22,659:INFO:Set up index.
2025-03-14 21:44:22,750:INFO:Initializing predict_model()
2025-03-14 21:44:22,750:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32F51A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:22,751:INFO:Checking exceptions
2025-03-14 21:44:22,751:INFO:Preloading libraries
2025-03-14 21:44:22,751:INFO:Set up data.
2025-03-14 21:44:22,753:INFO:Set up index.
2025-03-14 21:44:22,838:INFO:Initializing predict_model()
2025-03-14 21:44:22,838:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:22,838:INFO:Checking exceptions
2025-03-14 21:44:22,838:INFO:Preloading libraries
2025-03-14 21:44:22,838:INFO:Set up data.
2025-03-14 21:44:22,842:INFO:Set up index.
2025-03-14 21:44:22,926:INFO:Initializing predict_model()
2025-03-14 21:44:22,926:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38087350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:22,926:INFO:Checking exceptions
2025-03-14 21:44:22,926:INFO:Preloading libraries
2025-03-14 21:44:22,926:INFO:Set up data.
2025-03-14 21:44:22,929:INFO:Set up index.
2025-03-14 21:44:23,025:INFO:Initializing predict_model()
2025-03-14 21:44:23,025:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36973390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:23,025:INFO:Checking exceptions
2025-03-14 21:44:23,025:INFO:Preloading libraries
2025-03-14 21:44:23,025:INFO:Set up data.
2025-03-14 21:44:23,028:INFO:Set up index.
2025-03-14 21:44:23,117:INFO:Initializing predict_model()
2025-03-14 21:44:23,119:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:23,119:INFO:Checking exceptions
2025-03-14 21:44:23,119:INFO:Preloading libraries
2025-03-14 21:44:23,119:INFO:Set up data.
2025-03-14 21:44:23,120:INFO:Set up index.
2025-03-14 21:44:23,210:INFO:Initializing predict_model()
2025-03-14 21:44:23,210:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38292410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:23,210:INFO:Checking exceptions
2025-03-14 21:44:23,210:INFO:Preloading libraries
2025-03-14 21:44:23,210:INFO:Set up data.
2025-03-14 21:44:23,213:INFO:Set up index.
2025-03-14 21:44:23,300:INFO:Initializing predict_model()
2025-03-14 21:44:23,300:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:23,300:INFO:Checking exceptions
2025-03-14 21:44:23,300:INFO:Preloading libraries
2025-03-14 21:44:23,300:INFO:Set up data.
2025-03-14 21:44:23,301:INFO:Set up index.
2025-03-14 21:44:23,386:INFO:Initializing predict_model()
2025-03-14 21:44:23,386:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BCF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:23,386:INFO:Checking exceptions
2025-03-14 21:44:23,386:INFO:Preloading libraries
2025-03-14 21:44:23,386:INFO:Set up data.
2025-03-14 21:44:23,390:INFO:Set up index.
2025-03-14 21:44:23,475:INFO:Initializing predict_model()
2025-03-14 21:44:23,475:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38217010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:23,475:INFO:Checking exceptions
2025-03-14 21:44:23,475:INFO:Preloading libraries
2025-03-14 21:44:23,475:INFO:Set up data.
2025-03-14 21:44:23,478:INFO:Set up index.
2025-03-14 21:44:23,565:INFO:Initializing predict_model()
2025-03-14 21:44:23,565:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19871A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:23,565:INFO:Checking exceptions
2025-03-14 21:44:23,565:INFO:Preloading libraries
2025-03-14 21:44:23,565:INFO:Set up data.
2025-03-14 21:44:23,568:INFO:Set up index.
2025-03-14 21:44:23,654:INFO:Initializing predict_model()
2025-03-14 21:44:23,654:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:23,654:INFO:Checking exceptions
2025-03-14 21:44:23,654:INFO:Preloading libraries
2025-03-14 21:44:23,654:INFO:Set up data.
2025-03-14 21:44:23,657:INFO:Set up index.
2025-03-14 21:44:23,743:INFO:Initializing predict_model()
2025-03-14 21:44:23,743:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B96D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:23,743:INFO:Checking exceptions
2025-03-14 21:44:23,743:INFO:Preloading libraries
2025-03-14 21:44:23,743:INFO:Set up data.
2025-03-14 21:44:23,746:INFO:Set up index.
2025-03-14 21:44:23,834:INFO:Initializing predict_model()
2025-03-14 21:44:23,834:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51BA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:23,834:INFO:Checking exceptions
2025-03-14 21:44:23,834:INFO:Preloading libraries
2025-03-14 21:44:23,834:INFO:Set up data.
2025-03-14 21:44:23,839:INFO:Set up index.
2025-03-14 21:44:23,927:INFO:Initializing predict_model()
2025-03-14 21:44:23,927:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4EB510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:23,927:INFO:Checking exceptions
2025-03-14 21:44:23,927:INFO:Preloading libraries
2025-03-14 21:44:23,928:INFO:Set up data.
2025-03-14 21:44:23,930:INFO:Set up index.
2025-03-14 21:44:24,019:INFO:Initializing predict_model()
2025-03-14 21:44:24,019:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEE810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:24,019:INFO:Checking exceptions
2025-03-14 21:44:24,019:INFO:Preloading libraries
2025-03-14 21:44:24,019:INFO:Set up data.
2025-03-14 21:44:24,022:INFO:Set up index.
2025-03-14 21:44:24,110:INFO:Initializing predict_model()
2025-03-14 21:44:24,110:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819FB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:24,110:INFO:Checking exceptions
2025-03-14 21:44:24,110:INFO:Preloading libraries
2025-03-14 21:44:24,110:INFO:Set up data.
2025-03-14 21:44:24,115:INFO:Set up index.
2025-03-14 21:44:24,201:INFO:Initializing predict_model()
2025-03-14 21:44:24,201:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696E3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:24,201:INFO:Checking exceptions
2025-03-14 21:44:24,201:INFO:Preloading libraries
2025-03-14 21:44:24,201:INFO:Set up data.
2025-03-14 21:44:24,203:INFO:Set up index.
2025-03-14 21:44:24,291:INFO:Initializing predict_model()
2025-03-14 21:44:24,291:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36974690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:24,291:INFO:Checking exceptions
2025-03-14 21:44:24,291:INFO:Preloading libraries
2025-03-14 21:44:24,291:INFO:Set up data.
2025-03-14 21:44:24,294:INFO:Set up index.
2025-03-14 21:44:24,385:INFO:Initializing predict_model()
2025-03-14 21:44:24,385:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:24,385:INFO:Checking exceptions
2025-03-14 21:44:24,385:INFO:Preloading libraries
2025-03-14 21:44:24,385:INFO:Set up data.
2025-03-14 21:44:24,388:INFO:Set up index.
2025-03-14 21:44:24,475:INFO:Initializing predict_model()
2025-03-14 21:44:24,475:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38187ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:24,475:INFO:Checking exceptions
2025-03-14 21:44:24,475:INFO:Preloading libraries
2025-03-14 21:44:24,475:INFO:Set up data.
2025-03-14 21:44:24,476:INFO:Set up index.
2025-03-14 21:44:24,563:INFO:Initializing predict_model()
2025-03-14 21:44:24,563:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BEB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:24,563:INFO:Checking exceptions
2025-03-14 21:44:24,563:INFO:Preloading libraries
2025-03-14 21:44:24,563:INFO:Set up data.
2025-03-14 21:44:24,566:INFO:Set up index.
2025-03-14 21:44:24,655:INFO:Initializing predict_model()
2025-03-14 21:44:24,655:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:24,655:INFO:Checking exceptions
2025-03-14 21:44:24,655:INFO:Preloading libraries
2025-03-14 21:44:24,655:INFO:Set up data.
2025-03-14 21:44:24,658:INFO:Set up index.
2025-03-14 21:44:24,743:INFO:Initializing predict_model()
2025-03-14 21:44:24,743:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BE790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:24,743:INFO:Checking exceptions
2025-03-14 21:44:24,743:INFO:Preloading libraries
2025-03-14 21:44:24,743:INFO:Set up data.
2025-03-14 21:44:24,747:INFO:Set up index.
2025-03-14 21:44:24,831:INFO:Initializing predict_model()
2025-03-14 21:44:24,831:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34974450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:24,831:INFO:Checking exceptions
2025-03-14 21:44:24,831:INFO:Preloading libraries
2025-03-14 21:44:24,831:INFO:Set up data.
2025-03-14 21:44:24,834:INFO:Set up index.
2025-03-14 21:44:24,921:INFO:Initializing predict_model()
2025-03-14 21:44:24,921:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32536D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:24,921:INFO:Checking exceptions
2025-03-14 21:44:24,921:INFO:Preloading libraries
2025-03-14 21:44:24,921:INFO:Set up data.
2025-03-14 21:44:24,924:INFO:Set up index.
2025-03-14 21:44:25,015:INFO:Initializing predict_model()
2025-03-14 21:44:25,015:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B499610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:25,015:INFO:Checking exceptions
2025-03-14 21:44:25,015:INFO:Preloading libraries
2025-03-14 21:44:25,015:INFO:Set up data.
2025-03-14 21:44:25,019:INFO:Set up index.
2025-03-14 21:44:25,109:INFO:Initializing predict_model()
2025-03-14 21:44:25,109:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B96D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:25,109:INFO:Checking exceptions
2025-03-14 21:44:25,109:INFO:Preloading libraries
2025-03-14 21:44:25,109:INFO:Set up data.
2025-03-14 21:44:25,112:INFO:Set up index.
2025-03-14 21:44:25,199:INFO:Initializing predict_model()
2025-03-14 21:44:25,199:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382C0050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:25,199:INFO:Checking exceptions
2025-03-14 21:44:25,199:INFO:Preloading libraries
2025-03-14 21:44:25,199:INFO:Set up data.
2025-03-14 21:44:25,202:INFO:Set up index.
2025-03-14 21:44:25,289:INFO:Initializing predict_model()
2025-03-14 21:44:25,291:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819EC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:25,291:INFO:Checking exceptions
2025-03-14 21:44:25,291:INFO:Preloading libraries
2025-03-14 21:44:25,291:INFO:Set up data.
2025-03-14 21:44:25,292:INFO:Set up index.
2025-03-14 21:44:25,377:INFO:Initializing predict_model()
2025-03-14 21:44:25,377:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38186950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:25,377:INFO:Checking exceptions
2025-03-14 21:44:25,377:INFO:Preloading libraries
2025-03-14 21:44:25,377:INFO:Set up data.
2025-03-14 21:44:25,379:INFO:Set up index.
2025-03-14 21:44:25,465:INFO:Initializing predict_model()
2025-03-14 21:44:25,465:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BCB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:25,465:INFO:Checking exceptions
2025-03-14 21:44:25,465:INFO:Preloading libraries
2025-03-14 21:44:25,465:INFO:Set up data.
2025-03-14 21:44:25,469:INFO:Set up index.
2025-03-14 21:44:25,553:INFO:Initializing predict_model()
2025-03-14 21:44:25,554:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEF550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:25,554:INFO:Checking exceptions
2025-03-14 21:44:25,554:INFO:Preloading libraries
2025-03-14 21:44:25,554:INFO:Set up data.
2025-03-14 21:44:25,556:INFO:Set up index.
2025-03-14 21:44:25,643:INFO:Initializing predict_model()
2025-03-14 21:44:25,643:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B696250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:25,643:INFO:Checking exceptions
2025-03-14 21:44:25,643:INFO:Preloading libraries
2025-03-14 21:44:25,643:INFO:Set up data.
2025-03-14 21:44:25,646:INFO:Set up index.
2025-03-14 21:44:25,732:INFO:Initializing predict_model()
2025-03-14 21:44:25,732:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4EB610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:25,732:INFO:Checking exceptions
2025-03-14 21:44:25,732:INFO:Preloading libraries
2025-03-14 21:44:25,732:INFO:Set up data.
2025-03-14 21:44:25,735:INFO:Set up index.
2025-03-14 21:44:25,822:INFO:Initializing predict_model()
2025-03-14 21:44:25,822:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01EAA310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:25,822:INFO:Checking exceptions
2025-03-14 21:44:25,822:INFO:Preloading libraries
2025-03-14 21:44:25,822:INFO:Set up data.
2025-03-14 21:44:25,825:INFO:Set up index.
2025-03-14 21:44:25,913:INFO:Initializing predict_model()
2025-03-14 21:44:25,914:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B45B950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:25,914:INFO:Checking exceptions
2025-03-14 21:44:25,914:INFO:Preloading libraries
2025-03-14 21:44:25,914:INFO:Set up data.
2025-03-14 21:44:25,916:INFO:Set up index.
2025-03-14 21:44:26,003:INFO:Initializing predict_model()
2025-03-14 21:44:26,003:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369730D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:26,003:INFO:Checking exceptions
2025-03-14 21:44:26,003:INFO:Preloading libraries
2025-03-14 21:44:26,003:INFO:Set up data.
2025-03-14 21:44:26,006:INFO:Set up index.
2025-03-14 21:44:26,091:INFO:Initializing predict_model()
2025-03-14 21:44:26,091:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38290310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:26,091:INFO:Checking exceptions
2025-03-14 21:44:26,091:INFO:Preloading libraries
2025-03-14 21:44:26,091:INFO:Set up data.
2025-03-14 21:44:26,094:INFO:Set up index.
2025-03-14 21:44:26,178:INFO:Initializing predict_model()
2025-03-14 21:44:26,178:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E0104B610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:26,178:INFO:Checking exceptions
2025-03-14 21:44:26,178:INFO:Preloading libraries
2025-03-14 21:44:26,178:INFO:Set up data.
2025-03-14 21:44:26,182:INFO:Set up index.
2025-03-14 21:44:26,267:INFO:Initializing predict_model()
2025-03-14 21:44:26,267:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19871A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:26,267:INFO:Checking exceptions
2025-03-14 21:44:26,267:INFO:Preloading libraries
2025-03-14 21:44:26,269:INFO:Set up data.
2025-03-14 21:44:26,270:INFO:Set up index.
2025-03-14 21:44:26,360:INFO:Initializing predict_model()
2025-03-14 21:44:26,360:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:26,360:INFO:Checking exceptions
2025-03-14 21:44:26,360:INFO:Preloading libraries
2025-03-14 21:44:26,360:INFO:Set up data.
2025-03-14 21:44:26,363:INFO:Set up index.
2025-03-14 21:44:26,451:INFO:Initializing predict_model()
2025-03-14 21:44:26,451:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38349990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:26,451:INFO:Checking exceptions
2025-03-14 21:44:26,451:INFO:Preloading libraries
2025-03-14 21:44:26,451:INFO:Set up data.
2025-03-14 21:44:26,454:INFO:Set up index.
2025-03-14 21:44:26,539:INFO:Initializing predict_model()
2025-03-14 21:44:26,539:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BB510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:26,539:INFO:Checking exceptions
2025-03-14 21:44:26,539:INFO:Preloading libraries
2025-03-14 21:44:26,539:INFO:Set up data.
2025-03-14 21:44:26,542:INFO:Set up index.
2025-03-14 21:44:26,627:INFO:Initializing predict_model()
2025-03-14 21:44:26,627:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B96D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:26,627:INFO:Checking exceptions
2025-03-14 21:44:26,627:INFO:Preloading libraries
2025-03-14 21:44:26,627:INFO:Set up data.
2025-03-14 21:44:26,630:INFO:Set up index.
2025-03-14 21:44:26,713:INFO:Initializing predict_model()
2025-03-14 21:44:26,713:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BB0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:26,713:INFO:Checking exceptions
2025-03-14 21:44:26,713:INFO:Preloading libraries
2025-03-14 21:44:26,713:INFO:Set up data.
2025-03-14 21:44:26,716:INFO:Set up index.
2025-03-14 21:44:26,802:INFO:Initializing predict_model()
2025-03-14 21:44:26,802:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51AFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:26,802:INFO:Checking exceptions
2025-03-14 21:44:26,802:INFO:Preloading libraries
2025-03-14 21:44:26,802:INFO:Set up data.
2025-03-14 21:44:26,803:INFO:Set up index.
2025-03-14 21:44:26,888:INFO:Initializing predict_model()
2025-03-14 21:44:26,888:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B518110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:26,888:INFO:Checking exceptions
2025-03-14 21:44:26,888:INFO:Preloading libraries
2025-03-14 21:44:26,888:INFO:Set up data.
2025-03-14 21:44:26,892:INFO:Set up index.
2025-03-14 21:44:26,977:INFO:Initializing predict_model()
2025-03-14 21:44:26,979:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38290190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:26,979:INFO:Checking exceptions
2025-03-14 21:44:26,979:INFO:Preloading libraries
2025-03-14 21:44:26,979:INFO:Set up data.
2025-03-14 21:44:26,980:INFO:Set up index.
2025-03-14 21:44:27,070:INFO:Initializing predict_model()
2025-03-14 21:44:27,070:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B45B190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:27,070:INFO:Checking exceptions
2025-03-14 21:44:27,070:INFO:Preloading libraries
2025-03-14 21:44:27,070:INFO:Set up data.
2025-03-14 21:44:27,073:INFO:Set up index.
2025-03-14 21:44:27,160:INFO:Initializing predict_model()
2025-03-14 21:44:27,160:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369721D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:27,160:INFO:Checking exceptions
2025-03-14 21:44:27,160:INFO:Preloading libraries
2025-03-14 21:44:27,160:INFO:Set up data.
2025-03-14 21:44:27,164:INFO:Set up index.
2025-03-14 21:44:27,251:INFO:Initializing predict_model()
2025-03-14 21:44:27,251:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B519750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:27,251:INFO:Checking exceptions
2025-03-14 21:44:27,253:INFO:Preloading libraries
2025-03-14 21:44:27,253:INFO:Set up data.
2025-03-14 21:44:27,256:INFO:Set up index.
2025-03-14 21:44:27,345:INFO:Initializing predict_model()
2025-03-14 21:44:27,345:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369719D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:27,345:INFO:Checking exceptions
2025-03-14 21:44:27,345:INFO:Preloading libraries
2025-03-14 21:44:27,346:INFO:Set up data.
2025-03-14 21:44:27,348:INFO:Set up index.
2025-03-14 21:44:27,435:INFO:Initializing predict_model()
2025-03-14 21:44:27,435:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:27,435:INFO:Checking exceptions
2025-03-14 21:44:27,435:INFO:Preloading libraries
2025-03-14 21:44:27,435:INFO:Set up data.
2025-03-14 21:44:27,438:INFO:Set up index.
2025-03-14 21:44:27,532:INFO:Initializing predict_model()
2025-03-14 21:44:27,534:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BCB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:27,534:INFO:Checking exceptions
2025-03-14 21:44:27,534:INFO:Preloading libraries
2025-03-14 21:44:27,534:INFO:Set up data.
2025-03-14 21:44:27,545:INFO:Set up index.
2025-03-14 21:44:27,632:INFO:Initializing predict_model()
2025-03-14 21:44:27,632:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38085E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:27,632:INFO:Checking exceptions
2025-03-14 21:44:27,632:INFO:Preloading libraries
2025-03-14 21:44:27,632:INFO:Set up data.
2025-03-14 21:44:27,635:INFO:Set up index.
2025-03-14 21:44:27,721:INFO:Initializing predict_model()
2025-03-14 21:44:27,721:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B464A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:27,721:INFO:Checking exceptions
2025-03-14 21:44:27,721:INFO:Preloading libraries
2025-03-14 21:44:27,721:INFO:Set up data.
2025-03-14 21:44:27,724:INFO:Set up index.
2025-03-14 21:44:27,813:INFO:Initializing predict_model()
2025-03-14 21:44:27,813:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E348ED490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:27,813:INFO:Checking exceptions
2025-03-14 21:44:27,813:INFO:Preloading libraries
2025-03-14 21:44:27,813:INFO:Set up data.
2025-03-14 21:44:27,816:INFO:Set up index.
2025-03-14 21:44:27,902:INFO:Initializing predict_model()
2025-03-14 21:44:27,902:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B696250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:27,902:INFO:Checking exceptions
2025-03-14 21:44:27,902:INFO:Preloading libraries
2025-03-14 21:44:27,902:INFO:Set up data.
2025-03-14 21:44:27,905:INFO:Set up index.
2025-03-14 21:44:27,990:INFO:Initializing predict_model()
2025-03-14 21:44:27,990:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38311990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:27,990:INFO:Checking exceptions
2025-03-14 21:44:27,990:INFO:Preloading libraries
2025-03-14 21:44:27,990:INFO:Set up data.
2025-03-14 21:44:27,993:INFO:Set up index.
2025-03-14 21:44:28,078:INFO:Initializing predict_model()
2025-03-14 21:44:28,078:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BAFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:28,078:INFO:Checking exceptions
2025-03-14 21:44:28,078:INFO:Preloading libraries
2025-03-14 21:44:28,078:INFO:Set up data.
2025-03-14 21:44:28,081:INFO:Set up index.
2025-03-14 21:44:28,168:INFO:Initializing predict_model()
2025-03-14 21:44:28,168:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38290050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:28,168:INFO:Checking exceptions
2025-03-14 21:44:28,168:INFO:Preloading libraries
2025-03-14 21:44:28,168:INFO:Set up data.
2025-03-14 21:44:28,171:INFO:Set up index.
2025-03-14 21:44:28,257:INFO:Initializing predict_model()
2025-03-14 21:44:28,257:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51B3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:28,259:INFO:Checking exceptions
2025-03-14 21:44:28,259:INFO:Preloading libraries
2025-03-14 21:44:28,259:INFO:Set up data.
2025-03-14 21:44:28,260:INFO:Set up index.
2025-03-14 21:44:28,345:INFO:Initializing predict_model()
2025-03-14 21:44:28,345:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BBB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:28,345:INFO:Checking exceptions
2025-03-14 21:44:28,345:INFO:Preloading libraries
2025-03-14 21:44:28,345:INFO:Set up data.
2025-03-14 21:44:28,349:INFO:Set up index.
2025-03-14 21:44:28,434:INFO:Initializing predict_model()
2025-03-14 21:44:28,434:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369738D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:28,434:INFO:Checking exceptions
2025-03-14 21:44:28,434:INFO:Preloading libraries
2025-03-14 21:44:28,434:INFO:Set up data.
2025-03-14 21:44:28,437:INFO:Set up index.
2025-03-14 21:44:28,524:INFO:Initializing predict_model()
2025-03-14 21:44:28,524:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51A150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:28,524:INFO:Checking exceptions
2025-03-14 21:44:28,524:INFO:Preloading libraries
2025-03-14 21:44:28,524:INFO:Set up data.
2025-03-14 21:44:28,529:INFO:Set up index.
2025-03-14 21:44:28,616:INFO:Initializing predict_model()
2025-03-14 21:44:28,616:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EF0110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:28,616:INFO:Checking exceptions
2025-03-14 21:44:28,616:INFO:Preloading libraries
2025-03-14 21:44:28,618:INFO:Set up data.
2025-03-14 21:44:28,619:INFO:Set up index.
2025-03-14 21:44:28,705:INFO:Initializing predict_model()
2025-03-14 21:44:28,705:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38087690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:28,705:INFO:Checking exceptions
2025-03-14 21:44:28,705:INFO:Preloading libraries
2025-03-14 21:44:28,705:INFO:Set up data.
2025-03-14 21:44:28,708:INFO:Set up index.
2025-03-14 21:44:28,814:INFO:Initializing predict_model()
2025-03-14 21:44:28,814:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E0119DD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:28,814:INFO:Checking exceptions
2025-03-14 21:44:28,814:INFO:Preloading libraries
2025-03-14 21:44:28,814:INFO:Set up data.
2025-03-14 21:44:28,817:INFO:Set up index.
2025-03-14 21:44:28,902:INFO:Initializing predict_model()
2025-03-14 21:44:28,902:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E31F93BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:28,904:INFO:Checking exceptions
2025-03-14 21:44:28,904:INFO:Preloading libraries
2025-03-14 21:44:28,904:INFO:Set up data.
2025-03-14 21:44:28,905:INFO:Set up index.
2025-03-14 21:44:28,991:INFO:Initializing predict_model()
2025-03-14 21:44:28,993:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4592D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:28,993:INFO:Checking exceptions
2025-03-14 21:44:28,993:INFO:Preloading libraries
2025-03-14 21:44:28,993:INFO:Set up data.
2025-03-14 21:44:28,994:INFO:Set up index.
2025-03-14 21:44:29,080:INFO:Initializing predict_model()
2025-03-14 21:44:29,080:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:29,080:INFO:Checking exceptions
2025-03-14 21:44:29,080:INFO:Preloading libraries
2025-03-14 21:44:29,080:INFO:Set up data.
2025-03-14 21:44:29,083:INFO:Set up index.
2025-03-14 21:44:29,167:INFO:Initializing predict_model()
2025-03-14 21:44:29,167:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32536D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:29,167:INFO:Checking exceptions
2025-03-14 21:44:29,167:INFO:Preloading libraries
2025-03-14 21:44:29,167:INFO:Set up data.
2025-03-14 21:44:29,170:INFO:Set up index.
2025-03-14 21:44:29,258:INFO:Initializing predict_model()
2025-03-14 21:44:29,258:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:29,258:INFO:Checking exceptions
2025-03-14 21:44:29,258:INFO:Preloading libraries
2025-03-14 21:44:29,258:INFO:Set up data.
2025-03-14 21:44:29,261:INFO:Set up index.
2025-03-14 21:44:29,355:INFO:Initializing predict_model()
2025-03-14 21:44:29,355:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA68D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:29,355:INFO:Checking exceptions
2025-03-14 21:44:29,355:INFO:Preloading libraries
2025-03-14 21:44:29,355:INFO:Set up data.
2025-03-14 21:44:29,358:INFO:Set up index.
2025-03-14 21:44:29,465:INFO:Initializing predict_model()
2025-03-14 21:44:29,465:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEEE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:29,465:INFO:Checking exceptions
2025-03-14 21:44:29,465:INFO:Preloading libraries
2025-03-14 21:44:29,465:INFO:Set up data.
2025-03-14 21:44:29,473:INFO:Set up index.
2025-03-14 21:44:29,567:INFO:Initializing predict_model()
2025-03-14 21:44:29,567:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:29,567:INFO:Checking exceptions
2025-03-14 21:44:29,567:INFO:Preloading libraries
2025-03-14 21:44:29,567:INFO:Set up data.
2025-03-14 21:44:29,570:INFO:Set up index.
2025-03-14 21:44:29,655:INFO:Initializing predict_model()
2025-03-14 21:44:29,655:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36972010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:29,655:INFO:Checking exceptions
2025-03-14 21:44:29,655:INFO:Preloading libraries
2025-03-14 21:44:29,655:INFO:Set up data.
2025-03-14 21:44:29,658:INFO:Set up index.
2025-03-14 21:44:29,750:INFO:Initializing predict_model()
2025-03-14 21:44:29,750:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38292750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:29,750:INFO:Checking exceptions
2025-03-14 21:44:29,750:INFO:Preloading libraries
2025-03-14 21:44:29,750:INFO:Set up data.
2025-03-14 21:44:29,753:INFO:Set up index.
2025-03-14 21:44:29,850:INFO:Initializing predict_model()
2025-03-14 21:44:29,850:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B45B190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:29,850:INFO:Checking exceptions
2025-03-14 21:44:29,850:INFO:Preloading libraries
2025-03-14 21:44:29,850:INFO:Set up data.
2025-03-14 21:44:29,853:INFO:Set up index.
2025-03-14 21:44:29,941:INFO:Initializing predict_model()
2025-03-14 21:44:29,941:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:29,941:INFO:Checking exceptions
2025-03-14 21:44:29,941:INFO:Preloading libraries
2025-03-14 21:44:29,942:INFO:Set up data.
2025-03-14 21:44:29,944:INFO:Set up index.
2025-03-14 21:44:30,029:INFO:Initializing predict_model()
2025-03-14 21:44:30,029:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38291F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:30,029:INFO:Checking exceptions
2025-03-14 21:44:30,029:INFO:Preloading libraries
2025-03-14 21:44:30,031:INFO:Set up data.
2025-03-14 21:44:30,032:INFO:Set up index.
2025-03-14 21:44:30,142:INFO:Initializing predict_model()
2025-03-14 21:44:30,142:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819D250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:30,142:INFO:Checking exceptions
2025-03-14 21:44:30,142:INFO:Preloading libraries
2025-03-14 21:44:30,142:INFO:Set up data.
2025-03-14 21:44:30,145:INFO:Set up index.
2025-03-14 21:44:30,229:INFO:Initializing predict_model()
2025-03-14 21:44:30,229:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E369706D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:30,229:INFO:Checking exceptions
2025-03-14 21:44:30,229:INFO:Preloading libraries
2025-03-14 21:44:30,229:INFO:Set up data.
2025-03-14 21:44:30,232:INFO:Set up index.
2025-03-14 21:44:30,316:INFO:Initializing predict_model()
2025-03-14 21:44:30,318:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:30,318:INFO:Checking exceptions
2025-03-14 21:44:30,318:INFO:Preloading libraries
2025-03-14 21:44:30,318:INFO:Set up data.
2025-03-14 21:44:30,319:INFO:Set up index.
2025-03-14 21:44:30,405:INFO:Initializing predict_model()
2025-03-14 21:44:30,405:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38293A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:30,405:INFO:Checking exceptions
2025-03-14 21:44:30,405:INFO:Preloading libraries
2025-03-14 21:44:30,405:INFO:Set up data.
2025-03-14 21:44:30,408:INFO:Set up index.
2025-03-14 21:44:30,495:INFO:Initializing predict_model()
2025-03-14 21:44:30,495:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36B5B3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:30,495:INFO:Checking exceptions
2025-03-14 21:44:30,497:INFO:Preloading libraries
2025-03-14 21:44:30,497:INFO:Set up data.
2025-03-14 21:44:30,499:INFO:Set up index.
2025-03-14 21:44:30,584:INFO:Initializing predict_model()
2025-03-14 21:44:30,584:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819EF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:30,584:INFO:Checking exceptions
2025-03-14 21:44:30,584:INFO:Preloading libraries
2025-03-14 21:44:30,586:INFO:Set up data.
2025-03-14 21:44:30,587:INFO:Set up index.
2025-03-14 21:44:30,675:INFO:Initializing predict_model()
2025-03-14 21:44:30,675:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382906D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:30,675:INFO:Checking exceptions
2025-03-14 21:44:30,675:INFO:Preloading libraries
2025-03-14 21:44:30,675:INFO:Set up data.
2025-03-14 21:44:30,678:INFO:Set up index.
2025-03-14 21:44:30,769:INFO:Initializing predict_model()
2025-03-14 21:44:30,769:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696D090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:30,769:INFO:Checking exceptions
2025-03-14 21:44:30,769:INFO:Preloading libraries
2025-03-14 21:44:30,771:INFO:Set up data.
2025-03-14 21:44:30,772:INFO:Set up index.
2025-03-14 21:44:30,862:INFO:Initializing predict_model()
2025-03-14 21:44:30,862:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEE750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:30,862:INFO:Checking exceptions
2025-03-14 21:44:30,862:INFO:Preloading libraries
2025-03-14 21:44:30,862:INFO:Set up data.
2025-03-14 21:44:30,865:INFO:Set up index.
2025-03-14 21:44:30,953:INFO:Initializing predict_model()
2025-03-14 21:44:30,953:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BC7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:30,953:INFO:Checking exceptions
2025-03-14 21:44:30,953:INFO:Preloading libraries
2025-03-14 21:44:30,953:INFO:Set up data.
2025-03-14 21:44:30,957:INFO:Set up index.
2025-03-14 21:44:31,042:INFO:Initializing predict_model()
2025-03-14 21:44:31,042:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEE750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:31,042:INFO:Checking exceptions
2025-03-14 21:44:31,042:INFO:Preloading libraries
2025-03-14 21:44:31,042:INFO:Set up data.
2025-03-14 21:44:31,045:INFO:Set up index.
2025-03-14 21:44:31,131:INFO:Initializing predict_model()
2025-03-14 21:44:31,131:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEEC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:31,131:INFO:Checking exceptions
2025-03-14 21:44:31,131:INFO:Preloading libraries
2025-03-14 21:44:31,131:INFO:Set up data.
2025-03-14 21:44:31,134:INFO:Set up index.
2025-03-14 21:44:31,223:INFO:Initializing predict_model()
2025-03-14 21:44:31,223:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:31,223:INFO:Checking exceptions
2025-03-14 21:44:31,223:INFO:Preloading libraries
2025-03-14 21:44:31,223:INFO:Set up data.
2025-03-14 21:44:31,226:INFO:Set up index.
2025-03-14 21:44:31,329:INFO:Initializing predict_model()
2025-03-14 21:44:31,329:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:31,329:INFO:Checking exceptions
2025-03-14 21:44:31,329:INFO:Preloading libraries
2025-03-14 21:44:31,329:INFO:Set up data.
2025-03-14 21:44:31,332:INFO:Set up index.
2025-03-14 21:44:31,417:INFO:Initializing predict_model()
2025-03-14 21:44:31,417:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4EB610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:31,417:INFO:Checking exceptions
2025-03-14 21:44:31,417:INFO:Preloading libraries
2025-03-14 21:44:31,417:INFO:Set up data.
2025-03-14 21:44:31,420:INFO:Set up index.
2025-03-14 21:44:31,509:INFO:Initializing predict_model()
2025-03-14 21:44:31,509:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36970510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:31,509:INFO:Checking exceptions
2025-03-14 21:44:31,509:INFO:Preloading libraries
2025-03-14 21:44:31,509:INFO:Set up data.
2025-03-14 21:44:31,512:INFO:Set up index.
2025-03-14 21:44:31,596:INFO:Initializing predict_model()
2025-03-14 21:44:31,596:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819F190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:31,596:INFO:Checking exceptions
2025-03-14 21:44:31,596:INFO:Preloading libraries
2025-03-14 21:44:31,596:INFO:Set up data.
2025-03-14 21:44:31,600:INFO:Set up index.
2025-03-14 21:44:31,686:INFO:Initializing predict_model()
2025-03-14 21:44:31,686:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E31F93BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:31,686:INFO:Checking exceptions
2025-03-14 21:44:31,686:INFO:Preloading libraries
2025-03-14 21:44:31,686:INFO:Set up data.
2025-03-14 21:44:31,688:INFO:Set up index.
2025-03-14 21:44:31,777:INFO:Initializing predict_model()
2025-03-14 21:44:31,777:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEEE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:31,777:INFO:Checking exceptions
2025-03-14 21:44:31,777:INFO:Preloading libraries
2025-03-14 21:44:31,777:INFO:Set up data.
2025-03-14 21:44:31,780:INFO:Set up index.
2025-03-14 21:44:31,871:INFO:Initializing predict_model()
2025-03-14 21:44:31,871:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BB510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:31,873:INFO:Checking exceptions
2025-03-14 21:44:31,873:INFO:Preloading libraries
2025-03-14 21:44:31,873:INFO:Set up data.
2025-03-14 21:44:31,874:INFO:Set up index.
2025-03-14 21:44:31,961:INFO:Initializing predict_model()
2025-03-14 21:44:31,961:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38307750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:31,961:INFO:Checking exceptions
2025-03-14 21:44:31,961:INFO:Preloading libraries
2025-03-14 21:44:31,961:INFO:Set up data.
2025-03-14 21:44:31,966:INFO:Set up index.
2025-03-14 21:44:32,051:INFO:Initializing predict_model()
2025-03-14 21:44:32,051:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BA410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:32,051:INFO:Checking exceptions
2025-03-14 21:44:32,051:INFO:Preloading libraries
2025-03-14 21:44:32,051:INFO:Set up data.
2025-03-14 21:44:32,056:INFO:Set up index.
2025-03-14 21:44:32,145:INFO:Initializing predict_model()
2025-03-14 21:44:32,145:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BAFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:32,145:INFO:Checking exceptions
2025-03-14 21:44:32,145:INFO:Preloading libraries
2025-03-14 21:44:32,145:INFO:Set up data.
2025-03-14 21:44:32,147:INFO:Set up index.
2025-03-14 21:44:32,236:INFO:Initializing predict_model()
2025-03-14 21:44:32,236:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846F6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:32,236:INFO:Checking exceptions
2025-03-14 21:44:32,236:INFO:Preloading libraries
2025-03-14 21:44:32,236:INFO:Set up data.
2025-03-14 21:44:32,239:INFO:Set up index.
2025-03-14 21:44:32,326:INFO:Initializing predict_model()
2025-03-14 21:44:32,326:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382C0390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:32,326:INFO:Checking exceptions
2025-03-14 21:44:32,326:INFO:Preloading libraries
2025-03-14 21:44:32,326:INFO:Set up data.
2025-03-14 21:44:32,329:INFO:Set up index.
2025-03-14 21:44:32,417:INFO:Initializing predict_model()
2025-03-14 21:44:32,417:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E19FA38D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:32,417:INFO:Checking exceptions
2025-03-14 21:44:32,417:INFO:Preloading libraries
2025-03-14 21:44:32,419:INFO:Set up data.
2025-03-14 21:44:32,420:INFO:Set up index.
2025-03-14 21:44:32,508:INFO:Initializing predict_model()
2025-03-14 21:44:32,508:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B499F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:32,508:INFO:Checking exceptions
2025-03-14 21:44:32,508:INFO:Preloading libraries
2025-03-14 21:44:32,510:INFO:Set up data.
2025-03-14 21:44:32,511:INFO:Set up index.
2025-03-14 21:44:32,598:INFO:Initializing predict_model()
2025-03-14 21:44:32,598:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38349C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:32,598:INFO:Checking exceptions
2025-03-14 21:44:32,598:INFO:Preloading libraries
2025-03-14 21:44:32,598:INFO:Set up data.
2025-03-14 21:44:32,601:INFO:Set up index.
2025-03-14 21:44:32,697:INFO:Initializing predict_model()
2025-03-14 21:44:32,697:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E382C0510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:32,697:INFO:Checking exceptions
2025-03-14 21:44:32,697:INFO:Preloading libraries
2025-03-14 21:44:32,697:INFO:Set up data.
2025-03-14 21:44:32,699:INFO:Set up index.
2025-03-14 21:44:32,786:INFO:Initializing predict_model()
2025-03-14 21:44:32,786:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E0119C690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:32,786:INFO:Checking exceptions
2025-03-14 21:44:32,786:INFO:Preloading libraries
2025-03-14 21:44:32,786:INFO:Set up data.
2025-03-14 21:44:32,789:INFO:Set up index.
2025-03-14 21:44:32,883:INFO:Initializing predict_model()
2025-03-14 21:44:32,883:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4E8050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:32,883:INFO:Checking exceptions
2025-03-14 21:44:32,883:INFO:Preloading libraries
2025-03-14 21:44:32,883:INFO:Set up data.
2025-03-14 21:44:32,886:INFO:Set up index.
2025-03-14 21:44:32,979:INFO:Initializing predict_model()
2025-03-14 21:44:32,979:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B499F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:32,979:INFO:Checking exceptions
2025-03-14 21:44:32,979:INFO:Preloading libraries
2025-03-14 21:44:32,981:INFO:Set up data.
2025-03-14 21:44:32,983:INFO:Set up index.
2025-03-14 21:44:33,068:INFO:Initializing predict_model()
2025-03-14 21:44:33,068:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B4E8050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:33,068:INFO:Checking exceptions
2025-03-14 21:44:33,068:INFO:Preloading libraries
2025-03-14 21:44:33,068:INFO:Set up data.
2025-03-14 21:44:33,071:INFO:Set up index.
2025-03-14 21:44:33,163:INFO:Initializing predict_model()
2025-03-14 21:44:33,163:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3696F790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:33,163:INFO:Checking exceptions
2025-03-14 21:44:33,163:INFO:Preloading libraries
2025-03-14 21:44:33,163:INFO:Set up data.
2025-03-14 21:44:33,166:INFO:Set up index.
2025-03-14 21:44:33,252:INFO:Initializing predict_model()
2025-03-14 21:44:33,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E34E4F710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:33,254:INFO:Checking exceptions
2025-03-14 21:44:33,254:INFO:Preloading libraries
2025-03-14 21:44:33,254:INFO:Set up data.
2025-03-14 21:44:33,255:INFO:Set up index.
2025-03-14 21:44:33,350:INFO:Initializing predict_model()
2025-03-14 21:44:33,350:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:33,350:INFO:Checking exceptions
2025-03-14 21:44:33,350:INFO:Preloading libraries
2025-03-14 21:44:33,350:INFO:Set up data.
2025-03-14 21:44:33,354:INFO:Set up index.
2025-03-14 21:44:33,437:INFO:Initializing predict_model()
2025-03-14 21:44:33,437:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36974A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:33,437:INFO:Checking exceptions
2025-03-14 21:44:33,437:INFO:Preloading libraries
2025-03-14 21:44:33,437:INFO:Set up data.
2025-03-14 21:44:33,440:INFO:Set up index.
2025-03-14 21:44:33,528:INFO:Initializing predict_model()
2025-03-14 21:44:33,528:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38293A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:33,528:INFO:Checking exceptions
2025-03-14 21:44:33,530:INFO:Preloading libraries
2025-03-14 21:44:33,530:INFO:Set up data.
2025-03-14 21:44:33,534:INFO:Set up index.
2025-03-14 21:44:33,638:INFO:Initializing predict_model()
2025-03-14 21:44:33,638:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E0119CD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:33,638:INFO:Checking exceptions
2025-03-14 21:44:33,638:INFO:Preloading libraries
2025-03-14 21:44:33,638:INFO:Set up data.
2025-03-14 21:44:33,641:INFO:Set up index.
2025-03-14 21:44:33,728:INFO:Initializing predict_model()
2025-03-14 21:44:33,730:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E01C74050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:33,730:INFO:Checking exceptions
2025-03-14 21:44:33,730:INFO:Preloading libraries
2025-03-14 21:44:33,730:INFO:Set up data.
2025-03-14 21:44:33,731:INFO:Set up index.
2025-03-14 21:44:33,825:INFO:Initializing predict_model()
2025-03-14 21:44:33,825:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36974A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:33,825:INFO:Checking exceptions
2025-03-14 21:44:33,825:INFO:Preloading libraries
2025-03-14 21:44:33,827:INFO:Set up data.
2025-03-14 21:44:33,828:INFO:Set up index.
2025-03-14 21:44:33,923:INFO:Initializing predict_model()
2025-03-14 21:44:33,923:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEEF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:33,923:INFO:Checking exceptions
2025-03-14 21:44:33,923:INFO:Preloading libraries
2025-03-14 21:44:33,923:INFO:Set up data.
2025-03-14 21:44:33,926:INFO:Set up index.
2025-03-14 21:44:34,011:INFO:Initializing predict_model()
2025-03-14 21:44:34,011:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32537B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:34,011:INFO:Checking exceptions
2025-03-14 21:44:34,011:INFO:Preloading libraries
2025-03-14 21:44:34,011:INFO:Set up data.
2025-03-14 21:44:34,014:INFO:Set up index.
2025-03-14 21:44:34,100:INFO:Initializing predict_model()
2025-03-14 21:44:34,100:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E384BCF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:34,100:INFO:Checking exceptions
2025-03-14 21:44:34,100:INFO:Preloading libraries
2025-03-14 21:44:34,100:INFO:Set up data.
2025-03-14 21:44:34,103:INFO:Set up index.
2025-03-14 21:44:34,191:INFO:Initializing predict_model()
2025-03-14 21:44:34,191:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38186610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:34,191:INFO:Checking exceptions
2025-03-14 21:44:34,191:INFO:Preloading libraries
2025-03-14 21:44:34,191:INFO:Set up data.
2025-03-14 21:44:34,194:INFO:Set up index.
2025-03-14 21:44:34,290:INFO:Initializing predict_model()
2025-03-14 21:44:34,290:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B519410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:34,290:INFO:Checking exceptions
2025-03-14 21:44:34,290:INFO:Preloading libraries
2025-03-14 21:44:34,292:INFO:Set up data.
2025-03-14 21:44:34,295:INFO:Set up index.
2025-03-14 21:44:34,389:INFO:Initializing predict_model()
2025-03-14 21:44:34,389:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36973C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:34,389:INFO:Checking exceptions
2025-03-14 21:44:34,389:INFO:Preloading libraries
2025-03-14 21:44:34,389:INFO:Set up data.
2025-03-14 21:44:34,390:INFO:Set up index.
2025-03-14 21:44:34,478:INFO:Initializing predict_model()
2025-03-14 21:44:34,479:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E38086D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:34,479:INFO:Checking exceptions
2025-03-14 21:44:34,479:INFO:Preloading libraries
2025-03-14 21:44:34,479:INFO:Set up data.
2025-03-14 21:44:34,481:INFO:Set up index.
2025-03-14 21:44:34,566:INFO:Initializing predict_model()
2025-03-14 21:44:34,566:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E32386150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:34,566:INFO:Checking exceptions
2025-03-14 21:44:34,566:INFO:Preloading libraries
2025-03-14 21:44:34,566:INFO:Set up data.
2025-03-14 21:44:34,569:INFO:Set up index.
2025-03-14 21:44:34,654:INFO:Initializing predict_model()
2025-03-14 21:44:34,654:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51B2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:34,654:INFO:Checking exceptions
2025-03-14 21:44:34,654:INFO:Preloading libraries
2025-03-14 21:44:34,654:INFO:Set up data.
2025-03-14 21:44:34,657:INFO:Set up index.
2025-03-14 21:44:34,746:INFO:Initializing predict_model()
2025-03-14 21:44:34,746:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36EEE810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:34,746:INFO:Checking exceptions
2025-03-14 21:44:34,746:INFO:Preloading libraries
2025-03-14 21:44:34,746:INFO:Set up data.
2025-03-14 21:44:34,749:INFO:Set up index.
2025-03-14 21:44:34,839:INFO:Initializing predict_model()
2025-03-14 21:44:34,840:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E36972010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:34,840:INFO:Checking exceptions
2025-03-14 21:44:34,840:INFO:Preloading libraries
2025-03-14 21:44:34,840:INFO:Set up data.
2025-03-14 21:44:34,843:INFO:Set up index.
2025-03-14 21:44:34,937:INFO:Initializing predict_model()
2025-03-14 21:44:34,937:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3846FF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:34,937:INFO:Checking exceptions
2025-03-14 21:44:34,937:INFO:Preloading libraries
2025-03-14 21:44:34,937:INFO:Set up data.
2025-03-14 21:44:34,940:INFO:Set up index.
2025-03-14 21:44:35,025:INFO:Initializing predict_model()
2025-03-14 21:44:35,025:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E3819C850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:35,025:INFO:Checking exceptions
2025-03-14 21:44:35,025:INFO:Preloading libraries
2025-03-14 21:44:35,025:INFO:Set up data.
2025-03-14 21:44:35,026:INFO:Set up index.
2025-03-14 21:44:35,113:INFO:Initializing predict_model()
2025-03-14 21:44:35,113:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381BB0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E7D8F2DE0>)
2025-03-14 21:44:35,113:INFO:Checking exceptions
2025-03-14 21:44:35,113:INFO:Preloading libraries
2025-03-14 21:44:35,113:INFO:Set up data.
2025-03-14 21:44:35,116:INFO:Set up index.
2025-03-14 21:44:35,201:INFO:Initializing predict_model()
2025-03-14 21:44:35,201:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E1B51B2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E3251F6A0>)
2025-03-14 21:44:35,201:INFO:Checking exceptions
2025-03-14 21:44:35,201:INFO:Preloading libraries
2025-03-14 21:44:35,201:INFO:Set up data.
2025-03-14 21:44:35,204:INFO:Set up index.
2025-03-14 21:44:35,296:INFO:Initializing predict_model()
2025-03-14 21:44:35,296:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000021E381B9750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 VotingRegressor(estimators=[('AdaBoost Regressor',
                                              AdaBoostRegressor(random_state=123)),
                                             ('Decision Tree Regressor',
                                              DecisionTreeRegressor(random_state=123))],
                                 n_jobs=-1))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000021E1B5887C0>)
2025-03-14 21:44:35,296:INFO:Checking exceptions
2025-03-14 21:44:35,296:INFO:Preloading libraries
2025-03-14 21:44:35,296:INFO:Set up data.
2025-03-14 21:44:35,299:INFO:Set up index.
