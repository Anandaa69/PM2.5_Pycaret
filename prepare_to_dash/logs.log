2025-03-16 02:40:21,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 02:40:21,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 02:40:21,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 02:40:21,812:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 02:40:21,953:INFO:Initializing load_model()
2025-03-16 02:40:21,953:INFO:load_model(model_name=../eng_psu_hatyai/main/lgmb_temp_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 02:40:34,347:INFO:Initializing load_model()
2025-03-16 02:40:34,347:INFO:load_model(model_name=../eng_psu_hatyai/main/lgmb_temp_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 02:40:34,483:INFO:Initializing predict_model()
2025-03-16 02:40:34,483:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F141490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:34,483:INFO:Checking exceptions
2025-03-16 02:40:34,483:INFO:Preloading libraries
2025-03-16 02:40:34,483:INFO:Set up data.
2025-03-16 02:40:34,487:INFO:Set up index.
2025-03-16 02:40:34,601:INFO:Initializing predict_model()
2025-03-16 02:40:34,602:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DDB4FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:34,602:INFO:Checking exceptions
2025-03-16 02:40:34,602:INFO:Preloading libraries
2025-03-16 02:40:34,602:INFO:Set up data.
2025-03-16 02:40:34,611:INFO:Set up index.
2025-03-16 02:40:34,712:INFO:Initializing predict_model()
2025-03-16 02:40:34,712:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F2C5910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:34,712:INFO:Checking exceptions
2025-03-16 02:40:34,712:INFO:Preloading libraries
2025-03-16 02:40:34,712:INFO:Set up data.
2025-03-16 02:40:34,717:INFO:Set up index.
2025-03-16 02:40:34,820:INFO:Initializing predict_model()
2025-03-16 02:40:34,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D389350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:34,820:INFO:Checking exceptions
2025-03-16 02:40:34,820:INFO:Preloading libraries
2025-03-16 02:40:34,820:INFO:Set up data.
2025-03-16 02:40:34,824:INFO:Set up index.
2025-03-16 02:40:34,927:INFO:Initializing predict_model()
2025-03-16 02:40:34,927:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD68FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:34,927:INFO:Checking exceptions
2025-03-16 02:40:34,927:INFO:Preloading libraries
2025-03-16 02:40:34,927:INFO:Set up data.
2025-03-16 02:40:34,932:INFO:Set up index.
2025-03-16 02:40:35,036:INFO:Initializing predict_model()
2025-03-16 02:40:35,036:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022723A3A890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,036:INFO:Checking exceptions
2025-03-16 02:40:35,036:INFO:Preloading libraries
2025-03-16 02:40:35,036:INFO:Set up data.
2025-03-16 02:40:35,040:INFO:Set up index.
2025-03-16 02:40:35,142:INFO:Initializing predict_model()
2025-03-16 02:40:35,142:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B0E4DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,142:INFO:Checking exceptions
2025-03-16 02:40:35,142:INFO:Preloading libraries
2025-03-16 02:40:35,142:INFO:Set up data.
2025-03-16 02:40:35,147:INFO:Set up index.
2025-03-16 02:40:35,235:INFO:Initializing predict_model()
2025-03-16 02:40:35,235:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F16CDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,235:INFO:Checking exceptions
2025-03-16 02:40:35,235:INFO:Preloading libraries
2025-03-16 02:40:35,235:INFO:Set up data.
2025-03-16 02:40:35,239:INFO:Set up index.
2025-03-16 02:40:35,331:INFO:Initializing predict_model()
2025-03-16 02:40:35,331:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B52BC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,331:INFO:Checking exceptions
2025-03-16 02:40:35,331:INFO:Preloading libraries
2025-03-16 02:40:35,331:INFO:Set up data.
2025-03-16 02:40:35,335:INFO:Set up index.
2025-03-16 02:40:35,421:INFO:Initializing predict_model()
2025-03-16 02:40:35,421:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC699D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,421:INFO:Checking exceptions
2025-03-16 02:40:35,421:INFO:Preloading libraries
2025-03-16 02:40:35,421:INFO:Set up data.
2025-03-16 02:40:35,426:INFO:Set up index.
2025-03-16 02:40:35,510:INFO:Initializing predict_model()
2025-03-16 02:40:35,510:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC7D810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,510:INFO:Checking exceptions
2025-03-16 02:40:35,510:INFO:Preloading libraries
2025-03-16 02:40:35,510:INFO:Set up data.
2025-03-16 02:40:35,515:INFO:Set up index.
2025-03-16 02:40:35,602:INFO:Initializing predict_model()
2025-03-16 02:40:35,602:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD69890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,602:INFO:Checking exceptions
2025-03-16 02:40:35,602:INFO:Preloading libraries
2025-03-16 02:40:35,602:INFO:Set up data.
2025-03-16 02:40:35,607:INFO:Set up index.
2025-03-16 02:40:35,691:INFO:Initializing predict_model()
2025-03-16 02:40:35,691:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270A254090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,691:INFO:Checking exceptions
2025-03-16 02:40:35,691:INFO:Preloading libraries
2025-03-16 02:40:35,691:INFO:Set up data.
2025-03-16 02:40:35,694:INFO:Set up index.
2025-03-16 02:40:35,775:INFO:Initializing predict_model()
2025-03-16 02:40:35,775:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC6BB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,775:INFO:Checking exceptions
2025-03-16 02:40:35,775:INFO:Preloading libraries
2025-03-16 02:40:35,776:INFO:Set up data.
2025-03-16 02:40:35,779:INFO:Set up index.
2025-03-16 02:40:35,860:INFO:Initializing predict_model()
2025-03-16 02:40:35,860:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F757A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,860:INFO:Checking exceptions
2025-03-16 02:40:35,860:INFO:Preloading libraries
2025-03-16 02:40:35,860:INFO:Set up data.
2025-03-16 02:40:35,865:INFO:Set up index.
2025-03-16 02:40:35,945:INFO:Initializing predict_model()
2025-03-16 02:40:35,945:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B05B490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:35,945:INFO:Checking exceptions
2025-03-16 02:40:35,945:INFO:Preloading libraries
2025-03-16 02:40:35,945:INFO:Set up data.
2025-03-16 02:40:35,949:INFO:Set up index.
2025-03-16 02:40:36,030:INFO:Initializing predict_model()
2025-03-16 02:40:36,030:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002272388FC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,030:INFO:Checking exceptions
2025-03-16 02:40:36,030:INFO:Preloading libraries
2025-03-16 02:40:36,032:INFO:Set up data.
2025-03-16 02:40:36,035:INFO:Set up index.
2025-03-16 02:40:36,117:INFO:Initializing predict_model()
2025-03-16 02:40:36,117:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC7CED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,117:INFO:Checking exceptions
2025-03-16 02:40:36,117:INFO:Preloading libraries
2025-03-16 02:40:36,117:INFO:Set up data.
2025-03-16 02:40:36,121:INFO:Set up index.
2025-03-16 02:40:36,204:INFO:Initializing predict_model()
2025-03-16 02:40:36,204:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC04BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,204:INFO:Checking exceptions
2025-03-16 02:40:36,204:INFO:Preloading libraries
2025-03-16 02:40:36,204:INFO:Set up data.
2025-03-16 02:40:36,208:INFO:Set up index.
2025-03-16 02:40:36,288:INFO:Initializing predict_model()
2025-03-16 02:40:36,288:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270BED0990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,288:INFO:Checking exceptions
2025-03-16 02:40:36,288:INFO:Preloading libraries
2025-03-16 02:40:36,288:INFO:Set up data.
2025-03-16 02:40:36,291:INFO:Set up index.
2025-03-16 02:40:36,374:INFO:Initializing predict_model()
2025-03-16 02:40:36,374:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F893B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,374:INFO:Checking exceptions
2025-03-16 02:40:36,374:INFO:Preloading libraries
2025-03-16 02:40:36,375:INFO:Set up data.
2025-03-16 02:40:36,377:INFO:Set up index.
2025-03-16 02:40:36,459:INFO:Initializing predict_model()
2025-03-16 02:40:36,459:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC7DAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,459:INFO:Checking exceptions
2025-03-16 02:40:36,459:INFO:Preloading libraries
2025-03-16 02:40:36,460:INFO:Set up data.
2025-03-16 02:40:36,463:INFO:Set up index.
2025-03-16 02:40:36,544:INFO:Initializing predict_model()
2025-03-16 02:40:36,544:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F141650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,544:INFO:Checking exceptions
2025-03-16 02:40:36,544:INFO:Preloading libraries
2025-03-16 02:40:36,544:INFO:Set up data.
2025-03-16 02:40:36,547:INFO:Set up index.
2025-03-16 02:40:36,635:INFO:Initializing predict_model()
2025-03-16 02:40:36,635:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD68A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,635:INFO:Checking exceptions
2025-03-16 02:40:36,635:INFO:Preloading libraries
2025-03-16 02:40:36,635:INFO:Set up data.
2025-03-16 02:40:36,639:INFO:Set up index.
2025-03-16 02:40:36,734:INFO:Initializing predict_model()
2025-03-16 02:40:36,734:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B1EC2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,734:INFO:Checking exceptions
2025-03-16 02:40:36,734:INFO:Preloading libraries
2025-03-16 02:40:36,734:INFO:Set up data.
2025-03-16 02:40:36,738:INFO:Set up index.
2025-03-16 02:40:36,822:INFO:Initializing predict_model()
2025-03-16 02:40:36,823:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD4FD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,823:INFO:Checking exceptions
2025-03-16 02:40:36,823:INFO:Preloading libraries
2025-03-16 02:40:36,823:INFO:Set up data.
2025-03-16 02:40:36,826:INFO:Set up index.
2025-03-16 02:40:36,911:INFO:Initializing predict_model()
2025-03-16 02:40:36,911:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD40810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,911:INFO:Checking exceptions
2025-03-16 02:40:36,911:INFO:Preloading libraries
2025-03-16 02:40:36,911:INFO:Set up data.
2025-03-16 02:40:36,915:INFO:Set up index.
2025-03-16 02:40:36,997:INFO:Initializing predict_model()
2025-03-16 02:40:36,997:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD35610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:36,997:INFO:Checking exceptions
2025-03-16 02:40:36,997:INFO:Preloading libraries
2025-03-16 02:40:36,997:INFO:Set up data.
2025-03-16 02:40:37,002:INFO:Set up index.
2025-03-16 02:40:37,087:INFO:Initializing predict_model()
2025-03-16 02:40:37,088:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022723A39490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,088:INFO:Checking exceptions
2025-03-16 02:40:37,088:INFO:Preloading libraries
2025-03-16 02:40:37,088:INFO:Set up data.
2025-03-16 02:40:37,091:INFO:Set up index.
2025-03-16 02:40:37,173:INFO:Initializing predict_model()
2025-03-16 02:40:37,173:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DDCC050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,173:INFO:Checking exceptions
2025-03-16 02:40:37,173:INFO:Preloading libraries
2025-03-16 02:40:37,174:INFO:Set up data.
2025-03-16 02:40:37,177:INFO:Set up index.
2025-03-16 02:40:37,258:INFO:Initializing predict_model()
2025-03-16 02:40:37,258:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002272332C490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,258:INFO:Checking exceptions
2025-03-16 02:40:37,258:INFO:Preloading libraries
2025-03-16 02:40:37,258:INFO:Set up data.
2025-03-16 02:40:37,262:INFO:Set up index.
2025-03-16 02:40:37,344:INFO:Initializing predict_model()
2025-03-16 02:40:37,344:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FCE7B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,344:INFO:Checking exceptions
2025-03-16 02:40:37,344:INFO:Preloading libraries
2025-03-16 02:40:37,344:INFO:Set up data.
2025-03-16 02:40:37,347:INFO:Set up index.
2025-03-16 02:40:37,432:INFO:Initializing predict_model()
2025-03-16 02:40:37,432:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD35B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,432:INFO:Checking exceptions
2025-03-16 02:40:37,432:INFO:Preloading libraries
2025-03-16 02:40:37,432:INFO:Set up data.
2025-03-16 02:40:37,436:INFO:Set up index.
2025-03-16 02:40:37,518:INFO:Initializing predict_model()
2025-03-16 02:40:37,518:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD42A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,518:INFO:Checking exceptions
2025-03-16 02:40:37,518:INFO:Preloading libraries
2025-03-16 02:40:37,518:INFO:Set up data.
2025-03-16 02:40:37,521:INFO:Set up index.
2025-03-16 02:40:37,599:INFO:Initializing predict_model()
2025-03-16 02:40:37,599:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F1EB5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,599:INFO:Checking exceptions
2025-03-16 02:40:37,599:INFO:Preloading libraries
2025-03-16 02:40:37,599:INFO:Set up data.
2025-03-16 02:40:37,602:INFO:Set up index.
2025-03-16 02:40:37,680:INFO:Initializing predict_model()
2025-03-16 02:40:37,680:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD16850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,680:INFO:Checking exceptions
2025-03-16 02:40:37,680:INFO:Preloading libraries
2025-03-16 02:40:37,680:INFO:Set up data.
2025-03-16 02:40:37,683:INFO:Set up index.
2025-03-16 02:40:37,762:INFO:Initializing predict_model()
2025-03-16 02:40:37,762:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F081590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,762:INFO:Checking exceptions
2025-03-16 02:40:37,762:INFO:Preloading libraries
2025-03-16 02:40:37,762:INFO:Set up data.
2025-03-16 02:40:37,767:INFO:Set up index.
2025-03-16 02:40:37,843:INFO:Initializing predict_model()
2025-03-16 02:40:37,843:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F893B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,843:INFO:Checking exceptions
2025-03-16 02:40:37,843:INFO:Preloading libraries
2025-03-16 02:40:37,843:INFO:Set up data.
2025-03-16 02:40:37,848:INFO:Set up index.
2025-03-16 02:40:37,926:INFO:Initializing predict_model()
2025-03-16 02:40:37,926:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B0AD490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:37,926:INFO:Checking exceptions
2025-03-16 02:40:37,926:INFO:Preloading libraries
2025-03-16 02:40:37,926:INFO:Set up data.
2025-03-16 02:40:37,929:INFO:Set up index.
2025-03-16 02:40:38,007:INFO:Initializing predict_model()
2025-03-16 02:40:38,007:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022723A39490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,007:INFO:Checking exceptions
2025-03-16 02:40:38,007:INFO:Preloading libraries
2025-03-16 02:40:38,007:INFO:Set up data.
2025-03-16 02:40:38,010:INFO:Set up index.
2025-03-16 02:40:38,088:INFO:Initializing predict_model()
2025-03-16 02:40:38,088:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F757990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,088:INFO:Checking exceptions
2025-03-16 02:40:38,088:INFO:Preloading libraries
2025-03-16 02:40:38,088:INFO:Set up data.
2025-03-16 02:40:38,092:INFO:Set up index.
2025-03-16 02:40:38,169:INFO:Initializing predict_model()
2025-03-16 02:40:38,169:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F141650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,169:INFO:Checking exceptions
2025-03-16 02:40:38,169:INFO:Preloading libraries
2025-03-16 02:40:38,170:INFO:Set up data.
2025-03-16 02:40:38,173:INFO:Set up index.
2025-03-16 02:40:38,254:INFO:Initializing predict_model()
2025-03-16 02:40:38,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD16250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,254:INFO:Checking exceptions
2025-03-16 02:40:38,254:INFO:Preloading libraries
2025-03-16 02:40:38,255:INFO:Set up data.
2025-03-16 02:40:38,257:INFO:Set up index.
2025-03-16 02:40:38,338:INFO:Initializing predict_model()
2025-03-16 02:40:38,338:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B1EC2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,338:INFO:Checking exceptions
2025-03-16 02:40:38,338:INFO:Preloading libraries
2025-03-16 02:40:38,338:INFO:Set up data.
2025-03-16 02:40:38,341:INFO:Set up index.
2025-03-16 02:40:38,419:INFO:Initializing predict_model()
2025-03-16 02:40:38,419:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B0BF8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,419:INFO:Checking exceptions
2025-03-16 02:40:38,419:INFO:Preloading libraries
2025-03-16 02:40:38,419:INFO:Set up data.
2025-03-16 02:40:38,422:INFO:Set up index.
2025-03-16 02:40:38,502:INFO:Initializing predict_model()
2025-03-16 02:40:38,502:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F2C5B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,502:INFO:Checking exceptions
2025-03-16 02:40:38,502:INFO:Preloading libraries
2025-03-16 02:40:38,502:INFO:Set up data.
2025-03-16 02:40:38,504:INFO:Set up index.
2025-03-16 02:40:38,589:INFO:Initializing predict_model()
2025-03-16 02:40:38,591:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD176D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,591:INFO:Checking exceptions
2025-03-16 02:40:38,591:INFO:Preloading libraries
2025-03-16 02:40:38,591:INFO:Set up data.
2025-03-16 02:40:38,595:INFO:Set up index.
2025-03-16 02:40:38,679:INFO:Initializing predict_model()
2025-03-16 02:40:38,679:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F756850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,679:INFO:Checking exceptions
2025-03-16 02:40:38,679:INFO:Preloading libraries
2025-03-16 02:40:38,679:INFO:Set up data.
2025-03-16 02:40:38,683:INFO:Set up index.
2025-03-16 02:40:38,762:INFO:Initializing predict_model()
2025-03-16 02:40:38,762:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD176D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,762:INFO:Checking exceptions
2025-03-16 02:40:38,762:INFO:Preloading libraries
2025-03-16 02:40:38,762:INFO:Set up data.
2025-03-16 02:40:38,765:INFO:Set up index.
2025-03-16 02:40:38,849:INFO:Initializing predict_model()
2025-03-16 02:40:38,849:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD4C6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,849:INFO:Checking exceptions
2025-03-16 02:40:38,849:INFO:Preloading libraries
2025-03-16 02:40:38,849:INFO:Set up data.
2025-03-16 02:40:38,852:INFO:Set up index.
2025-03-16 02:40:38,934:INFO:Initializing predict_model()
2025-03-16 02:40:38,934:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD35950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:38,934:INFO:Checking exceptions
2025-03-16 02:40:38,934:INFO:Preloading libraries
2025-03-16 02:40:38,934:INFO:Set up data.
2025-03-16 02:40:38,939:INFO:Set up index.
2025-03-16 02:40:39,017:INFO:Initializing predict_model()
2025-03-16 02:40:39,017:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD40850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,017:INFO:Checking exceptions
2025-03-16 02:40:39,017:INFO:Preloading libraries
2025-03-16 02:40:39,018:INFO:Set up data.
2025-03-16 02:40:39,021:INFO:Set up index.
2025-03-16 02:40:39,099:INFO:Initializing predict_model()
2025-03-16 02:40:39,099:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD16410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,099:INFO:Checking exceptions
2025-03-16 02:40:39,099:INFO:Preloading libraries
2025-03-16 02:40:39,099:INFO:Set up data.
2025-03-16 02:40:39,104:INFO:Set up index.
2025-03-16 02:40:39,183:INFO:Initializing predict_model()
2025-03-16 02:40:39,184:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD4D310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,184:INFO:Checking exceptions
2025-03-16 02:40:39,184:INFO:Preloading libraries
2025-03-16 02:40:39,184:INFO:Set up data.
2025-03-16 02:40:39,188:INFO:Set up index.
2025-03-16 02:40:39,265:INFO:Initializing predict_model()
2025-03-16 02:40:39,265:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F0C2710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,266:INFO:Checking exceptions
2025-03-16 02:40:39,266:INFO:Preloading libraries
2025-03-16 02:40:39,266:INFO:Set up data.
2025-03-16 02:40:39,269:INFO:Set up index.
2025-03-16 02:40:39,347:INFO:Initializing predict_model()
2025-03-16 02:40:39,347:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F2C5910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,347:INFO:Checking exceptions
2025-03-16 02:40:39,347:INFO:Preloading libraries
2025-03-16 02:40:39,347:INFO:Set up data.
2025-03-16 02:40:39,350:INFO:Set up index.
2025-03-16 02:40:39,440:INFO:Initializing predict_model()
2025-03-16 02:40:39,440:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002272363B7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,440:INFO:Checking exceptions
2025-03-16 02:40:39,440:INFO:Preloading libraries
2025-03-16 02:40:39,440:INFO:Set up data.
2025-03-16 02:40:39,445:INFO:Set up index.
2025-03-16 02:40:39,525:INFO:Initializing predict_model()
2025-03-16 02:40:39,525:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F082C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,525:INFO:Checking exceptions
2025-03-16 02:40:39,525:INFO:Preloading libraries
2025-03-16 02:40:39,525:INFO:Set up data.
2025-03-16 02:40:39,528:INFO:Set up index.
2025-03-16 02:40:39,615:INFO:Initializing predict_model()
2025-03-16 02:40:39,615:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC07BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,615:INFO:Checking exceptions
2025-03-16 02:40:39,615:INFO:Preloading libraries
2025-03-16 02:40:39,615:INFO:Set up data.
2025-03-16 02:40:39,619:INFO:Set up index.
2025-03-16 02:40:39,705:INFO:Initializing predict_model()
2025-03-16 02:40:39,705:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC05BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,705:INFO:Checking exceptions
2025-03-16 02:40:39,705:INFO:Preloading libraries
2025-03-16 02:40:39,705:INFO:Set up data.
2025-03-16 02:40:39,709:INFO:Set up index.
2025-03-16 02:40:39,797:INFO:Initializing predict_model()
2025-03-16 02:40:39,797:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD29F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,797:INFO:Checking exceptions
2025-03-16 02:40:39,797:INFO:Preloading libraries
2025-03-16 02:40:39,797:INFO:Set up data.
2025-03-16 02:40:39,801:INFO:Set up index.
2025-03-16 02:40:39,886:INFO:Initializing predict_model()
2025-03-16 02:40:39,886:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DB7EAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,886:INFO:Checking exceptions
2025-03-16 02:40:39,886:INFO:Preloading libraries
2025-03-16 02:40:39,886:INFO:Set up data.
2025-03-16 02:40:39,890:INFO:Set up index.
2025-03-16 02:40:39,978:INFO:Initializing predict_model()
2025-03-16 02:40:39,978:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F14C410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:39,978:INFO:Checking exceptions
2025-03-16 02:40:39,978:INFO:Preloading libraries
2025-03-16 02:40:39,978:INFO:Set up data.
2025-03-16 02:40:39,981:INFO:Set up index.
2025-03-16 02:40:40,063:INFO:Initializing predict_model()
2025-03-16 02:40:40,063:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F14E410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:40,063:INFO:Checking exceptions
2025-03-16 02:40:40,063:INFO:Preloading libraries
2025-03-16 02:40:40,063:INFO:Set up data.
2025-03-16 02:40:40,067:INFO:Set up index.
2025-03-16 02:40:40,152:INFO:Initializing predict_model()
2025-03-16 02:40:40,152:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC3D050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:40,152:INFO:Checking exceptions
2025-03-16 02:40:40,152:INFO:Preloading libraries
2025-03-16 02:40:40,152:INFO:Set up data.
2025-03-16 02:40:40,157:INFO:Set up index.
2025-03-16 02:40:40,247:INFO:Initializing predict_model()
2025-03-16 02:40:40,247:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B1E3B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:40,247:INFO:Checking exceptions
2025-03-16 02:40:40,247:INFO:Preloading libraries
2025-03-16 02:40:40,247:INFO:Set up data.
2025-03-16 02:40:40,252:INFO:Set up index.
2025-03-16 02:40:40,364:INFO:Initializing predict_model()
2025-03-16 02:40:40,364:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC7D250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:40,364:INFO:Checking exceptions
2025-03-16 02:40:40,364:INFO:Preloading libraries
2025-03-16 02:40:40,364:INFO:Set up data.
2025-03-16 02:40:40,368:INFO:Set up index.
2025-03-16 02:40:40,459:INFO:Initializing predict_model()
2025-03-16 02:40:40,460:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F01DA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:40,460:INFO:Checking exceptions
2025-03-16 02:40:40,460:INFO:Preloading libraries
2025-03-16 02:40:40,460:INFO:Set up data.
2025-03-16 02:40:40,463:INFO:Set up index.
2025-03-16 02:40:40,556:INFO:Initializing predict_model()
2025-03-16 02:40:40,556:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FBE6390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:40,556:INFO:Checking exceptions
2025-03-16 02:40:40,556:INFO:Preloading libraries
2025-03-16 02:40:40,556:INFO:Set up data.
2025-03-16 02:40:40,560:INFO:Set up index.
2025-03-16 02:40:40,652:INFO:Initializing predict_model()
2025-03-16 02:40:40,652:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B0BF8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:40,652:INFO:Checking exceptions
2025-03-16 02:40:40,652:INFO:Preloading libraries
2025-03-16 02:40:40,652:INFO:Set up data.
2025-03-16 02:40:40,655:INFO:Set up index.
2025-03-16 02:40:40,740:INFO:Initializing predict_model()
2025-03-16 02:40:40,740:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC7CDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:40,740:INFO:Checking exceptions
2025-03-16 02:40:40,740:INFO:Preloading libraries
2025-03-16 02:40:40,740:INFO:Set up data.
2025-03-16 02:40:40,746:INFO:Set up index.
2025-03-16 02:40:40,831:INFO:Initializing predict_model()
2025-03-16 02:40:40,831:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC6AF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:40,831:INFO:Checking exceptions
2025-03-16 02:40:40,831:INFO:Preloading libraries
2025-03-16 02:40:40,831:INFO:Set up data.
2025-03-16 02:40:40,835:INFO:Set up index.
2025-03-16 02:40:40,917:INFO:Initializing predict_model()
2025-03-16 02:40:40,917:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD40310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:40,917:INFO:Checking exceptions
2025-03-16 02:40:40,917:INFO:Preloading libraries
2025-03-16 02:40:40,917:INFO:Set up data.
2025-03-16 02:40:40,920:INFO:Set up index.
2025-03-16 02:40:41,003:INFO:Initializing predict_model()
2025-03-16 02:40:41,003:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD4CF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,003:INFO:Checking exceptions
2025-03-16 02:40:41,003:INFO:Preloading libraries
2025-03-16 02:40:41,003:INFO:Set up data.
2025-03-16 02:40:41,007:INFO:Set up index.
2025-03-16 02:40:41,089:INFO:Initializing predict_model()
2025-03-16 02:40:41,091:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD40710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,091:INFO:Checking exceptions
2025-03-16 02:40:41,091:INFO:Preloading libraries
2025-03-16 02:40:41,091:INFO:Set up data.
2025-03-16 02:40:41,094:INFO:Set up index.
2025-03-16 02:40:41,184:INFO:Initializing predict_model()
2025-03-16 02:40:41,184:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F757A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,184:INFO:Checking exceptions
2025-03-16 02:40:41,184:INFO:Preloading libraries
2025-03-16 02:40:41,184:INFO:Set up data.
2025-03-16 02:40:41,188:INFO:Set up index.
2025-03-16 02:40:41,267:INFO:Initializing predict_model()
2025-03-16 02:40:41,267:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC07990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,267:INFO:Checking exceptions
2025-03-16 02:40:41,267:INFO:Preloading libraries
2025-03-16 02:40:41,267:INFO:Set up data.
2025-03-16 02:40:41,271:INFO:Set up index.
2025-03-16 02:40:41,352:INFO:Initializing predict_model()
2025-03-16 02:40:41,352:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F1EB5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,352:INFO:Checking exceptions
2025-03-16 02:40:41,352:INFO:Preloading libraries
2025-03-16 02:40:41,352:INFO:Set up data.
2025-03-16 02:40:41,356:INFO:Set up index.
2025-03-16 02:40:41,444:INFO:Initializing predict_model()
2025-03-16 02:40:41,444:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F14F8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,444:INFO:Checking exceptions
2025-03-16 02:40:41,444:INFO:Preloading libraries
2025-03-16 02:40:41,444:INFO:Set up data.
2025-03-16 02:40:41,449:INFO:Set up index.
2025-03-16 02:40:41,535:INFO:Initializing predict_model()
2025-03-16 02:40:41,536:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F1EB5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,536:INFO:Checking exceptions
2025-03-16 02:40:41,536:INFO:Preloading libraries
2025-03-16 02:40:41,536:INFO:Set up data.
2025-03-16 02:40:41,540:INFO:Set up index.
2025-03-16 02:40:41,624:INFO:Initializing predict_model()
2025-03-16 02:40:41,624:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F7578D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,624:INFO:Checking exceptions
2025-03-16 02:40:41,624:INFO:Preloading libraries
2025-03-16 02:40:41,624:INFO:Set up data.
2025-03-16 02:40:41,629:INFO:Set up index.
2025-03-16 02:40:41,711:INFO:Initializing predict_model()
2025-03-16 02:40:41,711:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC7C090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,711:INFO:Checking exceptions
2025-03-16 02:40:41,711:INFO:Preloading libraries
2025-03-16 02:40:41,711:INFO:Set up data.
2025-03-16 02:40:41,715:INFO:Set up index.
2025-03-16 02:40:41,799:INFO:Initializing predict_model()
2025-03-16 02:40:41,799:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F16CDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,799:INFO:Checking exceptions
2025-03-16 02:40:41,799:INFO:Preloading libraries
2025-03-16 02:40:41,799:INFO:Set up data.
2025-03-16 02:40:41,802:INFO:Set up index.
2025-03-16 02:40:41,887:INFO:Initializing predict_model()
2025-03-16 02:40:41,887:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD34E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,887:INFO:Checking exceptions
2025-03-16 02:40:41,887:INFO:Preloading libraries
2025-03-16 02:40:41,888:INFO:Set up data.
2025-03-16 02:40:41,891:INFO:Set up index.
2025-03-16 02:40:41,976:INFO:Initializing predict_model()
2025-03-16 02:40:41,977:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F8DEE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:41,977:INFO:Checking exceptions
2025-03-16 02:40:41,977:INFO:Preloading libraries
2025-03-16 02:40:41,977:INFO:Set up data.
2025-03-16 02:40:41,981:INFO:Set up index.
2025-03-16 02:40:42,063:INFO:Initializing predict_model()
2025-03-16 02:40:42,063:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F0C2710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:42,063:INFO:Checking exceptions
2025-03-16 02:40:42,063:INFO:Preloading libraries
2025-03-16 02:40:42,063:INFO:Set up data.
2025-03-16 02:40:42,067:INFO:Set up index.
2025-03-16 02:40:42,146:INFO:Initializing predict_model()
2025-03-16 02:40:42,146:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270BC8AF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:42,146:INFO:Checking exceptions
2025-03-16 02:40:42,146:INFO:Preloading libraries
2025-03-16 02:40:42,146:INFO:Set up data.
2025-03-16 02:40:42,148:INFO:Set up index.
2025-03-16 02:40:42,227:INFO:Initializing predict_model()
2025-03-16 02:40:42,227:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F757F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:42,227:INFO:Checking exceptions
2025-03-16 02:40:42,227:INFO:Preloading libraries
2025-03-16 02:40:42,227:INFO:Set up data.
2025-03-16 02:40:42,231:INFO:Set up index.
2025-03-16 02:40:42,310:INFO:Initializing predict_model()
2025-03-16 02:40:42,310:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD4E3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:42,310:INFO:Checking exceptions
2025-03-16 02:40:42,310:INFO:Preloading libraries
2025-03-16 02:40:42,310:INFO:Set up data.
2025-03-16 02:40:42,313:INFO:Set up index.
2025-03-16 02:40:42,390:INFO:Initializing predict_model()
2025-03-16 02:40:42,390:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F757790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A12AC0>)
2025-03-16 02:40:42,390:INFO:Checking exceptions
2025-03-16 02:40:42,390:INFO:Preloading libraries
2025-03-16 02:40:42,390:INFO:Set up data.
2025-03-16 02:40:42,394:INFO:Set up index.
2025-03-16 02:40:42,483:INFO:Initializing load_model()
2025-03-16 02:40:42,483:INFO:load_model(model_name=../eng_psu_hatyai/main/humi_use_temp_model_2, platform=None, authentication=None, verbose=True)
2025-03-16 02:42:44,512:INFO:Initializing load_model()
2025-03-16 02:42:44,512:INFO:load_model(model_name=../eng_psu_hatyai/main/lgmb_temp_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 02:42:44,561:INFO:Initializing predict_model()
2025-03-16 02:42:44,561:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC3E9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FD1AA20>)
2025-03-16 02:42:44,561:INFO:Checking exceptions
2025-03-16 02:42:44,561:INFO:Preloading libraries
2025-03-16 02:42:44,561:INFO:Set up data.
2025-03-16 02:42:44,564:INFO:Set up index.
2025-03-16 02:43:22,735:INFO:Initializing load_model()
2025-03-16 02:43:22,735:INFO:load_model(model_name=../eng_psu_hatyai/main/lgmb_temp_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 02:43:22,780:INFO:Initializing predict_model()
2025-03-16 02:43:22,780:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD6B5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227438C7A60>)
2025-03-16 02:43:22,780:INFO:Checking exceptions
2025-03-16 02:43:22,780:INFO:Preloading libraries
2025-03-16 02:43:22,780:INFO:Set up data.
2025-03-16 02:43:22,783:INFO:Set up index.
2025-03-16 02:48:55,347:INFO:Initializing load_model()
2025-03-16 02:48:55,347:INFO:load_model(model_name=../eng_psu_hatyai/main/lgmb_temp_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 02:48:55,400:INFO:Initializing predict_model()
2025-03-16 02:48:55,400:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C5F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447A3F60>)
2025-03-16 02:48:55,400:INFO:Checking exceptions
2025-03-16 02:48:55,400:INFO:Preloading libraries
2025-03-16 02:48:55,400:INFO:Set up data.
2025-03-16 02:48:55,406:INFO:Set up index.
2025-03-16 02:48:55,554:INFO:Initializing predict_model()
2025-03-16 02:48:55,556:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C5ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A80E0>)
2025-03-16 02:48:55,556:INFO:Checking exceptions
2025-03-16 02:48:55,556:INFO:Preloading libraries
2025-03-16 02:48:55,556:INFO:Set up data.
2025-03-16 02:48:55,560:INFO:Set up index.
2025-03-16 02:48:55,685:INFO:Initializing predict_model()
2025-03-16 02:48:55,686:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B1AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A87C0>)
2025-03-16 02:48:55,686:INFO:Checking exceptions
2025-03-16 02:48:55,686:INFO:Preloading libraries
2025-03-16 02:48:55,686:INFO:Set up data.
2025-03-16 02:48:55,689:INFO:Set up index.
2025-03-16 02:48:55,820:INFO:Initializing predict_model()
2025-03-16 02:48:55,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C4990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8C20>)
2025-03-16 02:48:55,820:INFO:Checking exceptions
2025-03-16 02:48:55,820:INFO:Preloading libraries
2025-03-16 02:48:55,820:INFO:Set up data.
2025-03-16 02:48:55,823:INFO:Set up index.
2025-03-16 02:48:55,952:INFO:Initializing predict_model()
2025-03-16 02:48:55,952:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745586010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9800>)
2025-03-16 02:48:55,952:INFO:Checking exceptions
2025-03-16 02:48:55,952:INFO:Preloading libraries
2025-03-16 02:48:55,953:INFO:Set up data.
2025-03-16 02:48:55,955:INFO:Set up index.
2025-03-16 02:48:56,075:INFO:Initializing predict_model()
2025-03-16 02:48:56,075:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455869D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A94E0>)
2025-03-16 02:48:56,076:INFO:Checking exceptions
2025-03-16 02:48:56,076:INFO:Preloading libraries
2025-03-16 02:48:56,076:INFO:Set up data.
2025-03-16 02:48:56,078:INFO:Set up index.
2025-03-16 02:48:56,198:INFO:Initializing predict_model()
2025-03-16 02:48:56,198:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745571E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9080>)
2025-03-16 02:48:56,198:INFO:Checking exceptions
2025-03-16 02:48:56,198:INFO:Preloading libraries
2025-03-16 02:48:56,198:INFO:Set up data.
2025-03-16 02:48:56,201:INFO:Set up index.
2025-03-16 02:48:56,319:INFO:Initializing predict_model()
2025-03-16 02:48:56,319:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C6910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9120>)
2025-03-16 02:48:56,319:INFO:Checking exceptions
2025-03-16 02:48:56,319:INFO:Preloading libraries
2025-03-16 02:48:56,319:INFO:Set up data.
2025-03-16 02:48:56,322:INFO:Set up index.
2025-03-16 02:48:56,438:INFO:Initializing predict_model()
2025-03-16 02:48:56,438:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745571BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8720>)
2025-03-16 02:48:56,438:INFO:Checking exceptions
2025-03-16 02:48:56,438:INFO:Preloading libraries
2025-03-16 02:48:56,440:INFO:Set up data.
2025-03-16 02:48:56,441:INFO:Set up index.
2025-03-16 02:48:56,559:INFO:Initializing predict_model()
2025-03-16 02:48:56,559:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B2E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8B80>)
2025-03-16 02:48:56,559:INFO:Checking exceptions
2025-03-16 02:48:56,559:INFO:Preloading libraries
2025-03-16 02:48:56,559:INFO:Set up data.
2025-03-16 02:48:56,561:INFO:Set up index.
2025-03-16 02:48:56,681:INFO:Initializing predict_model()
2025-03-16 02:48:56,681:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455869D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A93A0>)
2025-03-16 02:48:56,681:INFO:Checking exceptions
2025-03-16 02:48:56,681:INFO:Preloading libraries
2025-03-16 02:48:56,681:INFO:Set up data.
2025-03-16 02:48:56,684:INFO:Set up index.
2025-03-16 02:48:56,802:INFO:Initializing predict_model()
2025-03-16 02:48:56,802:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745578390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A80E0>)
2025-03-16 02:48:56,802:INFO:Checking exceptions
2025-03-16 02:48:56,802:INFO:Preloading libraries
2025-03-16 02:48:56,802:INFO:Set up data.
2025-03-16 02:48:56,806:INFO:Set up index.
2025-03-16 02:48:56,922:INFO:Initializing predict_model()
2025-03-16 02:48:56,922:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274546D110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A87C0>)
2025-03-16 02:48:56,922:INFO:Checking exceptions
2025-03-16 02:48:56,922:INFO:Preloading libraries
2025-03-16 02:48:56,923:INFO:Set up data.
2025-03-16 02:48:56,926:INFO:Set up index.
2025-03-16 02:48:57,042:INFO:Initializing predict_model()
2025-03-16 02:48:57,042:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274559F250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8C20>)
2025-03-16 02:48:57,042:INFO:Checking exceptions
2025-03-16 02:48:57,042:INFO:Preloading libraries
2025-03-16 02:48:57,042:INFO:Set up data.
2025-03-16 02:48:57,045:INFO:Set up index.
2025-03-16 02:48:57,162:INFO:Initializing predict_model()
2025-03-16 02:48:57,162:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274557AA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9800>)
2025-03-16 02:48:57,162:INFO:Checking exceptions
2025-03-16 02:48:57,162:INFO:Preloading libraries
2025-03-16 02:48:57,162:INFO:Set up data.
2025-03-16 02:48:57,166:INFO:Set up index.
2025-03-16 02:48:57,283:INFO:Initializing predict_model()
2025-03-16 02:48:57,283:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745572190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A94E0>)
2025-03-16 02:48:57,283:INFO:Checking exceptions
2025-03-16 02:48:57,283:INFO:Preloading libraries
2025-03-16 02:48:57,283:INFO:Set up data.
2025-03-16 02:48:57,286:INFO:Set up index.
2025-03-16 02:48:57,403:INFO:Initializing predict_model()
2025-03-16 02:48:57,403:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745587050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9080>)
2025-03-16 02:48:57,403:INFO:Checking exceptions
2025-03-16 02:48:57,403:INFO:Preloading libraries
2025-03-16 02:48:57,404:INFO:Set up data.
2025-03-16 02:48:57,407:INFO:Set up index.
2025-03-16 02:48:57,525:INFO:Initializing predict_model()
2025-03-16 02:48:57,525:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745586F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9120>)
2025-03-16 02:48:57,525:INFO:Checking exceptions
2025-03-16 02:48:57,525:INFO:Preloading libraries
2025-03-16 02:48:57,525:INFO:Set up data.
2025-03-16 02:48:57,528:INFO:Set up index.
2025-03-16 02:48:57,645:INFO:Initializing predict_model()
2025-03-16 02:48:57,645:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745586610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8720>)
2025-03-16 02:48:57,645:INFO:Checking exceptions
2025-03-16 02:48:57,645:INFO:Preloading libraries
2025-03-16 02:48:57,646:INFO:Set up data.
2025-03-16 02:48:57,648:INFO:Set up index.
2025-03-16 02:48:57,764:INFO:Initializing predict_model()
2025-03-16 02:48:57,764:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455871D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8B80>)
2025-03-16 02:48:57,764:INFO:Checking exceptions
2025-03-16 02:48:57,764:INFO:Preloading libraries
2025-03-16 02:48:57,765:INFO:Set up data.
2025-03-16 02:48:57,768:INFO:Set up index.
2025-03-16 02:48:57,885:INFO:Initializing predict_model()
2025-03-16 02:48:57,885:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274557A710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A93A0>)
2025-03-16 02:48:57,885:INFO:Checking exceptions
2025-03-16 02:48:57,885:INFO:Preloading libraries
2025-03-16 02:48:57,885:INFO:Set up data.
2025-03-16 02:48:57,889:INFO:Set up index.
2025-03-16 02:48:58,007:INFO:Initializing predict_model()
2025-03-16 02:48:58,007:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274555CB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A80E0>)
2025-03-16 02:48:58,008:INFO:Checking exceptions
2025-03-16 02:48:58,008:INFO:Preloading libraries
2025-03-16 02:48:58,008:INFO:Set up data.
2025-03-16 02:48:58,010:INFO:Set up index.
2025-03-16 02:48:58,125:INFO:Initializing predict_model()
2025-03-16 02:48:58,125:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274555CE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A87C0>)
2025-03-16 02:48:58,125:INFO:Checking exceptions
2025-03-16 02:48:58,125:INFO:Preloading libraries
2025-03-16 02:48:58,125:INFO:Set up data.
2025-03-16 02:48:58,128:INFO:Set up index.
2025-03-16 02:48:58,245:INFO:Initializing predict_model()
2025-03-16 02:48:58,245:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745579250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8C20>)
2025-03-16 02:48:58,245:INFO:Checking exceptions
2025-03-16 02:48:58,245:INFO:Preloading libraries
2025-03-16 02:48:58,245:INFO:Set up data.
2025-03-16 02:48:58,247:INFO:Set up index.
2025-03-16 02:48:58,363:INFO:Initializing predict_model()
2025-03-16 02:48:58,363:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274546D4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9800>)
2025-03-16 02:48:58,363:INFO:Checking exceptions
2025-03-16 02:48:58,363:INFO:Preloading libraries
2025-03-16 02:48:58,363:INFO:Set up data.
2025-03-16 02:48:58,367:INFO:Set up index.
2025-03-16 02:48:58,481:INFO:Initializing predict_model()
2025-03-16 02:48:58,483:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274559CDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A94E0>)
2025-03-16 02:48:58,483:INFO:Checking exceptions
2025-03-16 02:48:58,483:INFO:Preloading libraries
2025-03-16 02:48:58,483:INFO:Set up data.
2025-03-16 02:48:58,484:INFO:Set up index.
2025-03-16 02:48:58,605:INFO:Initializing predict_model()
2025-03-16 02:48:58,605:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274559CE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9080>)
2025-03-16 02:48:58,605:INFO:Checking exceptions
2025-03-16 02:48:58,605:INFO:Preloading libraries
2025-03-16 02:48:58,605:INFO:Set up data.
2025-03-16 02:48:58,608:INFO:Set up index.
2025-03-16 02:48:58,726:INFO:Initializing predict_model()
2025-03-16 02:48:58,726:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B2CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9120>)
2025-03-16 02:48:58,726:INFO:Checking exceptions
2025-03-16 02:48:58,726:INFO:Preloading libraries
2025-03-16 02:48:58,726:INFO:Set up data.
2025-03-16 02:48:58,729:INFO:Set up index.
2025-03-16 02:48:58,847:INFO:Initializing predict_model()
2025-03-16 02:48:58,847:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274546D910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8720>)
2025-03-16 02:48:58,847:INFO:Checking exceptions
2025-03-16 02:48:58,847:INFO:Preloading libraries
2025-03-16 02:48:58,847:INFO:Set up data.
2025-03-16 02:48:58,850:INFO:Set up index.
2025-03-16 02:48:58,966:INFO:Initializing predict_model()
2025-03-16 02:48:58,966:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274557BD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8B80>)
2025-03-16 02:48:58,967:INFO:Checking exceptions
2025-03-16 02:48:58,967:INFO:Preloading libraries
2025-03-16 02:48:58,967:INFO:Set up data.
2025-03-16 02:48:58,970:INFO:Set up index.
2025-03-16 02:48:59,090:INFO:Initializing predict_model()
2025-03-16 02:48:59,090:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274559DCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A93A0>)
2025-03-16 02:48:59,090:INFO:Checking exceptions
2025-03-16 02:48:59,090:INFO:Preloading libraries
2025-03-16 02:48:59,090:INFO:Set up data.
2025-03-16 02:48:59,093:INFO:Set up index.
2025-03-16 02:48:59,210:INFO:Initializing predict_model()
2025-03-16 02:48:59,210:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274557AA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A80E0>)
2025-03-16 02:48:59,212:INFO:Checking exceptions
2025-03-16 02:48:59,212:INFO:Preloading libraries
2025-03-16 02:48:59,212:INFO:Set up data.
2025-03-16 02:48:59,213:INFO:Set up index.
2025-03-16 02:48:59,328:INFO:Initializing predict_model()
2025-03-16 02:48:59,329:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C5D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A87C0>)
2025-03-16 02:48:59,329:INFO:Checking exceptions
2025-03-16 02:48:59,329:INFO:Preloading libraries
2025-03-16 02:48:59,329:INFO:Set up data.
2025-03-16 02:48:59,332:INFO:Set up index.
2025-03-16 02:48:59,453:INFO:Initializing predict_model()
2025-03-16 02:48:59,455:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274546D4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8C20>)
2025-03-16 02:48:59,455:INFO:Checking exceptions
2025-03-16 02:48:59,455:INFO:Preloading libraries
2025-03-16 02:48:59,455:INFO:Set up data.
2025-03-16 02:48:59,457:INFO:Set up index.
2025-03-16 02:48:59,573:INFO:Initializing predict_model()
2025-03-16 02:48:59,573:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274557BF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9800>)
2025-03-16 02:48:59,573:INFO:Checking exceptions
2025-03-16 02:48:59,573:INFO:Preloading libraries
2025-03-16 02:48:59,573:INFO:Set up data.
2025-03-16 02:48:59,576:INFO:Set up index.
2025-03-16 02:48:59,696:INFO:Initializing predict_model()
2025-03-16 02:48:59,696:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274546D110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A94E0>)
2025-03-16 02:48:59,696:INFO:Checking exceptions
2025-03-16 02:48:59,696:INFO:Preloading libraries
2025-03-16 02:48:59,697:INFO:Set up data.
2025-03-16 02:48:59,698:INFO:Set up index.
2025-03-16 02:48:59,821:INFO:Initializing predict_model()
2025-03-16 02:48:59,821:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274555E590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9080>)
2025-03-16 02:48:59,821:INFO:Checking exceptions
2025-03-16 02:48:59,821:INFO:Preloading libraries
2025-03-16 02:48:59,821:INFO:Set up data.
2025-03-16 02:48:59,824:INFO:Set up index.
2025-03-16 02:48:59,942:INFO:Initializing predict_model()
2025-03-16 02:48:59,942:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745578310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9120>)
2025-03-16 02:48:59,942:INFO:Checking exceptions
2025-03-16 02:48:59,942:INFO:Preloading libraries
2025-03-16 02:48:59,942:INFO:Set up data.
2025-03-16 02:48:59,945:INFO:Set up index.
2025-03-16 02:49:00,074:INFO:Initializing predict_model()
2025-03-16 02:49:00,074:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745573990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8720>)
2025-03-16 02:49:00,074:INFO:Checking exceptions
2025-03-16 02:49:00,074:INFO:Preloading libraries
2025-03-16 02:49:00,074:INFO:Set up data.
2025-03-16 02:49:00,077:INFO:Set up index.
2025-03-16 02:49:00,192:INFO:Initializing predict_model()
2025-03-16 02:49:00,192:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455669D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8B80>)
2025-03-16 02:49:00,192:INFO:Checking exceptions
2025-03-16 02:49:00,192:INFO:Preloading libraries
2025-03-16 02:49:00,192:INFO:Set up data.
2025-03-16 02:49:00,195:INFO:Set up index.
2025-03-16 02:49:00,315:INFO:Initializing predict_model()
2025-03-16 02:49:00,315:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745586390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A93A0>)
2025-03-16 02:49:00,315:INFO:Checking exceptions
2025-03-16 02:49:00,315:INFO:Preloading libraries
2025-03-16 02:49:00,315:INFO:Set up data.
2025-03-16 02:49:00,317:INFO:Set up index.
2025-03-16 02:49:00,436:INFO:Initializing predict_model()
2025-03-16 02:49:00,436:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C6850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A80E0>)
2025-03-16 02:49:00,436:INFO:Checking exceptions
2025-03-16 02:49:00,437:INFO:Preloading libraries
2025-03-16 02:49:00,437:INFO:Set up data.
2025-03-16 02:49:00,439:INFO:Set up index.
2025-03-16 02:49:00,557:INFO:Initializing predict_model()
2025-03-16 02:49:00,557:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745564E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A87C0>)
2025-03-16 02:49:00,557:INFO:Checking exceptions
2025-03-16 02:49:00,557:INFO:Preloading libraries
2025-03-16 02:49:00,557:INFO:Set up data.
2025-03-16 02:49:00,560:INFO:Set up index.
2025-03-16 02:49:00,680:INFO:Initializing predict_model()
2025-03-16 02:49:00,680:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745572D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8C20>)
2025-03-16 02:49:00,680:INFO:Checking exceptions
2025-03-16 02:49:00,680:INFO:Preloading libraries
2025-03-16 02:49:00,680:INFO:Set up data.
2025-03-16 02:49:00,683:INFO:Set up index.
2025-03-16 02:49:00,799:INFO:Initializing predict_model()
2025-03-16 02:49:00,799:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745585F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9800>)
2025-03-16 02:49:00,799:INFO:Checking exceptions
2025-03-16 02:49:00,799:INFO:Preloading libraries
2025-03-16 02:49:00,799:INFO:Set up data.
2025-03-16 02:49:00,802:INFO:Set up index.
2025-03-16 02:49:00,919:INFO:Initializing predict_model()
2025-03-16 02:49:00,919:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274546D910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A94E0>)
2025-03-16 02:49:00,919:INFO:Checking exceptions
2025-03-16 02:49:00,919:INFO:Preloading libraries
2025-03-16 02:49:00,919:INFO:Set up data.
2025-03-16 02:49:00,922:INFO:Set up index.
2025-03-16 02:49:01,039:INFO:Initializing predict_model()
2025-03-16 02:49:01,039:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C4DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9080>)
2025-03-16 02:49:01,039:INFO:Checking exceptions
2025-03-16 02:49:01,039:INFO:Preloading libraries
2025-03-16 02:49:01,040:INFO:Set up data.
2025-03-16 02:49:01,041:INFO:Set up index.
2025-03-16 02:49:01,160:INFO:Initializing predict_model()
2025-03-16 02:49:01,162:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745584810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9120>)
2025-03-16 02:49:01,162:INFO:Checking exceptions
2025-03-16 02:49:01,162:INFO:Preloading libraries
2025-03-16 02:49:01,162:INFO:Set up data.
2025-03-16 02:49:01,163:INFO:Set up index.
2025-03-16 02:49:01,279:INFO:Initializing predict_model()
2025-03-16 02:49:01,279:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274557B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8720>)
2025-03-16 02:49:01,279:INFO:Checking exceptions
2025-03-16 02:49:01,279:INFO:Preloading libraries
2025-03-16 02:49:01,279:INFO:Set up data.
2025-03-16 02:49:01,282:INFO:Set up index.
2025-03-16 02:49:01,400:INFO:Initializing predict_model()
2025-03-16 02:49:01,400:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745578E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8B80>)
2025-03-16 02:49:01,400:INFO:Checking exceptions
2025-03-16 02:49:01,400:INFO:Preloading libraries
2025-03-16 02:49:01,401:INFO:Set up data.
2025-03-16 02:49:01,404:INFO:Set up index.
2025-03-16 02:49:01,527:INFO:Initializing predict_model()
2025-03-16 02:49:01,527:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274559F650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A93A0>)
2025-03-16 02:49:01,527:INFO:Checking exceptions
2025-03-16 02:49:01,527:INFO:Preloading libraries
2025-03-16 02:49:01,527:INFO:Set up data.
2025-03-16 02:49:01,529:INFO:Set up index.
2025-03-16 02:49:01,647:INFO:Initializing predict_model()
2025-03-16 02:49:01,647:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274546D910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A80E0>)
2025-03-16 02:49:01,647:INFO:Checking exceptions
2025-03-16 02:49:01,647:INFO:Preloading libraries
2025-03-16 02:49:01,647:INFO:Set up data.
2025-03-16 02:49:01,650:INFO:Set up index.
2025-03-16 02:49:01,769:INFO:Initializing predict_model()
2025-03-16 02:49:01,769:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745572D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A87C0>)
2025-03-16 02:49:01,769:INFO:Checking exceptions
2025-03-16 02:49:01,769:INFO:Preloading libraries
2025-03-16 02:49:01,769:INFO:Set up data.
2025-03-16 02:49:01,774:INFO:Set up index.
2025-03-16 02:49:01,898:INFO:Initializing predict_model()
2025-03-16 02:49:01,898:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745587010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8C20>)
2025-03-16 02:49:01,898:INFO:Checking exceptions
2025-03-16 02:49:01,898:INFO:Preloading libraries
2025-03-16 02:49:01,898:INFO:Set up data.
2025-03-16 02:49:01,901:INFO:Set up index.
2025-03-16 02:49:02,022:INFO:Initializing predict_model()
2025-03-16 02:49:02,022:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745587890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9800>)
2025-03-16 02:49:02,022:INFO:Checking exceptions
2025-03-16 02:49:02,022:INFO:Preloading libraries
2025-03-16 02:49:02,024:INFO:Set up data.
2025-03-16 02:49:02,026:INFO:Set up index.
2025-03-16 02:49:02,150:INFO:Initializing predict_model()
2025-03-16 02:49:02,150:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B2A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A94E0>)
2025-03-16 02:49:02,150:INFO:Checking exceptions
2025-03-16 02:49:02,150:INFO:Preloading libraries
2025-03-16 02:49:02,150:INFO:Set up data.
2025-03-16 02:49:02,153:INFO:Set up index.
2025-03-16 02:49:02,272:INFO:Initializing predict_model()
2025-03-16 02:49:02,272:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745584490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9080>)
2025-03-16 02:49:02,272:INFO:Checking exceptions
2025-03-16 02:49:02,272:INFO:Preloading libraries
2025-03-16 02:49:02,272:INFO:Set up data.
2025-03-16 02:49:02,275:INFO:Set up index.
2025-03-16 02:49:02,393:INFO:Initializing predict_model()
2025-03-16 02:49:02,393:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274559DCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9120>)
2025-03-16 02:49:02,393:INFO:Checking exceptions
2025-03-16 02:49:02,393:INFO:Preloading libraries
2025-03-16 02:49:02,393:INFO:Set up data.
2025-03-16 02:49:02,397:INFO:Set up index.
2025-03-16 02:49:02,517:INFO:Initializing predict_model()
2025-03-16 02:49:02,517:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C6850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8720>)
2025-03-16 02:49:02,517:INFO:Checking exceptions
2025-03-16 02:49:02,517:INFO:Preloading libraries
2025-03-16 02:49:02,517:INFO:Set up data.
2025-03-16 02:49:02,520:INFO:Set up index.
2025-03-16 02:49:02,637:INFO:Initializing predict_model()
2025-03-16 02:49:02,639:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B6850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8B80>)
2025-03-16 02:49:02,639:INFO:Checking exceptions
2025-03-16 02:49:02,639:INFO:Preloading libraries
2025-03-16 02:49:02,639:INFO:Set up data.
2025-03-16 02:49:02,642:INFO:Set up index.
2025-03-16 02:49:02,757:INFO:Initializing predict_model()
2025-03-16 02:49:02,757:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B2D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A93A0>)
2025-03-16 02:49:02,757:INFO:Checking exceptions
2025-03-16 02:49:02,757:INFO:Preloading libraries
2025-03-16 02:49:02,759:INFO:Set up data.
2025-03-16 02:49:02,760:INFO:Set up index.
2025-03-16 02:49:02,879:INFO:Initializing predict_model()
2025-03-16 02:49:02,880:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274557A8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A80E0>)
2025-03-16 02:49:02,880:INFO:Checking exceptions
2025-03-16 02:49:02,880:INFO:Preloading libraries
2025-03-16 02:49:02,880:INFO:Set up data.
2025-03-16 02:49:02,882:INFO:Set up index.
2025-03-16 02:49:03,006:INFO:Initializing predict_model()
2025-03-16 02:49:03,007:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274546FE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A87C0>)
2025-03-16 02:49:03,007:INFO:Checking exceptions
2025-03-16 02:49:03,007:INFO:Preloading libraries
2025-03-16 02:49:03,007:INFO:Set up data.
2025-03-16 02:49:03,010:INFO:Set up index.
2025-03-16 02:49:03,158:INFO:Initializing predict_model()
2025-03-16 02:49:03,158:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274555E610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8C20>)
2025-03-16 02:49:03,158:INFO:Checking exceptions
2025-03-16 02:49:03,158:INFO:Preloading libraries
2025-03-16 02:49:03,158:INFO:Set up data.
2025-03-16 02:49:03,161:INFO:Set up index.
2025-03-16 02:49:03,283:INFO:Initializing predict_model()
2025-03-16 02:49:03,285:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274555D110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9800>)
2025-03-16 02:49:03,285:INFO:Checking exceptions
2025-03-16 02:49:03,285:INFO:Preloading libraries
2025-03-16 02:49:03,285:INFO:Set up data.
2025-03-16 02:49:03,287:INFO:Set up index.
2025-03-16 02:49:03,409:INFO:Initializing predict_model()
2025-03-16 02:49:03,409:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745572C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A94E0>)
2025-03-16 02:49:03,409:INFO:Checking exceptions
2025-03-16 02:49:03,409:INFO:Preloading libraries
2025-03-16 02:49:03,409:INFO:Set up data.
2025-03-16 02:49:03,412:INFO:Set up index.
2025-03-16 02:49:03,533:INFO:Initializing predict_model()
2025-03-16 02:49:03,533:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274546D110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9080>)
2025-03-16 02:49:03,533:INFO:Checking exceptions
2025-03-16 02:49:03,533:INFO:Preloading libraries
2025-03-16 02:49:03,533:INFO:Set up data.
2025-03-16 02:49:03,536:INFO:Set up index.
2025-03-16 02:49:03,662:INFO:Initializing predict_model()
2025-03-16 02:49:03,662:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745572D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9120>)
2025-03-16 02:49:03,662:INFO:Checking exceptions
2025-03-16 02:49:03,662:INFO:Preloading libraries
2025-03-16 02:49:03,662:INFO:Set up data.
2025-03-16 02:49:03,665:INFO:Set up index.
2025-03-16 02:49:03,786:INFO:Initializing predict_model()
2025-03-16 02:49:03,786:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274554BD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8720>)
2025-03-16 02:49:03,786:INFO:Checking exceptions
2025-03-16 02:49:03,786:INFO:Preloading libraries
2025-03-16 02:49:03,786:INFO:Set up data.
2025-03-16 02:49:03,788:INFO:Set up index.
2025-03-16 02:49:03,904:INFO:Initializing predict_model()
2025-03-16 02:49:03,904:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274555FE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8B80>)
2025-03-16 02:49:03,904:INFO:Checking exceptions
2025-03-16 02:49:03,904:INFO:Preloading libraries
2025-03-16 02:49:03,904:INFO:Set up data.
2025-03-16 02:49:03,907:INFO:Set up index.
2025-03-16 02:49:04,024:INFO:Initializing predict_model()
2025-03-16 02:49:04,024:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745566090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A93A0>)
2025-03-16 02:49:04,024:INFO:Checking exceptions
2025-03-16 02:49:04,024:INFO:Preloading libraries
2025-03-16 02:49:04,024:INFO:Set up data.
2025-03-16 02:49:04,028:INFO:Set up index.
2025-03-16 02:49:04,145:INFO:Initializing predict_model()
2025-03-16 02:49:04,145:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745586E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A80E0>)
2025-03-16 02:49:04,145:INFO:Checking exceptions
2025-03-16 02:49:04,145:INFO:Preloading libraries
2025-03-16 02:49:04,146:INFO:Set up data.
2025-03-16 02:49:04,149:INFO:Set up index.
2025-03-16 02:49:04,272:INFO:Initializing predict_model()
2025-03-16 02:49:04,272:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C4DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A87C0>)
2025-03-16 02:49:04,272:INFO:Checking exceptions
2025-03-16 02:49:04,272:INFO:Preloading libraries
2025-03-16 02:49:04,272:INFO:Set up data.
2025-03-16 02:49:04,275:INFO:Set up index.
2025-03-16 02:49:04,395:INFO:Initializing predict_model()
2025-03-16 02:49:04,395:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547D950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8C20>)
2025-03-16 02:49:04,395:INFO:Checking exceptions
2025-03-16 02:49:04,395:INFO:Preloading libraries
2025-03-16 02:49:04,395:INFO:Set up data.
2025-03-16 02:49:04,397:INFO:Set up index.
2025-03-16 02:49:04,518:INFO:Initializing predict_model()
2025-03-16 02:49:04,519:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274539C490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9800>)
2025-03-16 02:49:04,519:INFO:Checking exceptions
2025-03-16 02:49:04,519:INFO:Preloading libraries
2025-03-16 02:49:04,519:INFO:Set up data.
2025-03-16 02:49:04,521:INFO:Set up index.
2025-03-16 02:49:04,647:INFO:Initializing predict_model()
2025-03-16 02:49:04,648:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745579910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A94E0>)
2025-03-16 02:49:04,648:INFO:Checking exceptions
2025-03-16 02:49:04,648:INFO:Preloading libraries
2025-03-16 02:49:04,648:INFO:Set up data.
2025-03-16 02:49:04,651:INFO:Set up index.
2025-03-16 02:49:04,774:INFO:Initializing predict_model()
2025-03-16 02:49:04,774:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B7550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9080>)
2025-03-16 02:49:04,774:INFO:Checking exceptions
2025-03-16 02:49:04,774:INFO:Preloading libraries
2025-03-16 02:49:04,774:INFO:Set up data.
2025-03-16 02:49:04,777:INFO:Set up index.
2025-03-16 02:49:04,895:INFO:Initializing predict_model()
2025-03-16 02:49:04,895:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B35D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9120>)
2025-03-16 02:49:04,895:INFO:Checking exceptions
2025-03-16 02:49:04,895:INFO:Preloading libraries
2025-03-16 02:49:04,895:INFO:Set up data.
2025-03-16 02:49:04,898:INFO:Set up index.
2025-03-16 02:49:05,018:INFO:Initializing predict_model()
2025-03-16 02:49:05,018:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B0850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8720>)
2025-03-16 02:49:05,018:INFO:Checking exceptions
2025-03-16 02:49:05,018:INFO:Preloading libraries
2025-03-16 02:49:05,018:INFO:Set up data.
2025-03-16 02:49:05,021:INFO:Set up index.
2025-03-16 02:49:05,138:INFO:Initializing predict_model()
2025-03-16 02:49:05,138:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274554BED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8B80>)
2025-03-16 02:49:05,138:INFO:Checking exceptions
2025-03-16 02:49:05,138:INFO:Preloading libraries
2025-03-16 02:49:05,138:INFO:Set up data.
2025-03-16 02:49:05,140:INFO:Set up index.
2025-03-16 02:49:05,263:INFO:Initializing predict_model()
2025-03-16 02:49:05,263:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A93A0>)
2025-03-16 02:49:05,263:INFO:Checking exceptions
2025-03-16 02:49:05,263:INFO:Preloading libraries
2025-03-16 02:49:05,263:INFO:Set up data.
2025-03-16 02:49:05,267:INFO:Set up index.
2025-03-16 02:49:05,390:INFO:Initializing predict_model()
2025-03-16 02:49:05,390:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274557B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A80E0>)
2025-03-16 02:49:05,390:INFO:Checking exceptions
2025-03-16 02:49:05,390:INFO:Preloading libraries
2025-03-16 02:49:05,390:INFO:Set up data.
2025-03-16 02:49:05,393:INFO:Set up index.
2025-03-16 02:49:05,509:INFO:Initializing predict_model()
2025-03-16 02:49:05,509:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745573B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A87C0>)
2025-03-16 02:49:05,509:INFO:Checking exceptions
2025-03-16 02:49:05,509:INFO:Preloading libraries
2025-03-16 02:49:05,509:INFO:Set up data.
2025-03-16 02:49:05,512:INFO:Set up index.
2025-03-16 02:49:05,632:INFO:Initializing predict_model()
2025-03-16 02:49:05,632:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8C20>)
2025-03-16 02:49:05,632:INFO:Checking exceptions
2025-03-16 02:49:05,632:INFO:Preloading libraries
2025-03-16 02:49:05,632:INFO:Set up data.
2025-03-16 02:49:05,635:INFO:Set up index.
2025-03-16 02:49:05,749:INFO:Initializing predict_model()
2025-03-16 02:49:05,749:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547C690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9800>)
2025-03-16 02:49:05,749:INFO:Checking exceptions
2025-03-16 02:49:05,749:INFO:Preloading libraries
2025-03-16 02:49:05,749:INFO:Set up data.
2025-03-16 02:49:05,752:INFO:Set up index.
2025-03-16 02:49:05,871:INFO:Initializing predict_model()
2025-03-16 02:49:05,871:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274546D4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A94E0>)
2025-03-16 02:49:05,871:INFO:Checking exceptions
2025-03-16 02:49:05,871:INFO:Preloading libraries
2025-03-16 02:49:05,871:INFO:Set up data.
2025-03-16 02:49:05,874:INFO:Set up index.
2025-03-16 02:49:05,993:INFO:Initializing predict_model()
2025-03-16 02:49:05,993:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745578750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9080>)
2025-03-16 02:49:05,993:INFO:Checking exceptions
2025-03-16 02:49:05,993:INFO:Preloading libraries
2025-03-16 02:49:05,993:INFO:Set up data.
2025-03-16 02:49:05,996:INFO:Set up index.
2025-03-16 02:49:06,118:INFO:Initializing predict_model()
2025-03-16 02:49:06,118:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547D850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A9120>)
2025-03-16 02:49:06,118:INFO:Checking exceptions
2025-03-16 02:49:06,118:INFO:Preloading libraries
2025-03-16 02:49:06,118:INFO:Set up data.
2025-03-16 02:49:06,120:INFO:Set up index.
2025-03-16 02:49:06,244:INFO:Initializing predict_model()
2025-03-16 02:49:06,244:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745578850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8720>)
2025-03-16 02:49:06,244:INFO:Checking exceptions
2025-03-16 02:49:06,244:INFO:Preloading libraries
2025-03-16 02:49:06,244:INFO:Set up data.
2025-03-16 02:49:06,247:INFO:Set up index.
2025-03-16 02:49:06,369:INFO:Initializing predict_model()
2025-03-16 02:49:06,369:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B2DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448A8B80>)
2025-03-16 02:49:06,369:INFO:Checking exceptions
2025-03-16 02:49:06,369:INFO:Preloading libraries
2025-03-16 02:49:06,369:INFO:Set up data.
2025-03-16 02:49:06,372:INFO:Set up index.
2025-03-16 02:49:06,497:INFO:Initializing load_model()
2025-03-16 02:49:06,497:INFO:load_model(model_name=../eng_psu_hatyai/main/humi_use_temp_model_2, platform=None, authentication=None, verbose=True)
2025-03-16 02:49:06,574:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:49:06,574:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:49:06,574:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:49:06,576:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:49:06,576:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:49:06,576:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:49:06,577:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:49:06,577:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:49:06,577:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:49:06,577:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:49:06,577:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:49:06,578:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:49:06,578:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:49:06,610:INFO:Initializing predict_model()
2025-03-16 02:49:06,610:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274483E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227448AA700>)
2025-03-16 02:49:06,610:INFO:Checking exceptions
2025-03-16 02:49:06,610:INFO:Preloading libraries
2025-03-16 02:49:06,612:INFO:Set up data.
2025-03-16 02:49:06,615:INFO:Set up index.
2025-03-16 02:52:35,323:INFO:Initializing load_model()
2025-03-16 02:52:35,323:INFO:load_model(model_name=../eng_psu_hatyai/main/lgmb_temp_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 02:52:35,379:INFO:Initializing predict_model()
2025-03-16 02:52:35,379:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445DCC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022745484D60>)
2025-03-16 02:52:35,379:INFO:Checking exceptions
2025-03-16 02:52:35,380:INFO:Preloading libraries
2025-03-16 02:52:35,380:INFO:Set up data.
2025-03-16 02:52:35,383:INFO:Set up index.
2025-03-16 02:52:35,591:INFO:Initializing predict_model()
2025-03-16 02:52:35,593:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FBE4110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF5DA0>)
2025-03-16 02:52:35,593:INFO:Checking exceptions
2025-03-16 02:52:35,593:INFO:Preloading libraries
2025-03-16 02:52:35,593:INFO:Set up data.
2025-03-16 02:52:35,596:INFO:Set up index.
2025-03-16 02:52:35,734:INFO:Initializing predict_model()
2025-03-16 02:52:35,734:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447FB9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:35,734:INFO:Checking exceptions
2025-03-16 02:52:35,734:INFO:Preloading libraries
2025-03-16 02:52:35,734:INFO:Set up data.
2025-03-16 02:52:35,738:INFO:Set up index.
2025-03-16 02:52:35,866:INFO:Initializing predict_model()
2025-03-16 02:52:35,866:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B6890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:35,866:INFO:Checking exceptions
2025-03-16 02:52:35,866:INFO:Preloading libraries
2025-03-16 02:52:35,867:INFO:Set up data.
2025-03-16 02:52:35,869:INFO:Set up index.
2025-03-16 02:52:35,991:INFO:Initializing predict_model()
2025-03-16 02:52:35,991:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741ED7F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:35,991:INFO:Checking exceptions
2025-03-16 02:52:35,991:INFO:Preloading libraries
2025-03-16 02:52:35,991:INFO:Set up data.
2025-03-16 02:52:35,994:INFO:Set up index.
2025-03-16 02:52:36,119:INFO:Initializing predict_model()
2025-03-16 02:52:36,119:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270BCD0C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:36,119:INFO:Checking exceptions
2025-03-16 02:52:36,119:INFO:Preloading libraries
2025-03-16 02:52:36,119:INFO:Set up data.
2025-03-16 02:52:36,122:INFO:Set up index.
2025-03-16 02:52:36,254:INFO:Initializing predict_model()
2025-03-16 02:52:36,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DBF3D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:36,254:INFO:Checking exceptions
2025-03-16 02:52:36,254:INFO:Preloading libraries
2025-03-16 02:52:36,254:INFO:Set up data.
2025-03-16 02:52:36,257:INFO:Set up index.
2025-03-16 02:52:36,389:INFO:Initializing predict_model()
2025-03-16 02:52:36,389:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384C5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:36,389:INFO:Checking exceptions
2025-03-16 02:52:36,389:INFO:Preloading libraries
2025-03-16 02:52:36,389:INFO:Set up data.
2025-03-16 02:52:36,392:INFO:Set up index.
2025-03-16 02:52:36,521:INFO:Initializing predict_model()
2025-03-16 02:52:36,521:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:36,521:INFO:Checking exceptions
2025-03-16 02:52:36,521:INFO:Preloading libraries
2025-03-16 02:52:36,521:INFO:Set up data.
2025-03-16 02:52:36,525:INFO:Set up index.
2025-03-16 02:52:36,657:INFO:Initializing predict_model()
2025-03-16 02:52:36,657:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C08110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:36,657:INFO:Checking exceptions
2025-03-16 02:52:36,657:INFO:Preloading libraries
2025-03-16 02:52:36,657:INFO:Set up data.
2025-03-16 02:52:36,660:INFO:Set up index.
2025-03-16 02:52:36,782:INFO:Initializing predict_model()
2025-03-16 02:52:36,782:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741EDC410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:36,782:INFO:Checking exceptions
2025-03-16 02:52:36,782:INFO:Preloading libraries
2025-03-16 02:52:36,782:INFO:Set up data.
2025-03-16 02:52:36,784:INFO:Set up index.
2025-03-16 02:52:36,918:INFO:Initializing predict_model()
2025-03-16 02:52:36,920:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743715CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:36,920:INFO:Checking exceptions
2025-03-16 02:52:36,920:INFO:Preloading libraries
2025-03-16 02:52:36,920:INFO:Set up data.
2025-03-16 02:52:36,923:INFO:Set up index.
2025-03-16 02:52:37,046:INFO:Initializing predict_model()
2025-03-16 02:52:37,046:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227437196D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:37,046:INFO:Checking exceptions
2025-03-16 02:52:37,046:INFO:Preloading libraries
2025-03-16 02:52:37,046:INFO:Set up data.
2025-03-16 02:52:37,048:INFO:Set up index.
2025-03-16 02:52:37,183:INFO:Initializing predict_model()
2025-03-16 02:52:37,183:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD2A450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:37,183:INFO:Checking exceptions
2025-03-16 02:52:37,183:INFO:Preloading libraries
2025-03-16 02:52:37,183:INFO:Set up data.
2025-03-16 02:52:37,187:INFO:Set up index.
2025-03-16 02:52:37,307:INFO:Initializing predict_model()
2025-03-16 02:52:37,307:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744D5C8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:37,307:INFO:Checking exceptions
2025-03-16 02:52:37,307:INFO:Preloading libraries
2025-03-16 02:52:37,307:INFO:Set up data.
2025-03-16 02:52:37,309:INFO:Set up index.
2025-03-16 02:52:37,436:INFO:Initializing predict_model()
2025-03-16 02:52:37,436:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DDCC050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:37,436:INFO:Checking exceptions
2025-03-16 02:52:37,436:INFO:Preloading libraries
2025-03-16 02:52:37,436:INFO:Set up data.
2025-03-16 02:52:37,439:INFO:Set up index.
2025-03-16 02:52:37,557:INFO:Initializing predict_model()
2025-03-16 02:52:37,557:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274386C290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:37,557:INFO:Checking exceptions
2025-03-16 02:52:37,557:INFO:Preloading libraries
2025-03-16 02:52:37,558:INFO:Set up data.
2025-03-16 02:52:37,559:INFO:Set up index.
2025-03-16 02:52:37,683:INFO:Initializing predict_model()
2025-03-16 02:52:37,683:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D648390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:37,683:INFO:Checking exceptions
2025-03-16 02:52:37,683:INFO:Preloading libraries
2025-03-16 02:52:37,683:INFO:Set up data.
2025-03-16 02:52:37,687:INFO:Set up index.
2025-03-16 02:52:37,803:INFO:Initializing predict_model()
2025-03-16 02:52:37,806:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227439FB150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:37,806:INFO:Checking exceptions
2025-03-16 02:52:37,806:INFO:Preloading libraries
2025-03-16 02:52:37,806:INFO:Set up data.
2025-03-16 02:52:37,808:INFO:Set up index.
2025-03-16 02:52:37,930:INFO:Initializing predict_model()
2025-03-16 02:52:37,930:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744500190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:37,930:INFO:Checking exceptions
2025-03-16 02:52:37,930:INFO:Preloading libraries
2025-03-16 02:52:37,930:INFO:Set up data.
2025-03-16 02:52:37,933:INFO:Set up index.
2025-03-16 02:52:38,052:INFO:Initializing predict_model()
2025-03-16 02:52:38,052:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FCF6ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:38,052:INFO:Checking exceptions
2025-03-16 02:52:38,052:INFO:Preloading libraries
2025-03-16 02:52:38,052:INFO:Set up data.
2025-03-16 02:52:38,055:INFO:Set up index.
2025-03-16 02:52:38,180:INFO:Initializing predict_model()
2025-03-16 02:52:38,180:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C03BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:38,180:INFO:Checking exceptions
2025-03-16 02:52:38,180:INFO:Preloading libraries
2025-03-16 02:52:38,180:INFO:Set up data.
2025-03-16 02:52:38,183:INFO:Set up index.
2025-03-16 02:52:38,302:INFO:Initializing predict_model()
2025-03-16 02:52:38,302:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274477B990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:38,302:INFO:Checking exceptions
2025-03-16 02:52:38,302:INFO:Preloading libraries
2025-03-16 02:52:38,302:INFO:Set up data.
2025-03-16 02:52:38,306:INFO:Set up index.
2025-03-16 02:52:38,429:INFO:Initializing predict_model()
2025-03-16 02:52:38,429:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F7579D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:38,429:INFO:Checking exceptions
2025-03-16 02:52:38,429:INFO:Preloading libraries
2025-03-16 02:52:38,429:INFO:Set up data.
2025-03-16 02:52:38,432:INFO:Set up index.
2025-03-16 02:52:38,553:INFO:Initializing predict_model()
2025-03-16 02:52:38,553:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D718390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:38,553:INFO:Checking exceptions
2025-03-16 02:52:38,553:INFO:Preloading libraries
2025-03-16 02:52:38,553:INFO:Set up data.
2025-03-16 02:52:38,556:INFO:Set up index.
2025-03-16 02:52:38,673:INFO:Initializing predict_model()
2025-03-16 02:52:38,673:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F413090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:38,673:INFO:Checking exceptions
2025-03-16 02:52:38,673:INFO:Preloading libraries
2025-03-16 02:52:38,673:INFO:Set up data.
2025-03-16 02:52:38,676:INFO:Set up index.
2025-03-16 02:52:38,795:INFO:Initializing predict_model()
2025-03-16 02:52:38,795:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227436FBA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:38,795:INFO:Checking exceptions
2025-03-16 02:52:38,795:INFO:Preloading libraries
2025-03-16 02:52:38,795:INFO:Set up data.
2025-03-16 02:52:38,798:INFO:Set up index.
2025-03-16 02:52:38,916:INFO:Initializing predict_model()
2025-03-16 02:52:38,917:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743733A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:38,917:INFO:Checking exceptions
2025-03-16 02:52:38,917:INFO:Preloading libraries
2025-03-16 02:52:38,917:INFO:Set up data.
2025-03-16 02:52:38,919:INFO:Set up index.
2025-03-16 02:52:39,040:INFO:Initializing predict_model()
2025-03-16 02:52:39,040:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457CC950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:39,042:INFO:Checking exceptions
2025-03-16 02:52:39,042:INFO:Preloading libraries
2025-03-16 02:52:39,042:INFO:Set up data.
2025-03-16 02:52:39,045:INFO:Set up index.
2025-03-16 02:52:39,168:INFO:Initializing predict_model()
2025-03-16 02:52:39,168:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274554BF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:39,168:INFO:Checking exceptions
2025-03-16 02:52:39,168:INFO:Preloading libraries
2025-03-16 02:52:39,168:INFO:Set up data.
2025-03-16 02:52:39,170:INFO:Set up index.
2025-03-16 02:52:39,290:INFO:Initializing predict_model()
2025-03-16 02:52:39,290:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DE67910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:39,290:INFO:Checking exceptions
2025-03-16 02:52:39,290:INFO:Preloading libraries
2025-03-16 02:52:39,290:INFO:Set up data.
2025-03-16 02:52:39,293:INFO:Set up index.
2025-03-16 02:52:39,420:INFO:Initializing predict_model()
2025-03-16 02:52:39,420:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270A04A8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:39,420:INFO:Checking exceptions
2025-03-16 02:52:39,420:INFO:Preloading libraries
2025-03-16 02:52:39,420:INFO:Set up data.
2025-03-16 02:52:39,423:INFO:Set up index.
2025-03-16 02:52:39,541:INFO:Initializing predict_model()
2025-03-16 02:52:39,541:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457CE090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:39,541:INFO:Checking exceptions
2025-03-16 02:52:39,541:INFO:Preloading libraries
2025-03-16 02:52:39,541:INFO:Set up data.
2025-03-16 02:52:39,544:INFO:Set up index.
2025-03-16 02:52:39,669:INFO:Initializing predict_model()
2025-03-16 02:52:39,669:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227437246D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:39,669:INFO:Checking exceptions
2025-03-16 02:52:39,669:INFO:Preloading libraries
2025-03-16 02:52:39,669:INFO:Set up data.
2025-03-16 02:52:39,673:INFO:Set up index.
2025-03-16 02:52:39,790:INFO:Initializing predict_model()
2025-03-16 02:52:39,790:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DBF2F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:39,790:INFO:Checking exceptions
2025-03-16 02:52:39,790:INFO:Preloading libraries
2025-03-16 02:52:39,790:INFO:Set up data.
2025-03-16 02:52:39,793:INFO:Set up index.
2025-03-16 02:52:39,916:INFO:Initializing predict_model()
2025-03-16 02:52:39,917:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744917950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:39,917:INFO:Checking exceptions
2025-03-16 02:52:39,917:INFO:Preloading libraries
2025-03-16 02:52:39,917:INFO:Set up data.
2025-03-16 02:52:39,920:INFO:Set up index.
2025-03-16 02:52:40,040:INFO:Initializing predict_model()
2025-03-16 02:52:40,040:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:40,040:INFO:Checking exceptions
2025-03-16 02:52:40,040:INFO:Preloading libraries
2025-03-16 02:52:40,040:INFO:Set up data.
2025-03-16 02:52:40,043:INFO:Set up index.
2025-03-16 02:52:40,163:INFO:Initializing predict_model()
2025-03-16 02:52:40,163:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744771ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:40,163:INFO:Checking exceptions
2025-03-16 02:52:40,163:INFO:Preloading libraries
2025-03-16 02:52:40,163:INFO:Set up data.
2025-03-16 02:52:40,167:INFO:Set up index.
2025-03-16 02:52:40,287:INFO:Initializing predict_model()
2025-03-16 02:52:40,287:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227436FA5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:40,287:INFO:Checking exceptions
2025-03-16 02:52:40,287:INFO:Preloading libraries
2025-03-16 02:52:40,287:INFO:Set up data.
2025-03-16 02:52:40,290:INFO:Set up index.
2025-03-16 02:52:40,407:INFO:Initializing predict_model()
2025-03-16 02:52:40,407:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C02B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:40,407:INFO:Checking exceptions
2025-03-16 02:52:40,408:INFO:Preloading libraries
2025-03-16 02:52:40,408:INFO:Set up data.
2025-03-16 02:52:40,410:INFO:Set up index.
2025-03-16 02:52:40,538:INFO:Initializing predict_model()
2025-03-16 02:52:40,538:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F080390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:40,538:INFO:Checking exceptions
2025-03-16 02:52:40,539:INFO:Preloading libraries
2025-03-16 02:52:40,539:INFO:Set up data.
2025-03-16 02:52:40,541:INFO:Set up index.
2025-03-16 02:52:40,661:INFO:Initializing predict_model()
2025-03-16 02:52:40,661:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743724D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:40,661:INFO:Checking exceptions
2025-03-16 02:52:40,661:INFO:Preloading libraries
2025-03-16 02:52:40,661:INFO:Set up data.
2025-03-16 02:52:40,664:INFO:Set up index.
2025-03-16 02:52:40,792:INFO:Initializing predict_model()
2025-03-16 02:52:40,792:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741EDC290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:40,792:INFO:Checking exceptions
2025-03-16 02:52:40,792:INFO:Preloading libraries
2025-03-16 02:52:40,792:INFO:Set up data.
2025-03-16 02:52:40,794:INFO:Set up index.
2025-03-16 02:52:40,914:INFO:Initializing predict_model()
2025-03-16 02:52:40,914:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455D5590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:40,914:INFO:Checking exceptions
2025-03-16 02:52:40,914:INFO:Preloading libraries
2025-03-16 02:52:40,916:INFO:Set up data.
2025-03-16 02:52:40,918:INFO:Set up index.
2025-03-16 02:52:41,056:INFO:Initializing predict_model()
2025-03-16 02:52:41,056:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744915C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:41,056:INFO:Checking exceptions
2025-03-16 02:52:41,056:INFO:Preloading libraries
2025-03-16 02:52:41,056:INFO:Set up data.
2025-03-16 02:52:41,060:INFO:Set up index.
2025-03-16 02:52:41,188:INFO:Initializing predict_model()
2025-03-16 02:52:41,188:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447D3490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:41,188:INFO:Checking exceptions
2025-03-16 02:52:41,188:INFO:Preloading libraries
2025-03-16 02:52:41,188:INFO:Set up data.
2025-03-16 02:52:41,191:INFO:Set up index.
2025-03-16 02:52:41,336:INFO:Initializing predict_model()
2025-03-16 02:52:41,338:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C02D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:41,338:INFO:Checking exceptions
2025-03-16 02:52:41,338:INFO:Preloading libraries
2025-03-16 02:52:41,338:INFO:Set up data.
2025-03-16 02:52:41,342:INFO:Set up index.
2025-03-16 02:52:41,490:INFO:Initializing predict_model()
2025-03-16 02:52:41,490:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227413A8B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:41,490:INFO:Checking exceptions
2025-03-16 02:52:41,490:INFO:Preloading libraries
2025-03-16 02:52:41,490:INFO:Set up data.
2025-03-16 02:52:41,493:INFO:Set up index.
2025-03-16 02:52:41,617:INFO:Initializing predict_model()
2025-03-16 02:52:41,617:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741EDC290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:41,617:INFO:Checking exceptions
2025-03-16 02:52:41,617:INFO:Preloading libraries
2025-03-16 02:52:41,617:INFO:Set up data.
2025-03-16 02:52:41,620:INFO:Set up index.
2025-03-16 02:52:41,739:INFO:Initializing predict_model()
2025-03-16 02:52:41,739:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744916A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:41,739:INFO:Checking exceptions
2025-03-16 02:52:41,739:INFO:Preloading libraries
2025-03-16 02:52:41,739:INFO:Set up data.
2025-03-16 02:52:41,742:INFO:Set up index.
2025-03-16 02:52:41,859:INFO:Initializing predict_model()
2025-03-16 02:52:41,859:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227449154D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:41,859:INFO:Checking exceptions
2025-03-16 02:52:41,859:INFO:Preloading libraries
2025-03-16 02:52:41,859:INFO:Set up data.
2025-03-16 02:52:41,862:INFO:Set up index.
2025-03-16 02:52:41,987:INFO:Initializing predict_model()
2025-03-16 02:52:41,987:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227439E0750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:41,987:INFO:Checking exceptions
2025-03-16 02:52:41,987:INFO:Preloading libraries
2025-03-16 02:52:41,987:INFO:Set up data.
2025-03-16 02:52:41,990:INFO:Set up index.
2025-03-16 02:52:42,109:INFO:Initializing predict_model()
2025-03-16 02:52:42,109:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227439F8990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:42,109:INFO:Checking exceptions
2025-03-16 02:52:42,109:INFO:Preloading libraries
2025-03-16 02:52:42,109:INFO:Set up data.
2025-03-16 02:52:42,112:INFO:Set up index.
2025-03-16 02:52:42,238:INFO:Initializing predict_model()
2025-03-16 02:52:42,238:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C03CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:42,238:INFO:Checking exceptions
2025-03-16 02:52:42,238:INFO:Preloading libraries
2025-03-16 02:52:42,238:INFO:Set up data.
2025-03-16 02:52:42,241:INFO:Set up index.
2025-03-16 02:52:42,360:INFO:Initializing predict_model()
2025-03-16 02:52:42,360:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F2C5890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:42,360:INFO:Checking exceptions
2025-03-16 02:52:42,360:INFO:Preloading libraries
2025-03-16 02:52:42,360:INFO:Set up data.
2025-03-16 02:52:42,363:INFO:Set up index.
2025-03-16 02:52:42,484:INFO:Initializing predict_model()
2025-03-16 02:52:42,484:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274388BC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:42,484:INFO:Checking exceptions
2025-03-16 02:52:42,484:INFO:Preloading libraries
2025-03-16 02:52:42,484:INFO:Set up data.
2025-03-16 02:52:42,487:INFO:Set up index.
2025-03-16 02:52:42,606:INFO:Initializing predict_model()
2025-03-16 02:52:42,606:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D718390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:42,606:INFO:Checking exceptions
2025-03-16 02:52:42,606:INFO:Preloading libraries
2025-03-16 02:52:42,606:INFO:Set up data.
2025-03-16 02:52:42,609:INFO:Set up index.
2025-03-16 02:52:42,727:INFO:Initializing predict_model()
2025-03-16 02:52:42,728:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273BAA2F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:42,728:INFO:Checking exceptions
2025-03-16 02:52:42,728:INFO:Preloading libraries
2025-03-16 02:52:42,728:INFO:Set up data.
2025-03-16 02:52:42,729:INFO:Set up index.
2025-03-16 02:52:42,852:INFO:Initializing predict_model()
2025-03-16 02:52:42,852:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743843A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:42,852:INFO:Checking exceptions
2025-03-16 02:52:42,852:INFO:Preloading libraries
2025-03-16 02:52:42,852:INFO:Set up data.
2025-03-16 02:52:42,855:INFO:Set up index.
2025-03-16 02:52:42,976:INFO:Initializing predict_model()
2025-03-16 02:52:42,976:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273BAA2F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:42,976:INFO:Checking exceptions
2025-03-16 02:52:42,976:INFO:Preloading libraries
2025-03-16 02:52:42,976:INFO:Set up data.
2025-03-16 02:52:42,979:INFO:Set up index.
2025-03-16 02:52:43,098:INFO:Initializing predict_model()
2025-03-16 02:52:43,098:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227446ECA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:43,098:INFO:Checking exceptions
2025-03-16 02:52:43,098:INFO:Preloading libraries
2025-03-16 02:52:43,098:INFO:Set up data.
2025-03-16 02:52:43,101:INFO:Set up index.
2025-03-16 02:52:43,226:INFO:Initializing predict_model()
2025-03-16 02:52:43,226:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D718390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:43,226:INFO:Checking exceptions
2025-03-16 02:52:43,226:INFO:Preloading libraries
2025-03-16 02:52:43,227:INFO:Set up data.
2025-03-16 02:52:43,229:INFO:Set up index.
2025-03-16 02:52:43,362:INFO:Initializing predict_model()
2025-03-16 02:52:43,363:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC5CC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:43,363:INFO:Checking exceptions
2025-03-16 02:52:43,363:INFO:Preloading libraries
2025-03-16 02:52:43,363:INFO:Set up data.
2025-03-16 02:52:43,367:INFO:Set up index.
2025-03-16 02:52:43,505:INFO:Initializing predict_model()
2025-03-16 02:52:43,505:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741ED6F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:43,505:INFO:Checking exceptions
2025-03-16 02:52:43,505:INFO:Preloading libraries
2025-03-16 02:52:43,505:INFO:Set up data.
2025-03-16 02:52:43,509:INFO:Set up index.
2025-03-16 02:52:43,642:INFO:Initializing predict_model()
2025-03-16 02:52:43,642:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744502610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:43,643:INFO:Checking exceptions
2025-03-16 02:52:43,643:INFO:Preloading libraries
2025-03-16 02:52:43,643:INFO:Set up data.
2025-03-16 02:52:43,646:INFO:Set up index.
2025-03-16 02:52:43,782:INFO:Initializing predict_model()
2025-03-16 02:52:43,782:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227439E3B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:43,782:INFO:Checking exceptions
2025-03-16 02:52:43,782:INFO:Preloading libraries
2025-03-16 02:52:43,782:INFO:Set up data.
2025-03-16 02:52:43,786:INFO:Set up index.
2025-03-16 02:52:43,928:INFO:Initializing predict_model()
2025-03-16 02:52:43,928:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741EDC450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:43,928:INFO:Checking exceptions
2025-03-16 02:52:43,928:INFO:Preloading libraries
2025-03-16 02:52:43,928:INFO:Set up data.
2025-03-16 02:52:43,931:INFO:Set up index.
2025-03-16 02:52:44,063:INFO:Initializing predict_model()
2025-03-16 02:52:44,063:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227436B7250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:44,063:INFO:Checking exceptions
2025-03-16 02:52:44,063:INFO:Preloading libraries
2025-03-16 02:52:44,063:INFO:Set up data.
2025-03-16 02:52:44,067:INFO:Set up index.
2025-03-16 02:52:44,199:INFO:Initializing predict_model()
2025-03-16 02:52:44,199:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274386E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:44,199:INFO:Checking exceptions
2025-03-16 02:52:44,199:INFO:Preloading libraries
2025-03-16 02:52:44,199:INFO:Set up data.
2025-03-16 02:52:44,202:INFO:Set up index.
2025-03-16 02:52:44,340:INFO:Initializing predict_model()
2025-03-16 02:52:44,340:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743758850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:44,340:INFO:Checking exceptions
2025-03-16 02:52:44,340:INFO:Preloading libraries
2025-03-16 02:52:44,340:INFO:Set up data.
2025-03-16 02:52:44,346:INFO:Set up index.
2025-03-16 02:52:44,477:INFO:Initializing predict_model()
2025-03-16 02:52:44,477:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:44,477:INFO:Checking exceptions
2025-03-16 02:52:44,477:INFO:Preloading libraries
2025-03-16 02:52:44,477:INFO:Set up data.
2025-03-16 02:52:44,480:INFO:Set up index.
2025-03-16 02:52:44,605:INFO:Initializing predict_model()
2025-03-16 02:52:44,605:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743840D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:44,605:INFO:Checking exceptions
2025-03-16 02:52:44,605:INFO:Preloading libraries
2025-03-16 02:52:44,606:INFO:Set up data.
2025-03-16 02:52:44,608:INFO:Set up index.
2025-03-16 02:52:44,733:INFO:Initializing predict_model()
2025-03-16 02:52:44,733:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270BC9BCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:44,733:INFO:Checking exceptions
2025-03-16 02:52:44,733:INFO:Preloading libraries
2025-03-16 02:52:44,733:INFO:Set up data.
2025-03-16 02:52:44,737:INFO:Set up index.
2025-03-16 02:52:44,860:INFO:Initializing predict_model()
2025-03-16 02:52:44,860:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547CD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:44,860:INFO:Checking exceptions
2025-03-16 02:52:44,860:INFO:Preloading libraries
2025-03-16 02:52:44,860:INFO:Set up data.
2025-03-16 02:52:44,863:INFO:Set up index.
2025-03-16 02:52:44,980:INFO:Initializing predict_model()
2025-03-16 02:52:44,980:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744464F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:44,980:INFO:Checking exceptions
2025-03-16 02:52:44,980:INFO:Preloading libraries
2025-03-16 02:52:44,980:INFO:Set up data.
2025-03-16 02:52:44,983:INFO:Set up index.
2025-03-16 02:52:45,102:INFO:Initializing predict_model()
2025-03-16 02:52:45,102:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F081650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:45,102:INFO:Checking exceptions
2025-03-16 02:52:45,102:INFO:Preloading libraries
2025-03-16 02:52:45,102:INFO:Set up data.
2025-03-16 02:52:45,106:INFO:Set up index.
2025-03-16 02:52:45,227:INFO:Initializing predict_model()
2025-03-16 02:52:45,227:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B802410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:45,227:INFO:Checking exceptions
2025-03-16 02:52:45,227:INFO:Preloading libraries
2025-03-16 02:52:45,228:INFO:Set up data.
2025-03-16 02:52:45,230:INFO:Set up index.
2025-03-16 02:52:45,355:INFO:Initializing predict_model()
2025-03-16 02:52:45,355:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DDB6590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:45,355:INFO:Checking exceptions
2025-03-16 02:52:45,355:INFO:Preloading libraries
2025-03-16 02:52:45,355:INFO:Set up data.
2025-03-16 02:52:45,357:INFO:Set up index.
2025-03-16 02:52:45,499:INFO:Initializing predict_model()
2025-03-16 02:52:45,499:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:45,499:INFO:Checking exceptions
2025-03-16 02:52:45,499:INFO:Preloading libraries
2025-03-16 02:52:45,499:INFO:Set up data.
2025-03-16 02:52:45,515:INFO:Set up index.
2025-03-16 02:52:45,716:INFO:Initializing predict_model()
2025-03-16 02:52:45,717:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274554AB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:45,717:INFO:Checking exceptions
2025-03-16 02:52:45,717:INFO:Preloading libraries
2025-03-16 02:52:45,717:INFO:Set up data.
2025-03-16 02:52:45,719:INFO:Set up index.
2025-03-16 02:52:45,865:INFO:Initializing predict_model()
2025-03-16 02:52:45,865:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227437246D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:45,865:INFO:Checking exceptions
2025-03-16 02:52:45,865:INFO:Preloading libraries
2025-03-16 02:52:45,865:INFO:Set up data.
2025-03-16 02:52:45,868:INFO:Set up index.
2025-03-16 02:52:45,995:INFO:Initializing predict_model()
2025-03-16 02:52:45,996:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B1E3690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:45,996:INFO:Checking exceptions
2025-03-16 02:52:45,996:INFO:Preloading libraries
2025-03-16 02:52:45,996:INFO:Set up data.
2025-03-16 02:52:45,998:INFO:Set up index.
2025-03-16 02:52:46,128:INFO:Initializing predict_model()
2025-03-16 02:52:46,128:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FCD6ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:46,128:INFO:Checking exceptions
2025-03-16 02:52:46,128:INFO:Preloading libraries
2025-03-16 02:52:46,128:INFO:Set up data.
2025-03-16 02:52:46,133:INFO:Set up index.
2025-03-16 02:52:46,295:INFO:Initializing predict_model()
2025-03-16 02:52:46,295:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743843A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:46,295:INFO:Checking exceptions
2025-03-16 02:52:46,295:INFO:Preloading libraries
2025-03-16 02:52:46,296:INFO:Set up data.
2025-03-16 02:52:46,299:INFO:Set up index.
2025-03-16 02:52:46,437:INFO:Initializing predict_model()
2025-03-16 02:52:46,437:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447696D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:46,437:INFO:Checking exceptions
2025-03-16 02:52:46,437:INFO:Preloading libraries
2025-03-16 02:52:46,437:INFO:Set up data.
2025-03-16 02:52:46,441:INFO:Set up index.
2025-03-16 02:52:46,571:INFO:Initializing predict_model()
2025-03-16 02:52:46,571:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744917E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:46,571:INFO:Checking exceptions
2025-03-16 02:52:46,571:INFO:Preloading libraries
2025-03-16 02:52:46,571:INFO:Set up data.
2025-03-16 02:52:46,574:INFO:Set up index.
2025-03-16 02:52:46,707:INFO:Initializing predict_model()
2025-03-16 02:52:46,707:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FBE6F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:46,707:INFO:Checking exceptions
2025-03-16 02:52:46,707:INFO:Preloading libraries
2025-03-16 02:52:46,707:INFO:Set up data.
2025-03-16 02:52:46,710:INFO:Set up index.
2025-03-16 02:52:46,838:INFO:Initializing predict_model()
2025-03-16 02:52:46,838:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FCF6F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:46,838:INFO:Checking exceptions
2025-03-16 02:52:46,838:INFO:Preloading libraries
2025-03-16 02:52:46,838:INFO:Set up data.
2025-03-16 02:52:46,841:INFO:Set up index.
2025-03-16 02:52:46,964:INFO:Initializing predict_model()
2025-03-16 02:52:46,964:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744770290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:46,964:INFO:Checking exceptions
2025-03-16 02:52:46,964:INFO:Preloading libraries
2025-03-16 02:52:46,964:INFO:Set up data.
2025-03-16 02:52:46,967:INFO:Set up index.
2025-03-16 02:52:47,088:INFO:Initializing predict_model()
2025-03-16 02:52:47,088:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743715CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022723A10FE0>)
2025-03-16 02:52:47,088:INFO:Checking exceptions
2025-03-16 02:52:47,088:INFO:Preloading libraries
2025-03-16 02:52:47,088:INFO:Set up data.
2025-03-16 02:52:47,091:INFO:Set up index.
2025-03-16 02:52:47,218:INFO:Initializing load_model()
2025-03-16 02:52:47,218:INFO:load_model(model_name=../eng_psu_hatyai/main/humi_use_temp_model_2, platform=None, authentication=None, verbose=True)
2025-03-16 02:52:47,292:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:52:47,292:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:52:47,292:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:52:47,292:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:52:47,292:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:52:47,294:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:52:47,294:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:3: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'humidity_lag_{i}'] = data_humi['humidity'].shift(i)

2025-03-16 02:52:47,294:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:52:47,294:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:52:47,295:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:52:47,295:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:52:47,295:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_6760\2603883571.py:6: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  data_humi[f'temperature_lag_{i}'] = data_humi['temperature'].shift(i)

2025-03-16 02:52:47,323:INFO:Initializing predict_model()
2025-03-16 02:52:47,323:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274579DCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FF967A0>)
2025-03-16 02:52:47,323:INFO:Checking exceptions
2025-03-16 02:52:47,323:INFO:Preloading libraries
2025-03-16 02:52:47,323:INFO:Set up data.
2025-03-16 02:52:47,327:INFO:Set up index.
2025-03-16 02:53:31,197:INFO:Initializing load_model()
2025-03-16 02:53:31,197:INFO:load_model(model_name=../eng_psu_hatyai/main/lgmb_temp_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 02:53:31,245:INFO:Initializing predict_model()
2025-03-16 02:53:31,245:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745570590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:31,245:INFO:Checking exceptions
2025-03-16 02:53:31,246:INFO:Preloading libraries
2025-03-16 02:53:31,246:INFO:Set up data.
2025-03-16 02:53:31,250:INFO:Set up index.
2025-03-16 02:53:31,382:INFO:Initializing predict_model()
2025-03-16 02:53:31,382:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227448F6A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:31,382:INFO:Checking exceptions
2025-03-16 02:53:31,382:INFO:Preloading libraries
2025-03-16 02:53:31,382:INFO:Set up data.
2025-03-16 02:53:31,385:INFO:Set up index.
2025-03-16 02:53:31,508:INFO:Initializing predict_model()
2025-03-16 02:53:31,508:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743889E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:31,508:INFO:Checking exceptions
2025-03-16 02:53:31,508:INFO:Preloading libraries
2025-03-16 02:53:31,509:INFO:Set up data.
2025-03-16 02:53:31,512:INFO:Set up index.
2025-03-16 02:53:31,636:INFO:Initializing predict_model()
2025-03-16 02:53:31,636:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DD1CB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:31,636:INFO:Checking exceptions
2025-03-16 02:53:31,636:INFO:Preloading libraries
2025-03-16 02:53:31,636:INFO:Set up data.
2025-03-16 02:53:31,639:INFO:Set up index.
2025-03-16 02:53:31,759:INFO:Initializing predict_model()
2025-03-16 02:53:31,759:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741ED6F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:31,759:INFO:Checking exceptions
2025-03-16 02:53:31,759:INFO:Preloading libraries
2025-03-16 02:53:31,759:INFO:Set up data.
2025-03-16 02:53:31,761:INFO:Set up index.
2025-03-16 02:53:31,884:INFO:Initializing predict_model()
2025-03-16 02:53:31,884:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B55D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:31,884:INFO:Checking exceptions
2025-03-16 02:53:31,884:INFO:Preloading libraries
2025-03-16 02:53:31,884:INFO:Set up data.
2025-03-16 02:53:31,887:INFO:Set up index.
2025-03-16 02:53:32,010:INFO:Initializing predict_model()
2025-03-16 02:53:32,010:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743888990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:32,012:INFO:Checking exceptions
2025-03-16 02:53:32,012:INFO:Preloading libraries
2025-03-16 02:53:32,012:INFO:Set up data.
2025-03-16 02:53:32,013:INFO:Set up index.
2025-03-16 02:53:32,140:INFO:Initializing predict_model()
2025-03-16 02:53:32,140:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274545C690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:32,140:INFO:Checking exceptions
2025-03-16 02:53:32,140:INFO:Preloading libraries
2025-03-16 02:53:32,140:INFO:Set up data.
2025-03-16 02:53:32,143:INFO:Set up index.
2025-03-16 02:53:32,271:INFO:Initializing predict_model()
2025-03-16 02:53:32,271:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384C5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:32,271:INFO:Checking exceptions
2025-03-16 02:53:32,271:INFO:Preloading libraries
2025-03-16 02:53:32,271:INFO:Set up data.
2025-03-16 02:53:32,274:INFO:Set up index.
2025-03-16 02:53:32,400:INFO:Initializing predict_model()
2025-03-16 02:53:32,400:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744915AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:32,400:INFO:Checking exceptions
2025-03-16 02:53:32,400:INFO:Preloading libraries
2025-03-16 02:53:32,400:INFO:Set up data.
2025-03-16 02:53:32,403:INFO:Set up index.
2025-03-16 02:53:32,524:INFO:Initializing predict_model()
2025-03-16 02:53:32,524:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D7C4490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:32,524:INFO:Checking exceptions
2025-03-16 02:53:32,524:INFO:Preloading libraries
2025-03-16 02:53:32,524:INFO:Set up data.
2025-03-16 02:53:32,528:INFO:Set up index.
2025-03-16 02:53:32,652:INFO:Initializing predict_model()
2025-03-16 02:53:32,652:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447AC490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:32,652:INFO:Checking exceptions
2025-03-16 02:53:32,652:INFO:Preloading libraries
2025-03-16 02:53:32,652:INFO:Set up data.
2025-03-16 02:53:32,655:INFO:Set up index.
2025-03-16 02:53:32,779:INFO:Initializing predict_model()
2025-03-16 02:53:32,779:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227444B3C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:32,779:INFO:Checking exceptions
2025-03-16 02:53:32,779:INFO:Preloading libraries
2025-03-16 02:53:32,779:INFO:Set up data.
2025-03-16 02:53:32,782:INFO:Set up index.
2025-03-16 02:53:32,909:INFO:Initializing predict_model()
2025-03-16 02:53:32,909:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227449154D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:32,909:INFO:Checking exceptions
2025-03-16 02:53:32,909:INFO:Preloading libraries
2025-03-16 02:53:32,909:INFO:Set up data.
2025-03-16 02:53:32,912:INFO:Set up index.
2025-03-16 02:53:33,036:INFO:Initializing predict_model()
2025-03-16 02:53:33,036:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D7C4490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:33,036:INFO:Checking exceptions
2025-03-16 02:53:33,036:INFO:Preloading libraries
2025-03-16 02:53:33,036:INFO:Set up data.
2025-03-16 02:53:33,039:INFO:Set up index.
2025-03-16 02:53:33,161:INFO:Initializing predict_model()
2025-03-16 02:53:33,161:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FBE6610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:33,161:INFO:Checking exceptions
2025-03-16 02:53:33,161:INFO:Preloading libraries
2025-03-16 02:53:33,161:INFO:Set up data.
2025-03-16 02:53:33,164:INFO:Set up index.
2025-03-16 02:53:33,291:INFO:Initializing predict_model()
2025-03-16 02:53:33,291:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F0A9E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:33,291:INFO:Checking exceptions
2025-03-16 02:53:33,291:INFO:Preloading libraries
2025-03-16 02:53:33,291:INFO:Set up data.
2025-03-16 02:53:33,294:INFO:Set up index.
2025-03-16 02:53:33,416:INFO:Initializing predict_model()
2025-03-16 02:53:33,416:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FCE7AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:33,416:INFO:Checking exceptions
2025-03-16 02:53:33,416:INFO:Preloading libraries
2025-03-16 02:53:33,417:INFO:Set up data.
2025-03-16 02:53:33,419:INFO:Set up index.
2025-03-16 02:53:33,566:INFO:Initializing predict_model()
2025-03-16 02:53:33,566:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:33,566:INFO:Checking exceptions
2025-03-16 02:53:33,566:INFO:Preloading libraries
2025-03-16 02:53:33,566:INFO:Set up data.
2025-03-16 02:53:33,570:INFO:Set up index.
2025-03-16 02:53:33,709:INFO:Initializing predict_model()
2025-03-16 02:53:33,709:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743897D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:33,709:INFO:Checking exceptions
2025-03-16 02:53:33,709:INFO:Preloading libraries
2025-03-16 02:53:33,709:INFO:Set up data.
2025-03-16 02:53:33,712:INFO:Set up index.
2025-03-16 02:53:33,840:INFO:Initializing predict_model()
2025-03-16 02:53:33,840:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227439FAA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:33,840:INFO:Checking exceptions
2025-03-16 02:53:33,840:INFO:Preloading libraries
2025-03-16 02:53:33,840:INFO:Set up data.
2025-03-16 02:53:33,843:INFO:Set up index.
2025-03-16 02:53:33,967:INFO:Initializing predict_model()
2025-03-16 02:53:33,967:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227439F8090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:33,967:INFO:Checking exceptions
2025-03-16 02:53:33,969:INFO:Preloading libraries
2025-03-16 02:53:33,969:INFO:Set up data.
2025-03-16 02:53:33,972:INFO:Set up index.
2025-03-16 02:53:34,099:INFO:Initializing predict_model()
2025-03-16 02:53:34,099:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274535AB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:34,099:INFO:Checking exceptions
2025-03-16 02:53:34,099:INFO:Preloading libraries
2025-03-16 02:53:34,099:INFO:Set up data.
2025-03-16 02:53:34,102:INFO:Set up index.
2025-03-16 02:53:34,227:INFO:Initializing predict_model()
2025-03-16 02:53:34,227:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B6510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:34,227:INFO:Checking exceptions
2025-03-16 02:53:34,227:INFO:Preloading libraries
2025-03-16 02:53:34,227:INFO:Set up data.
2025-03-16 02:53:34,229:INFO:Set up index.
2025-03-16 02:53:34,352:INFO:Initializing predict_model()
2025-03-16 02:53:34,352:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227449154D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:34,352:INFO:Checking exceptions
2025-03-16 02:53:34,352:INFO:Preloading libraries
2025-03-16 02:53:34,352:INFO:Set up data.
2025-03-16 02:53:34,356:INFO:Set up index.
2025-03-16 02:53:34,482:INFO:Initializing predict_model()
2025-03-16 02:53:34,482:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B1E4E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:34,482:INFO:Checking exceptions
2025-03-16 02:53:34,482:INFO:Preloading libraries
2025-03-16 02:53:34,482:INFO:Set up data.
2025-03-16 02:53:34,483:INFO:Set up index.
2025-03-16 02:53:34,605:INFO:Initializing predict_model()
2025-03-16 02:53:34,605:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447D18D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:34,605:INFO:Checking exceptions
2025-03-16 02:53:34,605:INFO:Preloading libraries
2025-03-16 02:53:34,605:INFO:Set up data.
2025-03-16 02:53:34,608:INFO:Set up index.
2025-03-16 02:53:34,733:INFO:Initializing predict_model()
2025-03-16 02:53:34,735:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC4DE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:34,735:INFO:Checking exceptions
2025-03-16 02:53:34,735:INFO:Preloading libraries
2025-03-16 02:53:34,735:INFO:Set up data.
2025-03-16 02:53:34,737:INFO:Set up index.
2025-03-16 02:53:34,860:INFO:Initializing predict_model()
2025-03-16 02:53:34,860:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274371A190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:34,860:INFO:Checking exceptions
2025-03-16 02:53:34,860:INFO:Preloading libraries
2025-03-16 02:53:34,860:INFO:Set up data.
2025-03-16 02:53:34,863:INFO:Set up index.
2025-03-16 02:53:34,989:INFO:Initializing predict_model()
2025-03-16 02:53:34,989:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447BC390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:34,989:INFO:Checking exceptions
2025-03-16 02:53:34,989:INFO:Preloading libraries
2025-03-16 02:53:34,989:INFO:Set up data.
2025-03-16 02:53:34,992:INFO:Set up index.
2025-03-16 02:53:35,122:INFO:Initializing predict_model()
2025-03-16 02:53:35,122:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274388BD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:35,122:INFO:Checking exceptions
2025-03-16 02:53:35,122:INFO:Preloading libraries
2025-03-16 02:53:35,122:INFO:Set up data.
2025-03-16 02:53:35,126:INFO:Set up index.
2025-03-16 02:53:35,256:INFO:Initializing predict_model()
2025-03-16 02:53:35,256:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227448E5AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:35,256:INFO:Checking exceptions
2025-03-16 02:53:35,256:INFO:Preloading libraries
2025-03-16 02:53:35,256:INFO:Set up data.
2025-03-16 02:53:35,258:INFO:Set up index.
2025-03-16 02:53:35,378:INFO:Initializing predict_model()
2025-03-16 02:53:35,378:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B4350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:35,378:INFO:Checking exceptions
2025-03-16 02:53:35,378:INFO:Preloading libraries
2025-03-16 02:53:35,378:INFO:Set up data.
2025-03-16 02:53:35,381:INFO:Set up index.
2025-03-16 02:53:35,503:INFO:Initializing predict_model()
2025-03-16 02:53:35,503:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B1E2210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:35,503:INFO:Checking exceptions
2025-03-16 02:53:35,503:INFO:Preloading libraries
2025-03-16 02:53:35,503:INFO:Set up data.
2025-03-16 02:53:35,506:INFO:Set up index.
2025-03-16 02:53:35,634:INFO:Initializing predict_model()
2025-03-16 02:53:35,634:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744695B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:35,634:INFO:Checking exceptions
2025-03-16 02:53:35,634:INFO:Preloading libraries
2025-03-16 02:53:35,634:INFO:Set up data.
2025-03-16 02:53:35,637:INFO:Set up index.
2025-03-16 02:53:35,757:INFO:Initializing predict_model()
2025-03-16 02:53:35,757:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438403D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:35,757:INFO:Checking exceptions
2025-03-16 02:53:35,757:INFO:Preloading libraries
2025-03-16 02:53:35,757:INFO:Set up data.
2025-03-16 02:53:35,760:INFO:Set up index.
2025-03-16 02:53:35,880:INFO:Initializing predict_model()
2025-03-16 02:53:35,880:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD156D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:35,880:INFO:Checking exceptions
2025-03-16 02:53:35,880:INFO:Preloading libraries
2025-03-16 02:53:35,880:INFO:Set up data.
2025-03-16 02:53:35,883:INFO:Set up index.
2025-03-16 02:53:36,011:INFO:Initializing predict_model()
2025-03-16 02:53:36,011:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445EE690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:36,011:INFO:Checking exceptions
2025-03-16 02:53:36,011:INFO:Preloading libraries
2025-03-16 02:53:36,011:INFO:Set up data.
2025-03-16 02:53:36,014:INFO:Set up index.
2025-03-16 02:53:36,145:INFO:Initializing predict_model()
2025-03-16 02:53:36,145:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274539C490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:36,145:INFO:Checking exceptions
2025-03-16 02:53:36,145:INFO:Preloading libraries
2025-03-16 02:53:36,146:INFO:Set up data.
2025-03-16 02:53:36,148:INFO:Set up index.
2025-03-16 02:53:36,278:INFO:Initializing predict_model()
2025-03-16 02:53:36,278:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B4290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:36,278:INFO:Checking exceptions
2025-03-16 02:53:36,278:INFO:Preloading libraries
2025-03-16 02:53:36,278:INFO:Set up data.
2025-03-16 02:53:36,282:INFO:Set up index.
2025-03-16 02:53:36,404:INFO:Initializing predict_model()
2025-03-16 02:53:36,404:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227448FF610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:36,404:INFO:Checking exceptions
2025-03-16 02:53:36,404:INFO:Preloading libraries
2025-03-16 02:53:36,404:INFO:Set up data.
2025-03-16 02:53:36,407:INFO:Set up index.
2025-03-16 02:53:36,526:INFO:Initializing predict_model()
2025-03-16 02:53:36,526:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227446D6410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:36,526:INFO:Checking exceptions
2025-03-16 02:53:36,526:INFO:Preloading libraries
2025-03-16 02:53:36,526:INFO:Set up data.
2025-03-16 02:53:36,528:INFO:Set up index.
2025-03-16 02:53:36,658:INFO:Initializing predict_model()
2025-03-16 02:53:36,658:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD35950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:36,658:INFO:Checking exceptions
2025-03-16 02:53:36,658:INFO:Preloading libraries
2025-03-16 02:53:36,658:INFO:Set up data.
2025-03-16 02:53:36,661:INFO:Set up index.
2025-03-16 02:53:36,789:INFO:Initializing predict_model()
2025-03-16 02:53:36,789:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD41650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:36,789:INFO:Checking exceptions
2025-03-16 02:53:36,789:INFO:Preloading libraries
2025-03-16 02:53:36,789:INFO:Set up data.
2025-03-16 02:53:36,792:INFO:Set up index.
2025-03-16 02:53:36,920:INFO:Initializing predict_model()
2025-03-16 02:53:36,920:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445ED110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:36,920:INFO:Checking exceptions
2025-03-16 02:53:36,920:INFO:Preloading libraries
2025-03-16 02:53:36,920:INFO:Set up data.
2025-03-16 02:53:36,921:INFO:Set up index.
2025-03-16 02:53:37,049:INFO:Initializing predict_model()
2025-03-16 02:53:37,049:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F02FA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:37,049:INFO:Checking exceptions
2025-03-16 02:53:37,049:INFO:Preloading libraries
2025-03-16 02:53:37,049:INFO:Set up data.
2025-03-16 02:53:37,053:INFO:Set up index.
2025-03-16 02:53:37,170:INFO:Initializing predict_model()
2025-03-16 02:53:37,172:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445ED110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:37,172:INFO:Checking exceptions
2025-03-16 02:53:37,172:INFO:Preloading libraries
2025-03-16 02:53:37,172:INFO:Set up data.
2025-03-16 02:53:37,173:INFO:Set up index.
2025-03-16 02:53:37,298:INFO:Initializing predict_model()
2025-03-16 02:53:37,298:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274388B050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:37,298:INFO:Checking exceptions
2025-03-16 02:53:37,298:INFO:Preloading libraries
2025-03-16 02:53:37,298:INFO:Set up data.
2025-03-16 02:53:37,301:INFO:Set up index.
2025-03-16 02:53:37,433:INFO:Initializing predict_model()
2025-03-16 02:53:37,433:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227449403D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:37,435:INFO:Checking exceptions
2025-03-16 02:53:37,435:INFO:Preloading libraries
2025-03-16 02:53:37,435:INFO:Set up data.
2025-03-16 02:53:37,438:INFO:Set up index.
2025-03-16 02:53:37,558:INFO:Initializing predict_model()
2025-03-16 02:53:37,558:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC4C490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:37,558:INFO:Checking exceptions
2025-03-16 02:53:37,558:INFO:Preloading libraries
2025-03-16 02:53:37,558:INFO:Set up data.
2025-03-16 02:53:37,560:INFO:Set up index.
2025-03-16 02:53:37,687:INFO:Initializing predict_model()
2025-03-16 02:53:37,687:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447AC490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:37,687:INFO:Checking exceptions
2025-03-16 02:53:37,687:INFO:Preloading libraries
2025-03-16 02:53:37,688:INFO:Set up data.
2025-03-16 02:53:37,691:INFO:Set up index.
2025-03-16 02:53:37,820:INFO:Initializing predict_model()
2025-03-16 02:53:37,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455E1710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:37,820:INFO:Checking exceptions
2025-03-16 02:53:37,820:INFO:Preloading libraries
2025-03-16 02:53:37,820:INFO:Set up data.
2025-03-16 02:53:37,823:INFO:Set up index.
2025-03-16 02:53:37,946:INFO:Initializing predict_model()
2025-03-16 02:53:37,946:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745570850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:37,946:INFO:Checking exceptions
2025-03-16 02:53:37,946:INFO:Preloading libraries
2025-03-16 02:53:37,947:INFO:Set up data.
2025-03-16 02:53:37,949:INFO:Set up index.
2025-03-16 02:53:38,077:INFO:Initializing predict_model()
2025-03-16 02:53:38,077:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741EDD750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:38,077:INFO:Checking exceptions
2025-03-16 02:53:38,077:INFO:Preloading libraries
2025-03-16 02:53:38,077:INFO:Set up data.
2025-03-16 02:53:38,080:INFO:Set up index.
2025-03-16 02:53:38,207:INFO:Initializing predict_model()
2025-03-16 02:53:38,207:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227449403D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:38,207:INFO:Checking exceptions
2025-03-16 02:53:38,207:INFO:Preloading libraries
2025-03-16 02:53:38,209:INFO:Set up data.
2025-03-16 02:53:38,210:INFO:Set up index.
2025-03-16 02:53:38,340:INFO:Initializing predict_model()
2025-03-16 02:53:38,340:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227449403D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:38,340:INFO:Checking exceptions
2025-03-16 02:53:38,340:INFO:Preloading libraries
2025-03-16 02:53:38,340:INFO:Set up data.
2025-03-16 02:53:38,344:INFO:Set up index.
2025-03-16 02:53:38,472:INFO:Initializing predict_model()
2025-03-16 02:53:38,472:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274476B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:38,472:INFO:Checking exceptions
2025-03-16 02:53:38,472:INFO:Preloading libraries
2025-03-16 02:53:38,472:INFO:Set up data.
2025-03-16 02:53:38,475:INFO:Set up index.
2025-03-16 02:53:38,601:INFO:Initializing predict_model()
2025-03-16 02:53:38,601:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C4F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:38,601:INFO:Checking exceptions
2025-03-16 02:53:38,601:INFO:Preloading libraries
2025-03-16 02:53:38,601:INFO:Set up data.
2025-03-16 02:53:38,603:INFO:Set up index.
2025-03-16 02:53:38,728:INFO:Initializing predict_model()
2025-03-16 02:53:38,729:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447D2150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:38,729:INFO:Checking exceptions
2025-03-16 02:53:38,729:INFO:Preloading libraries
2025-03-16 02:53:38,729:INFO:Set up data.
2025-03-16 02:53:38,732:INFO:Set up index.
2025-03-16 02:53:38,852:INFO:Initializing predict_model()
2025-03-16 02:53:38,852:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445D7D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:38,852:INFO:Checking exceptions
2025-03-16 02:53:38,852:INFO:Preloading libraries
2025-03-16 02:53:38,852:INFO:Set up data.
2025-03-16 02:53:38,855:INFO:Set up index.
2025-03-16 02:53:38,975:INFO:Initializing predict_model()
2025-03-16 02:53:38,975:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447AD110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:38,975:INFO:Checking exceptions
2025-03-16 02:53:38,975:INFO:Preloading libraries
2025-03-16 02:53:38,975:INFO:Set up data.
2025-03-16 02:53:38,979:INFO:Set up index.
2025-03-16 02:53:39,099:INFO:Initializing predict_model()
2025-03-16 02:53:39,099:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744500F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:39,099:INFO:Checking exceptions
2025-03-16 02:53:39,099:INFO:Preloading libraries
2025-03-16 02:53:39,099:INFO:Set up data.
2025-03-16 02:53:39,102:INFO:Set up index.
2025-03-16 02:53:39,224:INFO:Initializing predict_model()
2025-03-16 02:53:39,224:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384CB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:39,224:INFO:Checking exceptions
2025-03-16 02:53:39,224:INFO:Preloading libraries
2025-03-16 02:53:39,224:INFO:Set up data.
2025-03-16 02:53:39,227:INFO:Set up index.
2025-03-16 02:53:39,374:INFO:Initializing predict_model()
2025-03-16 02:53:39,374:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744720A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:39,374:INFO:Checking exceptions
2025-03-16 02:53:39,374:INFO:Preloading libraries
2025-03-16 02:53:39,375:INFO:Set up data.
2025-03-16 02:53:39,379:INFO:Set up index.
2025-03-16 02:53:39,540:INFO:Initializing predict_model()
2025-03-16 02:53:39,540:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227448E5AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:39,540:INFO:Checking exceptions
2025-03-16 02:53:39,540:INFO:Preloading libraries
2025-03-16 02:53:39,540:INFO:Set up data.
2025-03-16 02:53:39,543:INFO:Set up index.
2025-03-16 02:53:39,681:INFO:Initializing predict_model()
2025-03-16 02:53:39,681:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F757790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:39,681:INFO:Checking exceptions
2025-03-16 02:53:39,681:INFO:Preloading libraries
2025-03-16 02:53:39,683:INFO:Set up data.
2025-03-16 02:53:39,684:INFO:Set up index.
2025-03-16 02:53:39,810:INFO:Initializing predict_model()
2025-03-16 02:53:39,810:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F02FB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:39,810:INFO:Checking exceptions
2025-03-16 02:53:39,810:INFO:Preloading libraries
2025-03-16 02:53:39,810:INFO:Set up data.
2025-03-16 02:53:39,813:INFO:Set up index.
2025-03-16 02:53:39,942:INFO:Initializing predict_model()
2025-03-16 02:53:39,942:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227448D4B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:39,943:INFO:Checking exceptions
2025-03-16 02:53:39,943:INFO:Preloading libraries
2025-03-16 02:53:39,943:INFO:Set up data.
2025-03-16 02:53:39,946:INFO:Set up index.
2025-03-16 02:53:40,080:INFO:Initializing predict_model()
2025-03-16 02:53:40,080:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744847790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:40,080:INFO:Checking exceptions
2025-03-16 02:53:40,080:INFO:Preloading libraries
2025-03-16 02:53:40,080:INFO:Set up data.
2025-03-16 02:53:40,083:INFO:Set up index.
2025-03-16 02:53:40,202:INFO:Initializing predict_model()
2025-03-16 02:53:40,202:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445D4610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:40,202:INFO:Checking exceptions
2025-03-16 02:53:40,202:INFO:Preloading libraries
2025-03-16 02:53:40,202:INFO:Set up data.
2025-03-16 02:53:40,205:INFO:Set up index.
2025-03-16 02:53:40,327:INFO:Initializing predict_model()
2025-03-16 02:53:40,327:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FB53350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:40,327:INFO:Checking exceptions
2025-03-16 02:53:40,327:INFO:Preloading libraries
2025-03-16 02:53:40,327:INFO:Set up data.
2025-03-16 02:53:40,329:INFO:Set up index.
2025-03-16 02:53:40,467:INFO:Initializing predict_model()
2025-03-16 02:53:40,467:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274476A910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:40,467:INFO:Checking exceptions
2025-03-16 02:53:40,467:INFO:Preloading libraries
2025-03-16 02:53:40,467:INFO:Set up data.
2025-03-16 02:53:40,470:INFO:Set up index.
2025-03-16 02:53:40,609:INFO:Initializing predict_model()
2025-03-16 02:53:40,609:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274476B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:40,609:INFO:Checking exceptions
2025-03-16 02:53:40,609:INFO:Preloading libraries
2025-03-16 02:53:40,609:INFO:Set up data.
2025-03-16 02:53:40,611:INFO:Set up index.
2025-03-16 02:53:40,744:INFO:Initializing predict_model()
2025-03-16 02:53:40,744:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C03BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:40,744:INFO:Checking exceptions
2025-03-16 02:53:40,744:INFO:Preloading libraries
2025-03-16 02:53:40,744:INFO:Set up data.
2025-03-16 02:53:40,747:INFO:Set up index.
2025-03-16 02:53:40,874:INFO:Initializing predict_model()
2025-03-16 02:53:40,874:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384E410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:40,874:INFO:Checking exceptions
2025-03-16 02:53:40,874:INFO:Preloading libraries
2025-03-16 02:53:40,874:INFO:Set up data.
2025-03-16 02:53:40,877:INFO:Set up index.
2025-03-16 02:53:40,998:INFO:Initializing predict_model()
2025-03-16 02:53:40,998:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FBE7C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:40,998:INFO:Checking exceptions
2025-03-16 02:53:40,998:INFO:Preloading libraries
2025-03-16 02:53:40,998:INFO:Set up data.
2025-03-16 02:53:41,000:INFO:Set up index.
2025-03-16 02:53:41,121:INFO:Initializing predict_model()
2025-03-16 02:53:41,121:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384D590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:41,121:INFO:Checking exceptions
2025-03-16 02:53:41,121:INFO:Preloading libraries
2025-03-16 02:53:41,121:INFO:Set up data.
2025-03-16 02:53:41,124:INFO:Set up index.
2025-03-16 02:53:41,243:INFO:Initializing predict_model()
2025-03-16 02:53:41,243:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274463DC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:41,243:INFO:Checking exceptions
2025-03-16 02:53:41,243:INFO:Preloading libraries
2025-03-16 02:53:41,243:INFO:Set up data.
2025-03-16 02:53:41,246:INFO:Set up index.
2025-03-16 02:53:41,373:INFO:Initializing predict_model()
2025-03-16 02:53:41,373:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C03D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:41,373:INFO:Checking exceptions
2025-03-16 02:53:41,373:INFO:Preloading libraries
2025-03-16 02:53:41,373:INFO:Set up data.
2025-03-16 02:53:41,376:INFO:Set up index.
2025-03-16 02:53:41,505:INFO:Initializing predict_model()
2025-03-16 02:53:41,505:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC4F9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:41,505:INFO:Checking exceptions
2025-03-16 02:53:41,506:INFO:Preloading libraries
2025-03-16 02:53:41,506:INFO:Set up data.
2025-03-16 02:53:41,509:INFO:Set up index.
2025-03-16 02:53:41,631:INFO:Initializing predict_model()
2025-03-16 02:53:41,631:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274579D050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:41,631:INFO:Checking exceptions
2025-03-16 02:53:41,631:INFO:Preloading libraries
2025-03-16 02:53:41,633:INFO:Set up data.
2025-03-16 02:53:41,635:INFO:Set up index.
2025-03-16 02:53:41,757:INFO:Initializing predict_model()
2025-03-16 02:53:41,757:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274388ABD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:41,757:INFO:Checking exceptions
2025-03-16 02:53:41,757:INFO:Preloading libraries
2025-03-16 02:53:41,757:INFO:Set up data.
2025-03-16 02:53:41,759:INFO:Set up index.
2025-03-16 02:53:41,880:INFO:Initializing predict_model()
2025-03-16 02:53:41,880:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B529210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:41,880:INFO:Checking exceptions
2025-03-16 02:53:41,880:INFO:Preloading libraries
2025-03-16 02:53:41,880:INFO:Set up data.
2025-03-16 02:53:41,883:INFO:Set up index.
2025-03-16 02:53:42,007:INFO:Initializing predict_model()
2025-03-16 02:53:42,007:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274463F550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:42,007:INFO:Checking exceptions
2025-03-16 02:53:42,007:INFO:Preloading libraries
2025-03-16 02:53:42,007:INFO:Set up data.
2025-03-16 02:53:42,010:INFO:Set up index.
2025-03-16 02:53:42,137:INFO:Initializing predict_model()
2025-03-16 02:53:42,138:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B4250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:42,138:INFO:Checking exceptions
2025-03-16 02:53:42,138:INFO:Preloading libraries
2025-03-16 02:53:42,138:INFO:Set up data.
2025-03-16 02:53:42,141:INFO:Set up index.
2025-03-16 02:53:42,267:INFO:Initializing predict_model()
2025-03-16 02:53:42,267:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745455750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:42,267:INFO:Checking exceptions
2025-03-16 02:53:42,267:INFO:Preloading libraries
2025-03-16 02:53:42,267:INFO:Set up data.
2025-03-16 02:53:42,270:INFO:Set up index.
2025-03-16 02:53:42,392:INFO:Initializing predict_model()
2025-03-16 02:53:42,392:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447D1310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:42,392:INFO:Checking exceptions
2025-03-16 02:53:42,392:INFO:Preloading libraries
2025-03-16 02:53:42,392:INFO:Set up data.
2025-03-16 02:53:42,395:INFO:Set up index.
2025-03-16 02:53:42,513:INFO:Initializing predict_model()
2025-03-16 02:53:42,513:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384CB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:42,513:INFO:Checking exceptions
2025-03-16 02:53:42,513:INFO:Preloading libraries
2025-03-16 02:53:42,514:INFO:Set up data.
2025-03-16 02:53:42,517:INFO:Set up index.
2025-03-16 02:53:42,635:INFO:Initializing predict_model()
2025-03-16 02:53:42,635:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743714790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:42,635:INFO:Checking exceptions
2025-03-16 02:53:42,635:INFO:Preloading libraries
2025-03-16 02:53:42,635:INFO:Set up data.
2025-03-16 02:53:42,637:INFO:Set up index.
2025-03-16 02:53:42,759:INFO:Initializing predict_model()
2025-03-16 02:53:42,759:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743711350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464CAE0>)
2025-03-16 02:53:42,759:INFO:Checking exceptions
2025-03-16 02:53:42,759:INFO:Preloading libraries
2025-03-16 02:53:42,759:INFO:Set up data.
2025-03-16 02:53:42,762:INFO:Set up index.
2025-03-16 02:53:42,892:INFO:Initializing load_model()
2025-03-16 02:53:42,892:INFO:load_model(model_name=../eng_psu_hatyai/main/humi_use_temp_model_2, platform=None, authentication=None, verbose=True)
2025-03-16 02:53:42,985:INFO:Initializing predict_model()
2025-03-16 02:53:42,985:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445DE090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C2C0>)
2025-03-16 02:53:42,985:INFO:Checking exceptions
2025-03-16 02:53:42,985:INFO:Preloading libraries
2025-03-16 02:53:42,985:INFO:Set up data.
2025-03-16 02:53:42,989:INFO:Set up index.
2025-03-16 02:53:43,127:INFO:Initializing predict_model()
2025-03-16 02:53:43,127:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D7DD910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:43,127:INFO:Checking exceptions
2025-03-16 02:53:43,127:INFO:Preloading libraries
2025-03-16 02:53:43,127:INFO:Set up data.
2025-03-16 02:53:43,130:INFO:Set up index.
2025-03-16 02:53:43,265:INFO:Initializing predict_model()
2025-03-16 02:53:43,265:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447F98D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:43,265:INFO:Checking exceptions
2025-03-16 02:53:43,265:INFO:Preloading libraries
2025-03-16 02:53:43,265:INFO:Set up data.
2025-03-16 02:53:43,267:INFO:Set up index.
2025-03-16 02:53:43,404:INFO:Initializing predict_model()
2025-03-16 02:53:43,404:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438178D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:43,404:INFO:Checking exceptions
2025-03-16 02:53:43,404:INFO:Preloading libraries
2025-03-16 02:53:43,405:INFO:Set up data.
2025-03-16 02:53:43,409:INFO:Set up index.
2025-03-16 02:53:43,547:INFO:Initializing predict_model()
2025-03-16 02:53:43,547:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC4EF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:43,547:INFO:Checking exceptions
2025-03-16 02:53:43,547:INFO:Preloading libraries
2025-03-16 02:53:43,547:INFO:Set up data.
2025-03-16 02:53:43,550:INFO:Set up index.
2025-03-16 02:53:43,697:INFO:Initializing predict_model()
2025-03-16 02:53:43,697:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C7C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:43,697:INFO:Checking exceptions
2025-03-16 02:53:43,697:INFO:Preloading libraries
2025-03-16 02:53:43,697:INFO:Set up data.
2025-03-16 02:53:43,702:INFO:Set up index.
2025-03-16 02:53:43,839:INFO:Initializing predict_model()
2025-03-16 02:53:43,839:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744630E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:43,839:INFO:Checking exceptions
2025-03-16 02:53:43,839:INFO:Preloading libraries
2025-03-16 02:53:43,839:INFO:Set up data.
2025-03-16 02:53:43,842:INFO:Set up index.
2025-03-16 02:53:43,979:INFO:Initializing predict_model()
2025-03-16 02:53:43,979:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FCF6ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:43,979:INFO:Checking exceptions
2025-03-16 02:53:43,979:INFO:Preloading libraries
2025-03-16 02:53:43,979:INFO:Set up data.
2025-03-16 02:53:43,982:INFO:Set up index.
2025-03-16 02:53:44,120:INFO:Initializing predict_model()
2025-03-16 02:53:44,120:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744630D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:44,120:INFO:Checking exceptions
2025-03-16 02:53:44,120:INFO:Preloading libraries
2025-03-16 02:53:44,120:INFO:Set up data.
2025-03-16 02:53:44,124:INFO:Set up index.
2025-03-16 02:53:44,257:INFO:Initializing predict_model()
2025-03-16 02:53:44,257:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547D950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:44,257:INFO:Checking exceptions
2025-03-16 02:53:44,257:INFO:Preloading libraries
2025-03-16 02:53:44,257:INFO:Set up data.
2025-03-16 02:53:44,259:INFO:Set up index.
2025-03-16 02:53:44,398:INFO:Initializing predict_model()
2025-03-16 02:53:44,398:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC7E110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:44,398:INFO:Checking exceptions
2025-03-16 02:53:44,398:INFO:Preloading libraries
2025-03-16 02:53:44,398:INFO:Set up data.
2025-03-16 02:53:44,406:INFO:Set up index.
2025-03-16 02:53:44,534:INFO:Initializing predict_model()
2025-03-16 02:53:44,534:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227436FA410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:44,534:INFO:Checking exceptions
2025-03-16 02:53:44,534:INFO:Preloading libraries
2025-03-16 02:53:44,534:INFO:Set up data.
2025-03-16 02:53:44,538:INFO:Set up index.
2025-03-16 02:53:44,669:INFO:Initializing predict_model()
2025-03-16 02:53:44,670:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274371A190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:44,670:INFO:Checking exceptions
2025-03-16 02:53:44,670:INFO:Preloading libraries
2025-03-16 02:53:44,670:INFO:Set up data.
2025-03-16 02:53:44,674:INFO:Set up index.
2025-03-16 02:53:44,812:INFO:Initializing predict_model()
2025-03-16 02:53:44,812:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744635AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:44,812:INFO:Checking exceptions
2025-03-16 02:53:44,812:INFO:Preloading libraries
2025-03-16 02:53:44,812:INFO:Set up data.
2025-03-16 02:53:44,817:INFO:Set up index.
2025-03-16 02:53:44,948:INFO:Initializing predict_model()
2025-03-16 02:53:44,948:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D6F2610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:44,948:INFO:Checking exceptions
2025-03-16 02:53:44,948:INFO:Preloading libraries
2025-03-16 02:53:44,949:INFO:Set up data.
2025-03-16 02:53:44,952:INFO:Set up index.
2025-03-16 02:53:45,076:INFO:Initializing predict_model()
2025-03-16 02:53:45,076:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274539C490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:45,076:INFO:Checking exceptions
2025-03-16 02:53:45,076:INFO:Preloading libraries
2025-03-16 02:53:45,076:INFO:Set up data.
2025-03-16 02:53:45,079:INFO:Set up index.
2025-03-16 02:53:45,207:INFO:Initializing predict_model()
2025-03-16 02:53:45,209:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384E6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:45,209:INFO:Checking exceptions
2025-03-16 02:53:45,209:INFO:Preloading libraries
2025-03-16 02:53:45,209:INFO:Set up data.
2025-03-16 02:53:45,210:INFO:Set up index.
2025-03-16 02:53:45,338:INFO:Initializing predict_model()
2025-03-16 02:53:45,338:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:45,338:INFO:Checking exceptions
2025-03-16 02:53:45,338:INFO:Preloading libraries
2025-03-16 02:53:45,339:INFO:Set up data.
2025-03-16 02:53:45,342:INFO:Set up index.
2025-03-16 02:53:45,469:INFO:Initializing predict_model()
2025-03-16 02:53:45,469:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227439F8AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:45,469:INFO:Checking exceptions
2025-03-16 02:53:45,469:INFO:Preloading libraries
2025-03-16 02:53:45,469:INFO:Set up data.
2025-03-16 02:53:45,473:INFO:Set up index.
2025-03-16 02:53:45,597:INFO:Initializing predict_model()
2025-03-16 02:53:45,597:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447D3C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:45,597:INFO:Checking exceptions
2025-03-16 02:53:45,597:INFO:Preloading libraries
2025-03-16 02:53:45,597:INFO:Set up data.
2025-03-16 02:53:45,601:INFO:Set up index.
2025-03-16 02:53:45,725:INFO:Initializing predict_model()
2025-03-16 02:53:45,725:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744636E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:45,725:INFO:Checking exceptions
2025-03-16 02:53:45,725:INFO:Preloading libraries
2025-03-16 02:53:45,725:INFO:Set up data.
2025-03-16 02:53:45,729:INFO:Set up index.
2025-03-16 02:53:45,859:INFO:Initializing predict_model()
2025-03-16 02:53:45,859:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:45,859:INFO:Checking exceptions
2025-03-16 02:53:45,859:INFO:Preloading libraries
2025-03-16 02:53:45,859:INFO:Set up data.
2025-03-16 02:53:45,862:INFO:Set up index.
2025-03-16 02:53:45,998:INFO:Initializing predict_model()
2025-03-16 02:53:45,998:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC4F350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:45,998:INFO:Checking exceptions
2025-03-16 02:53:45,998:INFO:Preloading libraries
2025-03-16 02:53:45,998:INFO:Set up data.
2025-03-16 02:53:46,003:INFO:Set up index.
2025-03-16 02:53:46,139:INFO:Initializing predict_model()
2025-03-16 02:53:46,139:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B802410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:46,139:INFO:Checking exceptions
2025-03-16 02:53:46,139:INFO:Preloading libraries
2025-03-16 02:53:46,139:INFO:Set up data.
2025-03-16 02:53:46,141:INFO:Set up index.
2025-03-16 02:53:46,267:INFO:Initializing predict_model()
2025-03-16 02:53:46,267:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274545C050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:46,267:INFO:Checking exceptions
2025-03-16 02:53:46,267:INFO:Preloading libraries
2025-03-16 02:53:46,267:INFO:Set up data.
2025-03-16 02:53:46,270:INFO:Set up index.
2025-03-16 02:53:46,395:INFO:Initializing predict_model()
2025-03-16 02:53:46,395:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227449403D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:46,395:INFO:Checking exceptions
2025-03-16 02:53:46,395:INFO:Preloading libraries
2025-03-16 02:53:46,395:INFO:Set up data.
2025-03-16 02:53:46,398:INFO:Set up index.
2025-03-16 02:53:46,533:INFO:Initializing predict_model()
2025-03-16 02:53:46,533:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743889910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:46,533:INFO:Checking exceptions
2025-03-16 02:53:46,533:INFO:Preloading libraries
2025-03-16 02:53:46,533:INFO:Set up data.
2025-03-16 02:53:46,537:INFO:Set up index.
2025-03-16 02:53:46,661:INFO:Initializing predict_model()
2025-03-16 02:53:46,661:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743717E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:46,661:INFO:Checking exceptions
2025-03-16 02:53:46,661:INFO:Preloading libraries
2025-03-16 02:53:46,661:INFO:Set up data.
2025-03-16 02:53:46,664:INFO:Set up index.
2025-03-16 02:53:46,790:INFO:Initializing predict_model()
2025-03-16 02:53:46,790:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455C6090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:46,790:INFO:Checking exceptions
2025-03-16 02:53:46,790:INFO:Preloading libraries
2025-03-16 02:53:46,790:INFO:Set up data.
2025-03-16 02:53:46,793:INFO:Set up index.
2025-03-16 02:53:46,928:INFO:Initializing predict_model()
2025-03-16 02:53:46,928:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447F98D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:46,928:INFO:Checking exceptions
2025-03-16 02:53:46,929:INFO:Preloading libraries
2025-03-16 02:53:46,929:INFO:Set up data.
2025-03-16 02:53:46,932:INFO:Set up index.
2025-03-16 02:53:47,109:INFO:Initializing predict_model()
2025-03-16 02:53:47,109:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743733B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:47,109:INFO:Checking exceptions
2025-03-16 02:53:47,109:INFO:Preloading libraries
2025-03-16 02:53:47,109:INFO:Set up data.
2025-03-16 02:53:47,112:INFO:Set up index.
2025-03-16 02:53:47,243:INFO:Initializing predict_model()
2025-03-16 02:53:47,243:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F3892D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:47,243:INFO:Checking exceptions
2025-03-16 02:53:47,243:INFO:Preloading libraries
2025-03-16 02:53:47,243:INFO:Set up data.
2025-03-16 02:53:47,246:INFO:Set up index.
2025-03-16 02:53:47,372:INFO:Initializing predict_model()
2025-03-16 02:53:47,372:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274579EF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:47,372:INFO:Checking exceptions
2025-03-16 02:53:47,372:INFO:Preloading libraries
2025-03-16 02:53:47,372:INFO:Set up data.
2025-03-16 02:53:47,375:INFO:Set up index.
2025-03-16 02:53:47,502:INFO:Initializing predict_model()
2025-03-16 02:53:47,502:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FBE4050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:47,502:INFO:Checking exceptions
2025-03-16 02:53:47,502:INFO:Preloading libraries
2025-03-16 02:53:47,504:INFO:Set up data.
2025-03-16 02:53:47,507:INFO:Set up index.
2025-03-16 02:53:47,643:INFO:Initializing predict_model()
2025-03-16 02:53:47,643:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274476B250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:47,643:INFO:Checking exceptions
2025-03-16 02:53:47,643:INFO:Preloading libraries
2025-03-16 02:53:47,643:INFO:Set up data.
2025-03-16 02:53:47,647:INFO:Set up index.
2025-03-16 02:53:47,776:INFO:Initializing predict_model()
2025-03-16 02:53:47,776:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270BE72050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:47,776:INFO:Checking exceptions
2025-03-16 02:53:47,776:INFO:Preloading libraries
2025-03-16 02:53:47,776:INFO:Set up data.
2025-03-16 02:53:47,780:INFO:Set up index.
2025-03-16 02:53:47,908:INFO:Initializing predict_model()
2025-03-16 02:53:47,908:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D389350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:47,908:INFO:Checking exceptions
2025-03-16 02:53:47,908:INFO:Preloading libraries
2025-03-16 02:53:47,908:INFO:Set up data.
2025-03-16 02:53:47,911:INFO:Set up index.
2025-03-16 02:53:48,051:INFO:Initializing predict_model()
2025-03-16 02:53:48,051:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743842C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:48,051:INFO:Checking exceptions
2025-03-16 02:53:48,051:INFO:Preloading libraries
2025-03-16 02:53:48,051:INFO:Set up data.
2025-03-16 02:53:48,054:INFO:Set up index.
2025-03-16 02:53:48,181:INFO:Initializing predict_model()
2025-03-16 02:53:48,181:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743717E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:48,181:INFO:Checking exceptions
2025-03-16 02:53:48,181:INFO:Preloading libraries
2025-03-16 02:53:48,181:INFO:Set up data.
2025-03-16 02:53:48,184:INFO:Set up index.
2025-03-16 02:53:48,315:INFO:Initializing predict_model()
2025-03-16 02:53:48,315:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743714790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:48,315:INFO:Checking exceptions
2025-03-16 02:53:48,315:INFO:Preloading libraries
2025-03-16 02:53:48,315:INFO:Set up data.
2025-03-16 02:53:48,318:INFO:Set up index.
2025-03-16 02:53:48,449:INFO:Initializing predict_model()
2025-03-16 02:53:48,449:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744844E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:48,449:INFO:Checking exceptions
2025-03-16 02:53:48,449:INFO:Preloading libraries
2025-03-16 02:53:48,449:INFO:Set up data.
2025-03-16 02:53:48,452:INFO:Set up index.
2025-03-16 02:53:48,581:INFO:Initializing predict_model()
2025-03-16 02:53:48,581:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227449403D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:48,581:INFO:Checking exceptions
2025-03-16 02:53:48,581:INFO:Preloading libraries
2025-03-16 02:53:48,581:INFO:Set up data.
2025-03-16 02:53:48,584:INFO:Set up index.
2025-03-16 02:53:48,717:INFO:Initializing predict_model()
2025-03-16 02:53:48,717:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B6E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:48,717:INFO:Checking exceptions
2025-03-16 02:53:48,717:INFO:Preloading libraries
2025-03-16 02:53:48,717:INFO:Set up data.
2025-03-16 02:53:48,720:INFO:Set up index.
2025-03-16 02:53:48,849:INFO:Initializing predict_model()
2025-03-16 02:53:48,849:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547F950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:48,849:INFO:Checking exceptions
2025-03-16 02:53:48,849:INFO:Preloading libraries
2025-03-16 02:53:48,849:INFO:Set up data.
2025-03-16 02:53:48,853:INFO:Set up index.
2025-03-16 02:53:48,989:INFO:Initializing predict_model()
2025-03-16 02:53:48,991:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744915F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:48,991:INFO:Checking exceptions
2025-03-16 02:53:48,991:INFO:Preloading libraries
2025-03-16 02:53:48,991:INFO:Set up data.
2025-03-16 02:53:48,994:INFO:Set up index.
2025-03-16 02:53:49,132:INFO:Initializing predict_model()
2025-03-16 02:53:49,132:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744846B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:49,132:INFO:Checking exceptions
2025-03-16 02:53:49,132:INFO:Preloading libraries
2025-03-16 02:53:49,132:INFO:Set up data.
2025-03-16 02:53:49,136:INFO:Set up index.
2025-03-16 02:53:49,258:INFO:Initializing predict_model()
2025-03-16 02:53:49,258:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274539C490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:49,258:INFO:Checking exceptions
2025-03-16 02:53:49,258:INFO:Preloading libraries
2025-03-16 02:53:49,258:INFO:Set up data.
2025-03-16 02:53:49,261:INFO:Set up index.
2025-03-16 02:53:49,394:INFO:Initializing predict_model()
2025-03-16 02:53:49,394:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274543E510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:49,394:INFO:Checking exceptions
2025-03-16 02:53:49,394:INFO:Preloading libraries
2025-03-16 02:53:49,394:INFO:Set up data.
2025-03-16 02:53:49,398:INFO:Set up index.
2025-03-16 02:53:49,532:INFO:Initializing predict_model()
2025-03-16 02:53:49,532:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744535E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:49,532:INFO:Checking exceptions
2025-03-16 02:53:49,532:INFO:Preloading libraries
2025-03-16 02:53:49,532:INFO:Set up data.
2025-03-16 02:53:49,536:INFO:Set up index.
2025-03-16 02:53:49,664:INFO:Initializing predict_model()
2025-03-16 02:53:49,664:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455E2BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:49,664:INFO:Checking exceptions
2025-03-16 02:53:49,664:INFO:Preloading libraries
2025-03-16 02:53:49,664:INFO:Set up data.
2025-03-16 02:53:49,667:INFO:Set up index.
2025-03-16 02:53:49,791:INFO:Initializing predict_model()
2025-03-16 02:53:49,791:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744773A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:49,791:INFO:Checking exceptions
2025-03-16 02:53:49,791:INFO:Preloading libraries
2025-03-16 02:53:49,791:INFO:Set up data.
2025-03-16 02:53:49,796:INFO:Set up index.
2025-03-16 02:53:49,918:INFO:Initializing predict_model()
2025-03-16 02:53:49,920:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227448C9890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:49,920:INFO:Checking exceptions
2025-03-16 02:53:49,920:INFO:Preloading libraries
2025-03-16 02:53:49,920:INFO:Set up data.
2025-03-16 02:53:49,923:INFO:Set up index.
2025-03-16 02:53:50,057:INFO:Initializing predict_model()
2025-03-16 02:53:50,057:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C03C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:50,057:INFO:Checking exceptions
2025-03-16 02:53:50,057:INFO:Preloading libraries
2025-03-16 02:53:50,057:INFO:Set up data.
2025-03-16 02:53:50,060:INFO:Set up index.
2025-03-16 02:53:50,199:INFO:Initializing predict_model()
2025-03-16 02:53:50,199:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC5CC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:50,199:INFO:Checking exceptions
2025-03-16 02:53:50,199:INFO:Preloading libraries
2025-03-16 02:53:50,199:INFO:Set up data.
2025-03-16 02:53:50,204:INFO:Set up index.
2025-03-16 02:53:50,341:INFO:Initializing predict_model()
2025-03-16 02:53:50,341:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D7C4490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:50,343:INFO:Checking exceptions
2025-03-16 02:53:50,343:INFO:Preloading libraries
2025-03-16 02:53:50,343:INFO:Set up data.
2025-03-16 02:53:50,347:INFO:Set up index.
2025-03-16 02:53:50,479:INFO:Initializing predict_model()
2025-03-16 02:53:50,479:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227449145D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:50,479:INFO:Checking exceptions
2025-03-16 02:53:50,479:INFO:Preloading libraries
2025-03-16 02:53:50,479:INFO:Set up data.
2025-03-16 02:53:50,484:INFO:Set up index.
2025-03-16 02:53:50,611:INFO:Initializing predict_model()
2025-03-16 02:53:50,611:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447AF950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:50,611:INFO:Checking exceptions
2025-03-16 02:53:50,611:INFO:Preloading libraries
2025-03-16 02:53:50,611:INFO:Set up data.
2025-03-16 02:53:50,616:INFO:Set up index.
2025-03-16 02:53:50,750:INFO:Initializing predict_model()
2025-03-16 02:53:50,750:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC4FD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:50,750:INFO:Checking exceptions
2025-03-16 02:53:50,750:INFO:Preloading libraries
2025-03-16 02:53:50,750:INFO:Set up data.
2025-03-16 02:53:50,755:INFO:Set up index.
2025-03-16 02:53:50,891:INFO:Initializing predict_model()
2025-03-16 02:53:50,891:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447D1110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:50,891:INFO:Checking exceptions
2025-03-16 02:53:50,891:INFO:Preloading libraries
2025-03-16 02:53:50,892:INFO:Set up data.
2025-03-16 02:53:50,895:INFO:Set up index.
2025-03-16 02:53:51,019:INFO:Initializing predict_model()
2025-03-16 02:53:51,019:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744500F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:51,019:INFO:Checking exceptions
2025-03-16 02:53:51,019:INFO:Preloading libraries
2025-03-16 02:53:51,021:INFO:Set up data.
2025-03-16 02:53:51,024:INFO:Set up index.
2025-03-16 02:53:51,160:INFO:Initializing predict_model()
2025-03-16 02:53:51,162:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F3892D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:51,162:INFO:Checking exceptions
2025-03-16 02:53:51,162:INFO:Preloading libraries
2025-03-16 02:53:51,162:INFO:Set up data.
2025-03-16 02:53:51,167:INFO:Set up index.
2025-03-16 02:53:51,296:INFO:Initializing predict_model()
2025-03-16 02:53:51,296:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227444CFF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:51,296:INFO:Checking exceptions
2025-03-16 02:53:51,296:INFO:Preloading libraries
2025-03-16 02:53:51,296:INFO:Set up data.
2025-03-16 02:53:51,301:INFO:Set up index.
2025-03-16 02:53:51,436:INFO:Initializing predict_model()
2025-03-16 02:53:51,436:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD41650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:51,436:INFO:Checking exceptions
2025-03-16 02:53:51,436:INFO:Preloading libraries
2025-03-16 02:53:51,436:INFO:Set up data.
2025-03-16 02:53:51,439:INFO:Set up index.
2025-03-16 02:53:51,564:INFO:Initializing predict_model()
2025-03-16 02:53:51,564:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384CB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:51,564:INFO:Checking exceptions
2025-03-16 02:53:51,564:INFO:Preloading libraries
2025-03-16 02:53:51,564:INFO:Set up data.
2025-03-16 02:53:51,567:INFO:Set up index.
2025-03-16 02:53:51,697:INFO:Initializing predict_model()
2025-03-16 02:53:51,697:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744941A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:51,697:INFO:Checking exceptions
2025-03-16 02:53:51,697:INFO:Preloading libraries
2025-03-16 02:53:51,697:INFO:Set up data.
2025-03-16 02:53:51,702:INFO:Set up index.
2025-03-16 02:53:51,827:INFO:Initializing predict_model()
2025-03-16 02:53:51,827:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743710810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:51,827:INFO:Checking exceptions
2025-03-16 02:53:51,828:INFO:Preloading libraries
2025-03-16 02:53:51,828:INFO:Set up data.
2025-03-16 02:53:51,830:INFO:Set up index.
2025-03-16 02:53:51,956:INFO:Initializing predict_model()
2025-03-16 02:53:51,956:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227437196D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:51,956:INFO:Checking exceptions
2025-03-16 02:53:51,956:INFO:Preloading libraries
2025-03-16 02:53:51,956:INFO:Set up data.
2025-03-16 02:53:51,959:INFO:Set up index.
2025-03-16 02:53:52,083:INFO:Initializing predict_model()
2025-03-16 02:53:52,083:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547F850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:52,083:INFO:Checking exceptions
2025-03-16 02:53:52,084:INFO:Preloading libraries
2025-03-16 02:53:52,084:INFO:Set up data.
2025-03-16 02:53:52,087:INFO:Set up index.
2025-03-16 02:53:52,209:INFO:Initializing predict_model()
2025-03-16 02:53:52,209:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B6410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:52,209:INFO:Checking exceptions
2025-03-16 02:53:52,209:INFO:Preloading libraries
2025-03-16 02:53:52,209:INFO:Set up data.
2025-03-16 02:53:52,212:INFO:Set up index.
2025-03-16 02:53:52,349:INFO:Initializing predict_model()
2025-03-16 02:53:52,349:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547F950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:52,349:INFO:Checking exceptions
2025-03-16 02:53:52,349:INFO:Preloading libraries
2025-03-16 02:53:52,349:INFO:Set up data.
2025-03-16 02:53:52,353:INFO:Set up index.
2025-03-16 02:53:52,503:INFO:Initializing predict_model()
2025-03-16 02:53:52,503:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227444B3290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:52,503:INFO:Checking exceptions
2025-03-16 02:53:52,503:INFO:Preloading libraries
2025-03-16 02:53:52,503:INFO:Set up data.
2025-03-16 02:53:52,507:INFO:Set up index.
2025-03-16 02:53:52,646:INFO:Initializing predict_model()
2025-03-16 02:53:52,646:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227436ED2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:52,646:INFO:Checking exceptions
2025-03-16 02:53:52,646:INFO:Preloading libraries
2025-03-16 02:53:52,646:INFO:Set up data.
2025-03-16 02:53:52,648:INFO:Set up index.
2025-03-16 02:53:52,791:INFO:Initializing predict_model()
2025-03-16 02:53:52,792:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745455F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:52,792:INFO:Checking exceptions
2025-03-16 02:53:52,792:INFO:Preloading libraries
2025-03-16 02:53:52,792:INFO:Set up data.
2025-03-16 02:53:52,796:INFO:Set up index.
2025-03-16 02:53:52,937:INFO:Initializing predict_model()
2025-03-16 02:53:52,937:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274539C490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:52,937:INFO:Checking exceptions
2025-03-16 02:53:52,937:INFO:Preloading libraries
2025-03-16 02:53:52,937:INFO:Set up data.
2025-03-16 02:53:52,940:INFO:Set up index.
2025-03-16 02:53:53,082:INFO:Initializing predict_model()
2025-03-16 02:53:53,082:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:53,082:INFO:Checking exceptions
2025-03-16 02:53:53,082:INFO:Preloading libraries
2025-03-16 02:53:53,082:INFO:Set up data.
2025-03-16 02:53:53,087:INFO:Set up index.
2025-03-16 02:53:53,224:INFO:Initializing predict_model()
2025-03-16 02:53:53,224:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C08110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:53,224:INFO:Checking exceptions
2025-03-16 02:53:53,224:INFO:Preloading libraries
2025-03-16 02:53:53,224:INFO:Set up data.
2025-03-16 02:53:53,228:INFO:Set up index.
2025-03-16 02:53:53,369:INFO:Initializing predict_model()
2025-03-16 02:53:53,369:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744915CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:53,369:INFO:Checking exceptions
2025-03-16 02:53:53,369:INFO:Preloading libraries
2025-03-16 02:53:53,370:INFO:Set up data.
2025-03-16 02:53:53,372:INFO:Set up index.
2025-03-16 02:53:53,498:INFO:Initializing predict_model()
2025-03-16 02:53:53,498:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447D1F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:53,498:INFO:Checking exceptions
2025-03-16 02:53:53,498:INFO:Preloading libraries
2025-03-16 02:53:53,498:INFO:Set up data.
2025-03-16 02:53:53,501:INFO:Set up index.
2025-03-16 02:53:53,637:INFO:Initializing predict_model()
2025-03-16 02:53:53,638:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227449296D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:53,638:INFO:Checking exceptions
2025-03-16 02:53:53,638:INFO:Preloading libraries
2025-03-16 02:53:53,638:INFO:Set up data.
2025-03-16 02:53:53,641:INFO:Set up index.
2025-03-16 02:53:53,773:INFO:Initializing predict_model()
2025-03-16 02:53:53,773:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227444CEED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:53,773:INFO:Checking exceptions
2025-03-16 02:53:53,773:INFO:Preloading libraries
2025-03-16 02:53:53,774:INFO:Set up data.
2025-03-16 02:53:53,777:INFO:Set up index.
2025-03-16 02:53:53,912:INFO:Initializing predict_model()
2025-03-16 02:53:53,912:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227439FB8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:53,912:INFO:Checking exceptions
2025-03-16 02:53:53,912:INFO:Preloading libraries
2025-03-16 02:53:53,912:INFO:Set up data.
2025-03-16 02:53:53,914:INFO:Set up index.
2025-03-16 02:53:54,041:INFO:Initializing predict_model()
2025-03-16 02:53:54,042:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743897D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:54,042:INFO:Checking exceptions
2025-03-16 02:53:54,042:INFO:Preloading libraries
2025-03-16 02:53:54,042:INFO:Set up data.
2025-03-16 02:53:54,047:INFO:Set up index.
2025-03-16 02:53:54,186:INFO:Initializing predict_model()
2025-03-16 02:53:54,186:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741ED6F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:54,186:INFO:Checking exceptions
2025-03-16 02:53:54,186:INFO:Preloading libraries
2025-03-16 02:53:54,187:INFO:Set up data.
2025-03-16 02:53:54,189:INFO:Set up index.
2025-03-16 02:53:54,330:INFO:Initializing predict_model()
2025-03-16 02:53:54,330:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547D950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:54,330:INFO:Checking exceptions
2025-03-16 02:53:54,330:INFO:Preloading libraries
2025-03-16 02:53:54,330:INFO:Set up data.
2025-03-16 02:53:54,336:INFO:Set up index.
2025-03-16 02:53:54,465:INFO:Initializing predict_model()
2025-03-16 02:53:54,465:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744916E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:54,465:INFO:Checking exceptions
2025-03-16 02:53:54,465:INFO:Preloading libraries
2025-03-16 02:53:54,465:INFO:Set up data.
2025-03-16 02:53:54,468:INFO:Set up index.
2025-03-16 02:53:54,599:INFO:Initializing predict_model()
2025-03-16 02:53:54,600:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384C610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:54,600:INFO:Checking exceptions
2025-03-16 02:53:54,600:INFO:Preloading libraries
2025-03-16 02:53:54,600:INFO:Set up data.
2025-03-16 02:53:54,603:INFO:Set up index.
2025-03-16 02:53:54,738:INFO:Initializing predict_model()
2025-03-16 02:53:54,738:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B6E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:54,738:INFO:Checking exceptions
2025-03-16 02:53:54,738:INFO:Preloading libraries
2025-03-16 02:53:54,738:INFO:Set up data.
2025-03-16 02:53:54,741:INFO:Set up index.
2025-03-16 02:53:54,868:INFO:Initializing predict_model()
2025-03-16 02:53:54,868:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445DE990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:54,868:INFO:Checking exceptions
2025-03-16 02:53:54,868:INFO:Preloading libraries
2025-03-16 02:53:54,868:INFO:Set up data.
2025-03-16 02:53:54,871:INFO:Set up index.
2025-03-16 02:53:55,007:INFO:Initializing predict_model()
2025-03-16 02:53:55,007:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227444B1F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002273FBF42C0>)
2025-03-16 02:53:55,007:INFO:Checking exceptions
2025-03-16 02:53:55,007:INFO:Preloading libraries
2025-03-16 02:53:55,007:INFO:Set up data.
2025-03-16 02:53:55,010:INFO:Set up index.
2025-03-16 02:53:55,147:INFO:Initializing load_model()
2025-03-16 02:53:55,147:INFO:load_model(model_name=main/dt_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 02:54:34,409:INFO:Initializing load_model()
2025-03-16 02:54:34,409:INFO:load_model(model_name=../eng_psu_hatyai/main/lgmb_temp_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 02:54:34,482:INFO:Initializing predict_model()
2025-03-16 02:54:34,482:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274581E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708400>)
2025-03-16 02:54:34,484:INFO:Checking exceptions
2025-03-16 02:54:34,484:INFO:Preloading libraries
2025-03-16 02:54:34,484:INFO:Set up data.
2025-03-16 02:54:34,489:INFO:Set up index.
2025-03-16 02:54:34,637:INFO:Initializing predict_model()
2025-03-16 02:54:34,637:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C8F150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708400>)
2025-03-16 02:54:34,637:INFO:Checking exceptions
2025-03-16 02:54:34,637:INFO:Preloading libraries
2025-03-16 02:54:34,639:INFO:Set up data.
2025-03-16 02:54:34,640:INFO:Set up index.
2025-03-16 02:54:34,769:INFO:Initializing predict_model()
2025-03-16 02:54:34,769:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C8D410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:34,769:INFO:Checking exceptions
2025-03-16 02:54:34,769:INFO:Preloading libraries
2025-03-16 02:54:34,769:INFO:Set up data.
2025-03-16 02:54:34,772:INFO:Set up index.
2025-03-16 02:54:34,901:INFO:Initializing predict_model()
2025-03-16 02:54:34,901:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C8FF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:34,901:INFO:Checking exceptions
2025-03-16 02:54:34,901:INFO:Preloading libraries
2025-03-16 02:54:34,901:INFO:Set up data.
2025-03-16 02:54:34,902:INFO:Set up index.
2025-03-16 02:54:35,029:INFO:Initializing predict_model()
2025-03-16 02:54:35,029:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D35150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A520>)
2025-03-16 02:54:35,029:INFO:Checking exceptions
2025-03-16 02:54:35,029:INFO:Preloading libraries
2025-03-16 02:54:35,029:INFO:Set up data.
2025-03-16 02:54:35,031:INFO:Set up index.
2025-03-16 02:54:35,158:INFO:Initializing predict_model()
2025-03-16 02:54:35,158:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C9D310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709760>)
2025-03-16 02:54:35,158:INFO:Checking exceptions
2025-03-16 02:54:35,158:INFO:Preloading libraries
2025-03-16 02:54:35,158:INFO:Set up data.
2025-03-16 02:54:35,160:INFO:Set up index.
2025-03-16 02:54:35,299:INFO:Initializing predict_model()
2025-03-16 02:54:35,299:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B78F910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708AE0>)
2025-03-16 02:54:35,299:INFO:Checking exceptions
2025-03-16 02:54:35,299:INFO:Preloading libraries
2025-03-16 02:54:35,299:INFO:Set up data.
2025-03-16 02:54:35,302:INFO:Set up index.
2025-03-16 02:54:35,441:INFO:Initializing predict_model()
2025-03-16 02:54:35,441:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F082D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:35,441:INFO:Checking exceptions
2025-03-16 02:54:35,441:INFO:Preloading libraries
2025-03-16 02:54:35,441:INFO:Set up data.
2025-03-16 02:54:35,444:INFO:Set up index.
2025-03-16 02:54:35,575:INFO:Initializing predict_model()
2025-03-16 02:54:35,575:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447A7010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447085E0>)
2025-03-16 02:54:35,575:INFO:Checking exceptions
2025-03-16 02:54:35,575:INFO:Preloading libraries
2025-03-16 02:54:35,575:INFO:Set up data.
2025-03-16 02:54:35,579:INFO:Set up index.
2025-03-16 02:54:35,712:INFO:Initializing predict_model()
2025-03-16 02:54:35,714:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744745490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709940>)
2025-03-16 02:54:35,714:INFO:Checking exceptions
2025-03-16 02:54:35,714:INFO:Preloading libraries
2025-03-16 02:54:35,714:INFO:Set up data.
2025-03-16 02:54:35,717:INFO:Set up index.
2025-03-16 02:54:35,845:INFO:Initializing predict_model()
2025-03-16 02:54:35,845:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447A54D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447080E0>)
2025-03-16 02:54:35,845:INFO:Checking exceptions
2025-03-16 02:54:35,845:INFO:Preloading libraries
2025-03-16 02:54:35,846:INFO:Set up data.
2025-03-16 02:54:35,849:INFO:Set up index.
2025-03-16 02:54:35,973:INFO:Initializing predict_model()
2025-03-16 02:54:35,973:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447A42D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708400>)
2025-03-16 02:54:35,975:INFO:Checking exceptions
2025-03-16 02:54:35,975:INFO:Preloading libraries
2025-03-16 02:54:35,975:INFO:Set up data.
2025-03-16 02:54:35,977:INFO:Set up index.
2025-03-16 02:54:36,105:INFO:Initializing predict_model()
2025-03-16 02:54:36,105:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745621210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:36,105:INFO:Checking exceptions
2025-03-16 02:54:36,105:INFO:Preloading libraries
2025-03-16 02:54:36,105:INFO:Set up data.
2025-03-16 02:54:36,108:INFO:Set up index.
2025-03-16 02:54:36,248:INFO:Initializing predict_model()
2025-03-16 02:54:36,248:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D00990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:36,248:INFO:Checking exceptions
2025-03-16 02:54:36,248:INFO:Preloading libraries
2025-03-16 02:54:36,248:INFO:Set up data.
2025-03-16 02:54:36,251:INFO:Set up index.
2025-03-16 02:54:36,418:INFO:Initializing predict_model()
2025-03-16 02:54:36,418:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D17DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A520>)
2025-03-16 02:54:36,418:INFO:Checking exceptions
2025-03-16 02:54:36,418:INFO:Preloading libraries
2025-03-16 02:54:36,419:INFO:Set up data.
2025-03-16 02:54:36,421:INFO:Set up index.
2025-03-16 02:54:36,557:INFO:Initializing predict_model()
2025-03-16 02:54:36,557:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C8D8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709760>)
2025-03-16 02:54:36,557:INFO:Checking exceptions
2025-03-16 02:54:36,557:INFO:Preloading libraries
2025-03-16 02:54:36,557:INFO:Set up data.
2025-03-16 02:54:36,561:INFO:Set up index.
2025-03-16 02:54:36,761:INFO:Initializing predict_model()
2025-03-16 02:54:36,761:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C9F1D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708AE0>)
2025-03-16 02:54:36,761:INFO:Checking exceptions
2025-03-16 02:54:36,761:INFO:Preloading libraries
2025-03-16 02:54:36,761:INFO:Set up data.
2025-03-16 02:54:36,767:INFO:Set up index.
2025-03-16 02:54:36,922:INFO:Initializing predict_model()
2025-03-16 02:54:36,922:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447A4C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:36,922:INFO:Checking exceptions
2025-03-16 02:54:36,922:INFO:Preloading libraries
2025-03-16 02:54:36,922:INFO:Set up data.
2025-03-16 02:54:36,926:INFO:Set up index.
2025-03-16 02:54:37,069:INFO:Initializing predict_model()
2025-03-16 02:54:37,069:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457D29D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447085E0>)
2025-03-16 02:54:37,069:INFO:Checking exceptions
2025-03-16 02:54:37,069:INFO:Preloading libraries
2025-03-16 02:54:37,071:INFO:Set up data.
2025-03-16 02:54:37,074:INFO:Set up index.
2025-03-16 02:54:37,222:INFO:Initializing predict_model()
2025-03-16 02:54:37,222:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745BB4B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709940>)
2025-03-16 02:54:37,222:INFO:Checking exceptions
2025-03-16 02:54:37,222:INFO:Preloading libraries
2025-03-16 02:54:37,222:INFO:Set up data.
2025-03-16 02:54:37,227:INFO:Set up index.
2025-03-16 02:54:37,366:INFO:Initializing predict_model()
2025-03-16 02:54:37,366:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C9EB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447080E0>)
2025-03-16 02:54:37,366:INFO:Checking exceptions
2025-03-16 02:54:37,366:INFO:Preloading libraries
2025-03-16 02:54:37,366:INFO:Set up data.
2025-03-16 02:54:37,369:INFO:Set up index.
2025-03-16 02:54:37,501:INFO:Initializing predict_model()
2025-03-16 02:54:37,501:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745CACC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708400>)
2025-03-16 02:54:37,501:INFO:Checking exceptions
2025-03-16 02:54:37,501:INFO:Preloading libraries
2025-03-16 02:54:37,501:INFO:Set up data.
2025-03-16 02:54:37,504:INFO:Set up index.
2025-03-16 02:54:37,639:INFO:Initializing predict_model()
2025-03-16 02:54:37,639:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227448C4190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:37,639:INFO:Checking exceptions
2025-03-16 02:54:37,639:INFO:Preloading libraries
2025-03-16 02:54:37,639:INFO:Set up data.
2025-03-16 02:54:37,642:INFO:Set up index.
2025-03-16 02:54:37,824:INFO:Initializing predict_model()
2025-03-16 02:54:37,824:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447A6AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:37,824:INFO:Checking exceptions
2025-03-16 02:54:37,824:INFO:Preloading libraries
2025-03-16 02:54:37,825:INFO:Set up data.
2025-03-16 02:54:37,831:INFO:Set up index.
2025-03-16 02:54:38,002:INFO:Initializing predict_model()
2025-03-16 02:54:38,002:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227456227D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A520>)
2025-03-16 02:54:38,002:INFO:Checking exceptions
2025-03-16 02:54:38,002:INFO:Preloading libraries
2025-03-16 02:54:38,004:INFO:Set up data.
2025-03-16 02:54:38,006:INFO:Set up index.
2025-03-16 02:54:38,156:INFO:Initializing predict_model()
2025-03-16 02:54:38,156:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457E2410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709760>)
2025-03-16 02:54:38,156:INFO:Checking exceptions
2025-03-16 02:54:38,156:INFO:Preloading libraries
2025-03-16 02:54:38,157:INFO:Set up data.
2025-03-16 02:54:38,159:INFO:Set up index.
2025-03-16 02:54:38,301:INFO:Initializing predict_model()
2025-03-16 02:54:38,301:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D42110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708AE0>)
2025-03-16 02:54:38,301:INFO:Checking exceptions
2025-03-16 02:54:38,301:INFO:Preloading libraries
2025-03-16 02:54:38,301:INFO:Set up data.
2025-03-16 02:54:38,304:INFO:Set up index.
2025-03-16 02:54:38,430:INFO:Initializing predict_model()
2025-03-16 02:54:38,430:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F082790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:38,430:INFO:Checking exceptions
2025-03-16 02:54:38,430:INFO:Preloading libraries
2025-03-16 02:54:38,430:INFO:Set up data.
2025-03-16 02:54:38,434:INFO:Set up index.
2025-03-16 02:54:38,577:INFO:Initializing predict_model()
2025-03-16 02:54:38,577:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745793E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447085E0>)
2025-03-16 02:54:38,577:INFO:Checking exceptions
2025-03-16 02:54:38,577:INFO:Preloading libraries
2025-03-16 02:54:38,577:INFO:Set up data.
2025-03-16 02:54:38,580:INFO:Set up index.
2025-03-16 02:54:38,718:INFO:Initializing predict_model()
2025-03-16 02:54:38,718:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D42D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709940>)
2025-03-16 02:54:38,718:INFO:Checking exceptions
2025-03-16 02:54:38,718:INFO:Preloading libraries
2025-03-16 02:54:38,718:INFO:Set up data.
2025-03-16 02:54:38,721:INFO:Set up index.
2025-03-16 02:54:38,859:INFO:Initializing predict_model()
2025-03-16 02:54:38,859:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447A5510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447080E0>)
2025-03-16 02:54:38,859:INFO:Checking exceptions
2025-03-16 02:54:38,859:INFO:Preloading libraries
2025-03-16 02:54:38,859:INFO:Set up data.
2025-03-16 02:54:38,862:INFO:Set up index.
2025-03-16 02:54:38,991:INFO:Initializing predict_model()
2025-03-16 02:54:38,991:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457E2D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708400>)
2025-03-16 02:54:38,991:INFO:Checking exceptions
2025-03-16 02:54:38,991:INFO:Preloading libraries
2025-03-16 02:54:38,991:INFO:Set up data.
2025-03-16 02:54:38,994:INFO:Set up index.
2025-03-16 02:54:39,122:INFO:Initializing predict_model()
2025-03-16 02:54:39,124:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457E2D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:39,124:INFO:Checking exceptions
2025-03-16 02:54:39,124:INFO:Preloading libraries
2025-03-16 02:54:39,124:INFO:Set up data.
2025-03-16 02:54:39,126:INFO:Set up index.
2025-03-16 02:54:39,257:INFO:Initializing predict_model()
2025-03-16 02:54:39,257:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447A7350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:39,257:INFO:Checking exceptions
2025-03-16 02:54:39,257:INFO:Preloading libraries
2025-03-16 02:54:39,257:INFO:Set up data.
2025-03-16 02:54:39,260:INFO:Set up index.
2025-03-16 02:54:39,389:INFO:Initializing predict_model()
2025-03-16 02:54:39,389:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274374CF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A520>)
2025-03-16 02:54:39,389:INFO:Checking exceptions
2025-03-16 02:54:39,389:INFO:Preloading libraries
2025-03-16 02:54:39,389:INFO:Set up data.
2025-03-16 02:54:39,392:INFO:Set up index.
2025-03-16 02:54:39,531:INFO:Initializing predict_model()
2025-03-16 02:54:39,531:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745865FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709760>)
2025-03-16 02:54:39,531:INFO:Checking exceptions
2025-03-16 02:54:39,531:INFO:Preloading libraries
2025-03-16 02:54:39,531:INFO:Set up data.
2025-03-16 02:54:39,534:INFO:Set up index.
2025-03-16 02:54:39,660:INFO:Initializing predict_model()
2025-03-16 02:54:39,662:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F082790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708AE0>)
2025-03-16 02:54:39,662:INFO:Checking exceptions
2025-03-16 02:54:39,662:INFO:Preloading libraries
2025-03-16 02:54:39,662:INFO:Set up data.
2025-03-16 02:54:39,664:INFO:Set up index.
2025-03-16 02:54:39,792:INFO:Initializing predict_model()
2025-03-16 02:54:39,792:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227448E67D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:39,792:INFO:Checking exceptions
2025-03-16 02:54:39,792:INFO:Preloading libraries
2025-03-16 02:54:39,792:INFO:Set up data.
2025-03-16 02:54:39,796:INFO:Set up index.
2025-03-16 02:54:39,923:INFO:Initializing predict_model()
2025-03-16 02:54:39,923:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C9EC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447085E0>)
2025-03-16 02:54:39,923:INFO:Checking exceptions
2025-03-16 02:54:39,923:INFO:Preloading libraries
2025-03-16 02:54:39,923:INFO:Set up data.
2025-03-16 02:54:39,926:INFO:Set up index.
2025-03-16 02:54:40,060:INFO:Initializing predict_model()
2025-03-16 02:54:40,060:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457E0D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709940>)
2025-03-16 02:54:40,060:INFO:Checking exceptions
2025-03-16 02:54:40,060:INFO:Preloading libraries
2025-03-16 02:54:40,060:INFO:Set up data.
2025-03-16 02:54:40,064:INFO:Set up index.
2025-03-16 02:54:40,195:INFO:Initializing predict_model()
2025-03-16 02:54:40,195:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DE67910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447080E0>)
2025-03-16 02:54:40,195:INFO:Checking exceptions
2025-03-16 02:54:40,195:INFO:Preloading libraries
2025-03-16 02:54:40,195:INFO:Set up data.
2025-03-16 02:54:40,198:INFO:Set up index.
2025-03-16 02:54:40,326:INFO:Initializing predict_model()
2025-03-16 02:54:40,326:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C84C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708400>)
2025-03-16 02:54:40,326:INFO:Checking exceptions
2025-03-16 02:54:40,326:INFO:Preloading libraries
2025-03-16 02:54:40,326:INFO:Set up data.
2025-03-16 02:54:40,329:INFO:Set up index.
2025-03-16 02:54:40,467:INFO:Initializing predict_model()
2025-03-16 02:54:40,467:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D003D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:40,467:INFO:Checking exceptions
2025-03-16 02:54:40,467:INFO:Preloading libraries
2025-03-16 02:54:40,467:INFO:Set up data.
2025-03-16 02:54:40,470:INFO:Set up index.
2025-03-16 02:54:40,602:INFO:Initializing predict_model()
2025-03-16 02:54:40,604:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D16090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:40,604:INFO:Checking exceptions
2025-03-16 02:54:40,604:INFO:Preloading libraries
2025-03-16 02:54:40,604:INFO:Set up data.
2025-03-16 02:54:40,607:INFO:Set up index.
2025-03-16 02:54:40,738:INFO:Initializing predict_model()
2025-03-16 02:54:40,738:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C9EA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A520>)
2025-03-16 02:54:40,738:INFO:Checking exceptions
2025-03-16 02:54:40,738:INFO:Preloading libraries
2025-03-16 02:54:40,740:INFO:Set up data.
2025-03-16 02:54:40,741:INFO:Set up index.
2025-03-16 02:54:40,882:INFO:Initializing predict_model()
2025-03-16 02:54:40,882:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D16090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709760>)
2025-03-16 02:54:40,882:INFO:Checking exceptions
2025-03-16 02:54:40,882:INFO:Preloading libraries
2025-03-16 02:54:40,882:INFO:Set up data.
2025-03-16 02:54:40,886:INFO:Set up index.
2025-03-16 02:54:41,023:INFO:Initializing predict_model()
2025-03-16 02:54:41,023:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D36090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708AE0>)
2025-03-16 02:54:41,023:INFO:Checking exceptions
2025-03-16 02:54:41,023:INFO:Preloading libraries
2025-03-16 02:54:41,023:INFO:Set up data.
2025-03-16 02:54:41,027:INFO:Set up index.
2025-03-16 02:54:41,167:INFO:Initializing predict_model()
2025-03-16 02:54:41,167:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C86150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:41,168:INFO:Checking exceptions
2025-03-16 02:54:41,168:INFO:Preloading libraries
2025-03-16 02:54:41,168:INFO:Set up data.
2025-03-16 02:54:41,171:INFO:Set up index.
2025-03-16 02:54:41,305:INFO:Initializing predict_model()
2025-03-16 02:54:41,305:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745865990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447085E0>)
2025-03-16 02:54:41,305:INFO:Checking exceptions
2025-03-16 02:54:41,305:INFO:Preloading libraries
2025-03-16 02:54:41,305:INFO:Set up data.
2025-03-16 02:54:41,307:INFO:Set up index.
2025-03-16 02:54:41,433:INFO:Initializing predict_model()
2025-03-16 02:54:41,433:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744535E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709940>)
2025-03-16 02:54:41,433:INFO:Checking exceptions
2025-03-16 02:54:41,433:INFO:Preloading libraries
2025-03-16 02:54:41,433:INFO:Set up data.
2025-03-16 02:54:41,437:INFO:Set up index.
2025-03-16 02:54:41,563:INFO:Initializing predict_model()
2025-03-16 02:54:41,563:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D17F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447080E0>)
2025-03-16 02:54:41,563:INFO:Checking exceptions
2025-03-16 02:54:41,563:INFO:Preloading libraries
2025-03-16 02:54:41,563:INFO:Set up data.
2025-03-16 02:54:41,566:INFO:Set up index.
2025-03-16 02:54:41,688:INFO:Initializing predict_model()
2025-03-16 02:54:41,688:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457D3790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708400>)
2025-03-16 02:54:41,688:INFO:Checking exceptions
2025-03-16 02:54:41,688:INFO:Preloading libraries
2025-03-16 02:54:41,688:INFO:Set up data.
2025-03-16 02:54:41,690:INFO:Set up index.
2025-03-16 02:54:41,815:INFO:Initializing predict_model()
2025-03-16 02:54:41,815:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C9ED90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:41,815:INFO:Checking exceptions
2025-03-16 02:54:41,815:INFO:Preloading libraries
2025-03-16 02:54:41,815:INFO:Set up data.
2025-03-16 02:54:41,818:INFO:Set up index.
2025-03-16 02:54:41,942:INFO:Initializing predict_model()
2025-03-16 02:54:41,942:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270A04A8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:41,942:INFO:Checking exceptions
2025-03-16 02:54:41,942:INFO:Preloading libraries
2025-03-16 02:54:41,942:INFO:Set up data.
2025-03-16 02:54:41,945:INFO:Set up index.
2025-03-16 02:54:42,068:INFO:Initializing predict_model()
2025-03-16 02:54:42,068:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F3893D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A520>)
2025-03-16 02:54:42,068:INFO:Checking exceptions
2025-03-16 02:54:42,068:INFO:Preloading libraries
2025-03-16 02:54:42,068:INFO:Set up data.
2025-03-16 02:54:42,070:INFO:Set up index.
2025-03-16 02:54:42,199:INFO:Initializing predict_model()
2025-03-16 02:54:42,199:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C9D110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709760>)
2025-03-16 02:54:42,199:INFO:Checking exceptions
2025-03-16 02:54:42,199:INFO:Preloading libraries
2025-03-16 02:54:42,199:INFO:Set up data.
2025-03-16 02:54:42,202:INFO:Set up index.
2025-03-16 02:54:42,326:INFO:Initializing predict_model()
2025-03-16 02:54:42,326:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457E0390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708AE0>)
2025-03-16 02:54:42,326:INFO:Checking exceptions
2025-03-16 02:54:42,326:INFO:Preloading libraries
2025-03-16 02:54:42,326:INFO:Set up data.
2025-03-16 02:54:42,329:INFO:Set up index.
2025-03-16 02:54:42,457:INFO:Initializing predict_model()
2025-03-16 02:54:42,457:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D34E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:42,457:INFO:Checking exceptions
2025-03-16 02:54:42,457:INFO:Preloading libraries
2025-03-16 02:54:42,459:INFO:Set up data.
2025-03-16 02:54:42,460:INFO:Set up index.
2025-03-16 02:54:42,584:INFO:Initializing predict_model()
2025-03-16 02:54:42,584:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D16B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447085E0>)
2025-03-16 02:54:42,584:INFO:Checking exceptions
2025-03-16 02:54:42,584:INFO:Preloading libraries
2025-03-16 02:54:42,584:INFO:Set up data.
2025-03-16 02:54:42,587:INFO:Set up index.
2025-03-16 02:54:42,710:INFO:Initializing predict_model()
2025-03-16 02:54:42,711:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D42ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709940>)
2025-03-16 02:54:42,711:INFO:Checking exceptions
2025-03-16 02:54:42,711:INFO:Preloading libraries
2025-03-16 02:54:42,711:INFO:Set up data.
2025-03-16 02:54:42,713:INFO:Set up index.
2025-03-16 02:54:42,837:INFO:Initializing predict_model()
2025-03-16 02:54:42,837:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C8DE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447080E0>)
2025-03-16 02:54:42,837:INFO:Checking exceptions
2025-03-16 02:54:42,837:INFO:Preloading libraries
2025-03-16 02:54:42,839:INFO:Set up data.
2025-03-16 02:54:42,840:INFO:Set up index.
2025-03-16 02:54:42,967:INFO:Initializing predict_model()
2025-03-16 02:54:42,967:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743741210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708400>)
2025-03-16 02:54:42,967:INFO:Checking exceptions
2025-03-16 02:54:42,967:INFO:Preloading libraries
2025-03-16 02:54:42,967:INFO:Set up data.
2025-03-16 02:54:42,969:INFO:Set up index.
2025-03-16 02:54:43,095:INFO:Initializing predict_model()
2025-03-16 02:54:43,095:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D477350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:43,095:INFO:Checking exceptions
2025-03-16 02:54:43,095:INFO:Preloading libraries
2025-03-16 02:54:43,096:INFO:Set up data.
2025-03-16 02:54:43,098:INFO:Set up index.
2025-03-16 02:54:43,221:INFO:Initializing predict_model()
2025-03-16 02:54:43,221:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C929D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:43,221:INFO:Checking exceptions
2025-03-16 02:54:43,221:INFO:Preloading libraries
2025-03-16 02:54:43,223:INFO:Set up data.
2025-03-16 02:54:43,225:INFO:Set up index.
2025-03-16 02:54:43,348:INFO:Initializing predict_model()
2025-03-16 02:54:43,348:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C8CC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A520>)
2025-03-16 02:54:43,348:INFO:Checking exceptions
2025-03-16 02:54:43,348:INFO:Preloading libraries
2025-03-16 02:54:43,348:INFO:Set up data.
2025-03-16 02:54:43,351:INFO:Set up index.
2025-03-16 02:54:43,477:INFO:Initializing predict_model()
2025-03-16 02:54:43,477:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D477350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709760>)
2025-03-16 02:54:43,477:INFO:Checking exceptions
2025-03-16 02:54:43,477:INFO:Preloading libraries
2025-03-16 02:54:43,478:INFO:Set up data.
2025-03-16 02:54:43,480:INFO:Set up index.
2025-03-16 02:54:43,604:INFO:Initializing predict_model()
2025-03-16 02:54:43,604:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227456217D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708AE0>)
2025-03-16 02:54:43,604:INFO:Checking exceptions
2025-03-16 02:54:43,604:INFO:Preloading libraries
2025-03-16 02:54:43,604:INFO:Set up data.
2025-03-16 02:54:43,607:INFO:Set up index.
2025-03-16 02:54:43,730:INFO:Initializing predict_model()
2025-03-16 02:54:43,730:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F3893D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:43,730:INFO:Checking exceptions
2025-03-16 02:54:43,730:INFO:Preloading libraries
2025-03-16 02:54:43,730:INFO:Set up data.
2025-03-16 02:54:43,733:INFO:Set up index.
2025-03-16 02:54:43,859:INFO:Initializing predict_model()
2025-03-16 02:54:43,859:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D15710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447085E0>)
2025-03-16 02:54:43,859:INFO:Checking exceptions
2025-03-16 02:54:43,859:INFO:Preloading libraries
2025-03-16 02:54:43,859:INFO:Set up data.
2025-03-16 02:54:43,862:INFO:Set up index.
2025-03-16 02:54:43,986:INFO:Initializing predict_model()
2025-03-16 02:54:43,986:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457D3790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709940>)
2025-03-16 02:54:43,986:INFO:Checking exceptions
2025-03-16 02:54:43,986:INFO:Preloading libraries
2025-03-16 02:54:43,986:INFO:Set up data.
2025-03-16 02:54:43,989:INFO:Set up index.
2025-03-16 02:54:44,111:INFO:Initializing predict_model()
2025-03-16 02:54:44,111:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F02FA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447080E0>)
2025-03-16 02:54:44,111:INFO:Checking exceptions
2025-03-16 02:54:44,111:INFO:Preloading libraries
2025-03-16 02:54:44,111:INFO:Set up data.
2025-03-16 02:54:44,114:INFO:Set up index.
2025-03-16 02:54:44,238:INFO:Initializing predict_model()
2025-03-16 02:54:44,239:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D178D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708400>)
2025-03-16 02:54:44,239:INFO:Checking exceptions
2025-03-16 02:54:44,239:INFO:Preloading libraries
2025-03-16 02:54:44,239:INFO:Set up data.
2025-03-16 02:54:44,242:INFO:Set up index.
2025-03-16 02:54:44,373:INFO:Initializing predict_model()
2025-03-16 02:54:44,373:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C72590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:44,373:INFO:Checking exceptions
2025-03-16 02:54:44,375:INFO:Preloading libraries
2025-03-16 02:54:44,375:INFO:Set up data.
2025-03-16 02:54:44,378:INFO:Set up index.
2025-03-16 02:54:44,511:INFO:Initializing predict_model()
2025-03-16 02:54:44,511:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C8E5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:44,511:INFO:Checking exceptions
2025-03-16 02:54:44,511:INFO:Preloading libraries
2025-03-16 02:54:44,511:INFO:Set up data.
2025-03-16 02:54:44,514:INFO:Set up index.
2025-03-16 02:54:44,643:INFO:Initializing predict_model()
2025-03-16 02:54:44,643:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447A6650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A520>)
2025-03-16 02:54:44,643:INFO:Checking exceptions
2025-03-16 02:54:44,643:INFO:Preloading libraries
2025-03-16 02:54:44,643:INFO:Set up data.
2025-03-16 02:54:44,647:INFO:Set up index.
2025-03-16 02:54:44,772:INFO:Initializing predict_model()
2025-03-16 02:54:44,772:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744746AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709760>)
2025-03-16 02:54:44,772:INFO:Checking exceptions
2025-03-16 02:54:44,772:INFO:Preloading libraries
2025-03-16 02:54:44,772:INFO:Set up data.
2025-03-16 02:54:44,776:INFO:Set up index.
2025-03-16 02:54:44,900:INFO:Initializing predict_model()
2025-03-16 02:54:44,900:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DA6A110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708AE0>)
2025-03-16 02:54:44,900:INFO:Checking exceptions
2025-03-16 02:54:44,900:INFO:Preloading libraries
2025-03-16 02:54:44,900:INFO:Set up data.
2025-03-16 02:54:44,903:INFO:Set up index.
2025-03-16 02:54:45,036:INFO:Initializing predict_model()
2025-03-16 02:54:45,036:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745865FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:45,036:INFO:Checking exceptions
2025-03-16 02:54:45,036:INFO:Preloading libraries
2025-03-16 02:54:45,036:INFO:Set up data.
2025-03-16 02:54:45,039:INFO:Set up index.
2025-03-16 02:54:45,161:INFO:Initializing predict_model()
2025-03-16 02:54:45,163:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C9CF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447085E0>)
2025-03-16 02:54:45,163:INFO:Checking exceptions
2025-03-16 02:54:45,163:INFO:Preloading libraries
2025-03-16 02:54:45,163:INFO:Set up data.
2025-03-16 02:54:45,166:INFO:Set up index.
2025-03-16 02:54:45,297:INFO:Initializing predict_model()
2025-03-16 02:54:45,297:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B78F910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709940>)
2025-03-16 02:54:45,297:INFO:Checking exceptions
2025-03-16 02:54:45,297:INFO:Preloading libraries
2025-03-16 02:54:45,297:INFO:Set up data.
2025-03-16 02:54:45,301:INFO:Set up index.
2025-03-16 02:54:45,426:INFO:Initializing predict_model()
2025-03-16 02:54:45,426:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D15650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447080E0>)
2025-03-16 02:54:45,426:INFO:Checking exceptions
2025-03-16 02:54:45,426:INFO:Preloading libraries
2025-03-16 02:54:45,427:INFO:Set up data.
2025-03-16 02:54:45,428:INFO:Set up index.
2025-03-16 02:54:45,561:INFO:Initializing predict_model()
2025-03-16 02:54:45,561:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C9EA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708400>)
2025-03-16 02:54:45,561:INFO:Checking exceptions
2025-03-16 02:54:45,561:INFO:Preloading libraries
2025-03-16 02:54:45,561:INFO:Set up data.
2025-03-16 02:54:45,564:INFO:Set up index.
2025-03-16 02:54:45,708:INFO:Initializing predict_model()
2025-03-16 02:54:45,708:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D37250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:45,708:INFO:Checking exceptions
2025-03-16 02:54:45,708:INFO:Preloading libraries
2025-03-16 02:54:45,708:INFO:Set up data.
2025-03-16 02:54:45,713:INFO:Set up index.
2025-03-16 02:54:45,847:INFO:Initializing predict_model()
2025-03-16 02:54:45,847:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447A7350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:45,847:INFO:Checking exceptions
2025-03-16 02:54:45,847:INFO:Preloading libraries
2025-03-16 02:54:45,848:INFO:Set up data.
2025-03-16 02:54:45,849:INFO:Set up index.
2025-03-16 02:54:45,978:INFO:Initializing predict_model()
2025-03-16 02:54:45,978:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744745490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A520>)
2025-03-16 02:54:45,978:INFO:Checking exceptions
2025-03-16 02:54:45,978:INFO:Preloading libraries
2025-03-16 02:54:45,978:INFO:Set up data.
2025-03-16 02:54:45,980:INFO:Set up index.
2025-03-16 02:54:46,109:INFO:Initializing predict_model()
2025-03-16 02:54:46,109:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270A04A8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709760>)
2025-03-16 02:54:46,109:INFO:Checking exceptions
2025-03-16 02:54:46,109:INFO:Preloading libraries
2025-03-16 02:54:46,109:INFO:Set up data.
2025-03-16 02:54:46,112:INFO:Set up index.
2025-03-16 02:54:46,243:INFO:Initializing predict_model()
2025-03-16 02:54:46,243:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457E0910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708AE0>)
2025-03-16 02:54:46,243:INFO:Checking exceptions
2025-03-16 02:54:46,243:INFO:Preloading libraries
2025-03-16 02:54:46,243:INFO:Set up data.
2025-03-16 02:54:46,247:INFO:Set up index.
2025-03-16 02:54:46,373:INFO:Initializing predict_model()
2025-03-16 02:54:46,373:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C84C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:46,373:INFO:Checking exceptions
2025-03-16 02:54:46,373:INFO:Preloading libraries
2025-03-16 02:54:46,373:INFO:Set up data.
2025-03-16 02:54:46,377:INFO:Set up index.
2025-03-16 02:54:46,509:INFO:Initializing predict_model()
2025-03-16 02:54:46,509:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F082D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447085E0>)
2025-03-16 02:54:46,509:INFO:Checking exceptions
2025-03-16 02:54:46,509:INFO:Preloading libraries
2025-03-16 02:54:46,509:INFO:Set up data.
2025-03-16 02:54:46,512:INFO:Set up index.
2025-03-16 02:54:46,637:INFO:Initializing predict_model()
2025-03-16 02:54:46,637:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D35890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709940>)
2025-03-16 02:54:46,637:INFO:Checking exceptions
2025-03-16 02:54:46,637:INFO:Preloading libraries
2025-03-16 02:54:46,637:INFO:Set up data.
2025-03-16 02:54:46,640:INFO:Set up index.
2025-03-16 02:54:46,779:INFO:Initializing load_model()
2025-03-16 02:54:46,779:INFO:load_model(model_name=../eng_psu_hatyai/main/humi_use_temp_model_2, platform=None, authentication=None, verbose=True)
2025-03-16 02:54:46,872:INFO:Initializing predict_model()
2025-03-16 02:54:46,872:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D17F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:46,872:INFO:Checking exceptions
2025-03-16 02:54:46,872:INFO:Preloading libraries
2025-03-16 02:54:46,872:INFO:Set up data.
2025-03-16 02:54:46,876:INFO:Set up index.
2025-03-16 02:54:47,047:INFO:Initializing predict_model()
2025-03-16 02:54:47,047:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C76790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464E200>)
2025-03-16 02:54:47,047:INFO:Checking exceptions
2025-03-16 02:54:47,047:INFO:Preloading libraries
2025-03-16 02:54:47,047:INFO:Set up data.
2025-03-16 02:54:47,050:INFO:Set up index.
2025-03-16 02:54:47,185:INFO:Initializing predict_model()
2025-03-16 02:54:47,186:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745595B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708680>)
2025-03-16 02:54:47,186:INFO:Checking exceptions
2025-03-16 02:54:47,186:INFO:Preloading libraries
2025-03-16 02:54:47,186:INFO:Set up data.
2025-03-16 02:54:47,190:INFO:Set up index.
2025-03-16 02:54:47,319:INFO:Initializing predict_model()
2025-03-16 02:54:47,319:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743897F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A5C0>)
2025-03-16 02:54:47,319:INFO:Checking exceptions
2025-03-16 02:54:47,319:INFO:Preloading libraries
2025-03-16 02:54:47,319:INFO:Set up data.
2025-03-16 02:54:47,322:INFO:Set up index.
2025-03-16 02:54:47,454:INFO:Initializing predict_model()
2025-03-16 02:54:47,454:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227444B24D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708CC0>)
2025-03-16 02:54:47,454:INFO:Checking exceptions
2025-03-16 02:54:47,454:INFO:Preloading libraries
2025-03-16 02:54:47,455:INFO:Set up data.
2025-03-16 02:54:47,457:INFO:Set up index.
2025-03-16 02:54:47,588:INFO:Initializing predict_model()
2025-03-16 02:54:47,588:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:54:47,588:INFO:Checking exceptions
2025-03-16 02:54:47,588:INFO:Preloading libraries
2025-03-16 02:54:47,588:INFO:Set up data.
2025-03-16 02:54:47,591:INFO:Set up index.
2025-03-16 02:54:47,722:INFO:Initializing predict_model()
2025-03-16 02:54:47,722:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227436B7250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464D440>)
2025-03-16 02:54:47,723:INFO:Checking exceptions
2025-03-16 02:54:47,723:INFO:Preloading libraries
2025-03-16 02:54:47,723:INFO:Set up data.
2025-03-16 02:54:47,726:INFO:Set up index.
2025-03-16 02:54:47,861:INFO:Initializing predict_model()
2025-03-16 02:54:47,861:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743732490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:54:47,861:INFO:Checking exceptions
2025-03-16 02:54:47,861:INFO:Preloading libraries
2025-03-16 02:54:47,861:INFO:Set up data.
2025-03-16 02:54:47,864:INFO:Set up index.
2025-03-16 02:54:47,993:INFO:Initializing predict_model()
2025-03-16 02:54:47,993:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445F7D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C860>)
2025-03-16 02:54:47,993:INFO:Checking exceptions
2025-03-16 02:54:47,993:INFO:Preloading libraries
2025-03-16 02:54:47,993:INFO:Set up data.
2025-03-16 02:54:47,996:INFO:Set up index.
2025-03-16 02:54:48,134:INFO:Initializing predict_model()
2025-03-16 02:54:48,134:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274463DB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C4A0>)
2025-03-16 02:54:48,134:INFO:Checking exceptions
2025-03-16 02:54:48,134:INFO:Preloading libraries
2025-03-16 02:54:48,135:INFO:Set up data.
2025-03-16 02:54:48,138:INFO:Set up index.
2025-03-16 02:54:48,272:INFO:Initializing predict_model()
2025-03-16 02:54:48,272:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547CE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708A40>)
2025-03-16 02:54:48,272:INFO:Checking exceptions
2025-03-16 02:54:48,272:INFO:Preloading libraries
2025-03-16 02:54:48,272:INFO:Set up data.
2025-03-16 02:54:48,275:INFO:Set up index.
2025-03-16 02:54:48,402:INFO:Initializing predict_model()
2025-03-16 02:54:48,402:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743724C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:48,402:INFO:Checking exceptions
2025-03-16 02:54:48,402:INFO:Preloading libraries
2025-03-16 02:54:48,402:INFO:Set up data.
2025-03-16 02:54:48,406:INFO:Set up index.
2025-03-16 02:54:48,537:INFO:Initializing predict_model()
2025-03-16 02:54:48,537:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274388BD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708360>)
2025-03-16 02:54:48,537:INFO:Checking exceptions
2025-03-16 02:54:48,537:INFO:Preloading libraries
2025-03-16 02:54:48,537:INFO:Set up data.
2025-03-16 02:54:48,540:INFO:Set up index.
2025-03-16 02:54:48,686:INFO:Initializing predict_model()
2025-03-16 02:54:48,686:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274483D950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470AF20>)
2025-03-16 02:54:48,686:INFO:Checking exceptions
2025-03-16 02:54:48,686:INFO:Preloading libraries
2025-03-16 02:54:48,686:INFO:Set up data.
2025-03-16 02:54:48,689:INFO:Set up index.
2025-03-16 02:54:48,829:INFO:Initializing predict_model()
2025-03-16 02:54:48,829:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C02B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470BD80>)
2025-03-16 02:54:48,829:INFO:Checking exceptions
2025-03-16 02:54:48,830:INFO:Preloading libraries
2025-03-16 02:54:48,830:INFO:Set up data.
2025-03-16 02:54:48,834:INFO:Set up index.
2025-03-16 02:54:48,970:INFO:Initializing predict_model()
2025-03-16 02:54:48,970:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743842310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A2A0>)
2025-03-16 02:54:48,970:INFO:Checking exceptions
2025-03-16 02:54:48,970:INFO:Preloading libraries
2025-03-16 02:54:48,970:INFO:Set up data.
2025-03-16 02:54:48,974:INFO:Set up index.
2025-03-16 02:54:49,113:INFO:Initializing predict_model()
2025-03-16 02:54:49,113:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455F4750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A520>)
2025-03-16 02:54:49,113:INFO:Checking exceptions
2025-03-16 02:54:49,113:INFO:Preloading libraries
2025-03-16 02:54:49,113:INFO:Set up data.
2025-03-16 02:54:49,117:INFO:Set up index.
2025-03-16 02:54:49,251:INFO:Initializing predict_model()
2025-03-16 02:54:49,251:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274483C250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:54:49,251:INFO:Checking exceptions
2025-03-16 02:54:49,251:INFO:Preloading libraries
2025-03-16 02:54:49,251:INFO:Set up data.
2025-03-16 02:54:49,254:INFO:Set up index.
2025-03-16 02:54:49,396:INFO:Initializing predict_model()
2025-03-16 02:54:49,396:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744805850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708680>)
2025-03-16 02:54:49,396:INFO:Checking exceptions
2025-03-16 02:54:49,396:INFO:Preloading libraries
2025-03-16 02:54:49,396:INFO:Set up data.
2025-03-16 02:54:49,399:INFO:Set up index.
2025-03-16 02:54:49,527:INFO:Initializing predict_model()
2025-03-16 02:54:49,527:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274535AB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709DA0>)
2025-03-16 02:54:49,528:INFO:Checking exceptions
2025-03-16 02:54:49,528:INFO:Preloading libraries
2025-03-16 02:54:49,528:INFO:Set up data.
2025-03-16 02:54:49,530:INFO:Set up index.
2025-03-16 02:54:49,661:INFO:Initializing predict_model()
2025-03-16 02:54:49,661:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743840F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447082C0>)
2025-03-16 02:54:49,661:INFO:Checking exceptions
2025-03-16 02:54:49,661:INFO:Preloading libraries
2025-03-16 02:54:49,661:INFO:Set up data.
2025-03-16 02:54:49,664:INFO:Set up index.
2025-03-16 02:54:49,797:INFO:Initializing predict_model()
2025-03-16 02:54:49,797:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002270B1E4E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C180>)
2025-03-16 02:54:49,797:INFO:Checking exceptions
2025-03-16 02:54:49,797:INFO:Preloading libraries
2025-03-16 02:54:49,797:INFO:Set up data.
2025-03-16 02:54:49,801:INFO:Set up index.
2025-03-16 02:54:49,941:INFO:Initializing predict_model()
2025-03-16 02:54:49,941:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274463EBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464D9E0>)
2025-03-16 02:54:49,941:INFO:Checking exceptions
2025-03-16 02:54:49,941:INFO:Preloading libraries
2025-03-16 02:54:49,941:INFO:Set up data.
2025-03-16 02:54:49,947:INFO:Set up index.
2025-03-16 02:54:50,087:INFO:Initializing predict_model()
2025-03-16 02:54:50,087:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274545F4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470AF20>)
2025-03-16 02:54:50,087:INFO:Checking exceptions
2025-03-16 02:54:50,087:INFO:Preloading libraries
2025-03-16 02:54:50,087:INFO:Set up data.
2025-03-16 02:54:50,090:INFO:Set up index.
2025-03-16 02:54:50,233:INFO:Initializing predict_model()
2025-03-16 02:54:50,233:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745856850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:50,233:INFO:Checking exceptions
2025-03-16 02:54:50,233:INFO:Preloading libraries
2025-03-16 02:54:50,233:INFO:Set up data.
2025-03-16 02:54:50,236:INFO:Set up index.
2025-03-16 02:54:50,369:INFO:Initializing predict_model()
2025-03-16 02:54:50,369:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274463DA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708680>)
2025-03-16 02:54:50,369:INFO:Checking exceptions
2025-03-16 02:54:50,369:INFO:Preloading libraries
2025-03-16 02:54:50,369:INFO:Set up data.
2025-03-16 02:54:50,372:INFO:Set up index.
2025-03-16 02:54:50,500:INFO:Initializing predict_model()
2025-03-16 02:54:50,500:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D41750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464E200>)
2025-03-16 02:54:50,500:INFO:Checking exceptions
2025-03-16 02:54:50,500:INFO:Preloading libraries
2025-03-16 02:54:50,500:INFO:Set up data.
2025-03-16 02:54:50,505:INFO:Set up index.
2025-03-16 02:54:50,634:INFO:Initializing predict_model()
2025-03-16 02:54:50,634:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741EDC450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709080>)
2025-03-16 02:54:50,634:INFO:Checking exceptions
2025-03-16 02:54:50,634:INFO:Preloading libraries
2025-03-16 02:54:50,634:INFO:Set up data.
2025-03-16 02:54:50,638:INFO:Set up index.
2025-03-16 02:54:50,766:INFO:Initializing predict_model()
2025-03-16 02:54:50,766:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447BECD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708860>)
2025-03-16 02:54:50,766:INFO:Checking exceptions
2025-03-16 02:54:50,766:INFO:Preloading libraries
2025-03-16 02:54:50,767:INFO:Set up data.
2025-03-16 02:54:50,770:INFO:Set up index.
2025-03-16 02:54:50,904:INFO:Initializing predict_model()
2025-03-16 02:54:50,904:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708720>)
2025-03-16 02:54:50,904:INFO:Checking exceptions
2025-03-16 02:54:50,904:INFO:Preloading libraries
2025-03-16 02:54:50,904:INFO:Set up data.
2025-03-16 02:54:50,907:INFO:Set up index.
2025-03-16 02:54:51,047:INFO:Initializing predict_model()
2025-03-16 02:54:51,047:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744723690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708A40>)
2025-03-16 02:54:51,047:INFO:Checking exceptions
2025-03-16 02:54:51,047:INFO:Preloading libraries
2025-03-16 02:54:51,047:INFO:Set up data.
2025-03-16 02:54:51,049:INFO:Set up index.
2025-03-16 02:54:51,185:INFO:Initializing predict_model()
2025-03-16 02:54:51,185:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274386D450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A700>)
2025-03-16 02:54:51,185:INFO:Checking exceptions
2025-03-16 02:54:51,185:INFO:Preloading libraries
2025-03-16 02:54:51,185:INFO:Set up data.
2025-03-16 02:54:51,189:INFO:Set up index.
2025-03-16 02:54:51,329:INFO:Initializing predict_model()
2025-03-16 02:54:51,329:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B6890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709580>)
2025-03-16 02:54:51,329:INFO:Checking exceptions
2025-03-16 02:54:51,329:INFO:Preloading libraries
2025-03-16 02:54:51,329:INFO:Set up data.
2025-03-16 02:54:51,332:INFO:Set up index.
2025-03-16 02:54:51,473:INFO:Initializing predict_model()
2025-03-16 02:54:51,473:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744844C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464FF60>)
2025-03-16 02:54:51,473:INFO:Checking exceptions
2025-03-16 02:54:51,473:INFO:Preloading libraries
2025-03-16 02:54:51,473:INFO:Set up data.
2025-03-16 02:54:51,477:INFO:Set up index.
2025-03-16 02:54:51,614:INFO:Initializing predict_model()
2025-03-16 02:54:51,614:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464FA60>)
2025-03-16 02:54:51,614:INFO:Checking exceptions
2025-03-16 02:54:51,614:INFO:Preloading libraries
2025-03-16 02:54:51,614:INFO:Set up data.
2025-03-16 02:54:51,617:INFO:Set up index.
2025-03-16 02:54:51,743:INFO:Initializing predict_model()
2025-03-16 02:54:51,745:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744805710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:51,745:INFO:Checking exceptions
2025-03-16 02:54:51,745:INFO:Preloading libraries
2025-03-16 02:54:51,745:INFO:Set up data.
2025-03-16 02:54:51,747:INFO:Set up index.
2025-03-16 02:54:51,882:INFO:Initializing predict_model()
2025-03-16 02:54:51,882:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274467DAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464E200>)
2025-03-16 02:54:51,882:INFO:Checking exceptions
2025-03-16 02:54:51,882:INFO:Preloading libraries
2025-03-16 02:54:51,882:INFO:Set up data.
2025-03-16 02:54:51,889:INFO:Set up index.
2025-03-16 02:54:52,030:INFO:Initializing predict_model()
2025-03-16 02:54:52,030:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745D15850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:52,030:INFO:Checking exceptions
2025-03-16 02:54:52,030:INFO:Preloading libraries
2025-03-16 02:54:52,031:INFO:Set up data.
2025-03-16 02:54:52,034:INFO:Set up index.
2025-03-16 02:54:52,167:INFO:Initializing predict_model()
2025-03-16 02:54:52,167:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C61B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470BD80>)
2025-03-16 02:54:52,167:INFO:Checking exceptions
2025-03-16 02:54:52,167:INFO:Preloading libraries
2025-03-16 02:54:52,167:INFO:Set up data.
2025-03-16 02:54:52,172:INFO:Set up index.
2025-03-16 02:54:52,306:INFO:Initializing predict_model()
2025-03-16 02:54:52,306:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445F5650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A700>)
2025-03-16 02:54:52,306:INFO:Checking exceptions
2025-03-16 02:54:52,306:INFO:Preloading libraries
2025-03-16 02:54:52,306:INFO:Set up data.
2025-03-16 02:54:52,309:INFO:Set up index.
2025-03-16 02:54:52,449:INFO:Initializing predict_model()
2025-03-16 02:54:52,449:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274467DAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708040>)
2025-03-16 02:54:52,449:INFO:Checking exceptions
2025-03-16 02:54:52,449:INFO:Preloading libraries
2025-03-16 02:54:52,449:INFO:Set up data.
2025-03-16 02:54:52,452:INFO:Set up index.
2025-03-16 02:54:52,581:INFO:Initializing predict_model()
2025-03-16 02:54:52,581:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457D3E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447082C0>)
2025-03-16 02:54:52,581:INFO:Checking exceptions
2025-03-16 02:54:52,581:INFO:Preloading libraries
2025-03-16 02:54:52,582:INFO:Set up data.
2025-03-16 02:54:52,585:INFO:Set up index.
2025-03-16 02:54:52,714:INFO:Initializing predict_model()
2025-03-16 02:54:52,714:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445DEA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464D9E0>)
2025-03-16 02:54:52,714:INFO:Checking exceptions
2025-03-16 02:54:52,714:INFO:Preloading libraries
2025-03-16 02:54:52,714:INFO:Set up data.
2025-03-16 02:54:52,718:INFO:Set up index.
2025-03-16 02:54:52,850:INFO:Initializing predict_model()
2025-03-16 02:54:52,850:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438A8B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C4A0>)
2025-03-16 02:54:52,850:INFO:Checking exceptions
2025-03-16 02:54:52,850:INFO:Preloading libraries
2025-03-16 02:54:52,850:INFO:Set up data.
2025-03-16 02:54:52,853:INFO:Set up index.
2025-03-16 02:54:52,995:INFO:Initializing predict_model()
2025-03-16 02:54:52,995:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DD1CC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464FF60>)
2025-03-16 02:54:52,995:INFO:Checking exceptions
2025-03-16 02:54:52,995:INFO:Preloading libraries
2025-03-16 02:54:52,995:INFO:Set up data.
2025-03-16 02:54:52,999:INFO:Set up index.
2025-03-16 02:54:53,130:INFO:Initializing predict_model()
2025-03-16 02:54:53,130:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744844C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464EE80>)
2025-03-16 02:54:53,130:INFO:Checking exceptions
2025-03-16 02:54:53,130:INFO:Preloading libraries
2025-03-16 02:54:53,130:INFO:Set up data.
2025-03-16 02:54:53,135:INFO:Set up index.
2025-03-16 02:54:53,269:INFO:Initializing predict_model()
2025-03-16 02:54:53,269:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD419D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464D9E0>)
2025-03-16 02:54:53,269:INFO:Checking exceptions
2025-03-16 02:54:53,269:INFO:Preloading libraries
2025-03-16 02:54:53,270:INFO:Set up data.
2025-03-16 02:54:53,273:INFO:Set up index.
2025-03-16 02:54:53,406:INFO:Initializing predict_model()
2025-03-16 02:54:53,407:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745856850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C860>)
2025-03-16 02:54:53,407:INFO:Checking exceptions
2025-03-16 02:54:53,407:INFO:Preloading libraries
2025-03-16 02:54:53,407:INFO:Set up data.
2025-03-16 02:54:53,412:INFO:Set up index.
2025-03-16 02:54:53,546:INFO:Initializing predict_model()
2025-03-16 02:54:53,546:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447687D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:54:53,546:INFO:Checking exceptions
2025-03-16 02:54:53,546:INFO:Preloading libraries
2025-03-16 02:54:53,546:INFO:Set up data.
2025-03-16 02:54:53,548:INFO:Set up index.
2025-03-16 02:54:53,680:INFO:Initializing predict_model()
2025-03-16 02:54:53,680:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744746810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708CC0>)
2025-03-16 02:54:53,680:INFO:Checking exceptions
2025-03-16 02:54:53,680:INFO:Preloading libraries
2025-03-16 02:54:53,681:INFO:Set up data.
2025-03-16 02:54:53,682:INFO:Set up index.
2025-03-16 02:54:53,821:INFO:Initializing predict_model()
2025-03-16 02:54:53,821:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455F61D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470AC00>)
2025-03-16 02:54:53,821:INFO:Checking exceptions
2025-03-16 02:54:53,821:INFO:Preloading libraries
2025-03-16 02:54:53,821:INFO:Set up data.
2025-03-16 02:54:53,824:INFO:Set up index.
2025-03-16 02:54:53,955:INFO:Initializing predict_model()
2025-03-16 02:54:53,956:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743897890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C4A0>)
2025-03-16 02:54:53,956:INFO:Checking exceptions
2025-03-16 02:54:53,956:INFO:Preloading libraries
2025-03-16 02:54:53,956:INFO:Set up data.
2025-03-16 02:54:53,959:INFO:Set up index.
2025-03-16 02:54:54,095:INFO:Initializing predict_model()
2025-03-16 02:54:54,095:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002272388EF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708D60>)
2025-03-16 02:54:54,095:INFO:Checking exceptions
2025-03-16 02:54:54,095:INFO:Preloading libraries
2025-03-16 02:54:54,095:INFO:Set up data.
2025-03-16 02:54:54,099:INFO:Set up index.
2025-03-16 02:54:54,239:INFO:Initializing predict_model()
2025-03-16 02:54:54,239:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745838AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A2A0>)
2025-03-16 02:54:54,239:INFO:Checking exceptions
2025-03-16 02:54:54,239:INFO:Preloading libraries
2025-03-16 02:54:54,241:INFO:Set up data.
2025-03-16 02:54:54,244:INFO:Set up index.
2025-03-16 02:54:54,372:INFO:Initializing predict_model()
2025-03-16 02:54:54,372:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227413A8BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708EA0>)
2025-03-16 02:54:54,372:INFO:Checking exceptions
2025-03-16 02:54:54,372:INFO:Preloading libraries
2025-03-16 02:54:54,374:INFO:Set up data.
2025-03-16 02:54:54,377:INFO:Set up index.
2025-03-16 02:54:54,507:INFO:Initializing predict_model()
2025-03-16 02:54:54,507:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002272388EF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447099E0>)
2025-03-16 02:54:54,507:INFO:Checking exceptions
2025-03-16 02:54:54,507:INFO:Preloading libraries
2025-03-16 02:54:54,507:INFO:Set up data.
2025-03-16 02:54:54,510:INFO:Set up index.
2025-03-16 02:54:54,643:INFO:Initializing predict_model()
2025-03-16 02:54:54,643:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274463D650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464FA60>)
2025-03-16 02:54:54,643:INFO:Checking exceptions
2025-03-16 02:54:54,643:INFO:Preloading libraries
2025-03-16 02:54:54,643:INFO:Set up data.
2025-03-16 02:54:54,646:INFO:Set up index.
2025-03-16 02:54:54,778:INFO:Initializing predict_model()
2025-03-16 02:54:54,778:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457E0BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A5C0>)
2025-03-16 02:54:54,778:INFO:Checking exceptions
2025-03-16 02:54:54,778:INFO:Preloading libraries
2025-03-16 02:54:54,778:INFO:Set up data.
2025-03-16 02:54:54,783:INFO:Set up index.
2025-03-16 02:54:54,918:INFO:Initializing predict_model()
2025-03-16 02:54:54,918:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455F6050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708A40>)
2025-03-16 02:54:54,918:INFO:Checking exceptions
2025-03-16 02:54:54,918:INFO:Preloading libraries
2025-03-16 02:54:54,918:INFO:Set up data.
2025-03-16 02:54:54,921:INFO:Set up index.
2025-03-16 02:54:55,056:INFO:Initializing predict_model()
2025-03-16 02:54:55,056:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744845710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470AFC0>)
2025-03-16 02:54:55,056:INFO:Checking exceptions
2025-03-16 02:54:55,056:INFO:Preloading libraries
2025-03-16 02:54:55,056:INFO:Set up data.
2025-03-16 02:54:55,058:INFO:Set up index.
2025-03-16 02:54:55,188:INFO:Initializing predict_model()
2025-03-16 02:54:55,188:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547D950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470BD80>)
2025-03-16 02:54:55,188:INFO:Checking exceptions
2025-03-16 02:54:55,188:INFO:Preloading libraries
2025-03-16 02:54:55,188:INFO:Set up data.
2025-03-16 02:54:55,192:INFO:Set up index.
2025-03-16 02:54:55,324:INFO:Initializing predict_model()
2025-03-16 02:54:55,324:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227448D6510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464EE80>)
2025-03-16 02:54:55,324:INFO:Checking exceptions
2025-03-16 02:54:55,324:INFO:Preloading libraries
2025-03-16 02:54:55,324:INFO:Set up data.
2025-03-16 02:54:55,328:INFO:Set up index.
2025-03-16 02:54:55,461:INFO:Initializing predict_model()
2025-03-16 02:54:55,461:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274545C250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C4A0>)
2025-03-16 02:54:55,461:INFO:Checking exceptions
2025-03-16 02:54:55,461:INFO:Preloading libraries
2025-03-16 02:54:55,461:INFO:Set up data.
2025-03-16 02:54:55,466:INFO:Set up index.
2025-03-16 02:54:55,598:INFO:Initializing predict_model()
2025-03-16 02:54:55,598:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743724D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447089A0>)
2025-03-16 02:54:55,598:INFO:Checking exceptions
2025-03-16 02:54:55,598:INFO:Preloading libraries
2025-03-16 02:54:55,598:INFO:Set up data.
2025-03-16 02:54:55,600:INFO:Set up index.
2025-03-16 02:54:55,730:INFO:Initializing predict_model()
2025-03-16 02:54:55,730:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744492350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464EC00>)
2025-03-16 02:54:55,730:INFO:Checking exceptions
2025-03-16 02:54:55,730:INFO:Preloading libraries
2025-03-16 02:54:55,730:INFO:Set up data.
2025-03-16 02:54:55,733:INFO:Set up index.
2025-03-16 02:54:55,860:INFO:Initializing predict_model()
2025-03-16 02:54:55,860:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274545C390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709080>)
2025-03-16 02:54:55,860:INFO:Checking exceptions
2025-03-16 02:54:55,860:INFO:Preloading libraries
2025-03-16 02:54:55,860:INFO:Set up data.
2025-03-16 02:54:55,863:INFO:Set up index.
2025-03-16 02:54:55,993:INFO:Initializing predict_model()
2025-03-16 02:54:55,993:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227436B7190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A2A0>)
2025-03-16 02:54:55,993:INFO:Checking exceptions
2025-03-16 02:54:55,993:INFO:Preloading libraries
2025-03-16 02:54:55,993:INFO:Set up data.
2025-03-16 02:54:55,996:INFO:Set up index.
2025-03-16 02:54:56,127:INFO:Initializing predict_model()
2025-03-16 02:54:56,127:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708720>)
2025-03-16 02:54:56,127:INFO:Checking exceptions
2025-03-16 02:54:56,127:INFO:Preloading libraries
2025-03-16 02:54:56,127:INFO:Set up data.
2025-03-16 02:54:56,130:INFO:Set up index.
2025-03-16 02:54:56,260:INFO:Initializing predict_model()
2025-03-16 02:54:56,260:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745BB4C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708AE0>)
2025-03-16 02:54:56,260:INFO:Checking exceptions
2025-03-16 02:54:56,260:INFO:Preloading libraries
2025-03-16 02:54:56,260:INFO:Set up data.
2025-03-16 02:54:56,265:INFO:Set up index.
2025-03-16 02:54:56,397:INFO:Initializing predict_model()
2025-03-16 02:54:56,397:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447087C0>)
2025-03-16 02:54:56,397:INFO:Checking exceptions
2025-03-16 02:54:56,397:INFO:Preloading libraries
2025-03-16 02:54:56,397:INFO:Set up data.
2025-03-16 02:54:56,401:INFO:Set up index.
2025-03-16 02:54:56,534:INFO:Initializing predict_model()
2025-03-16 02:54:56,534:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745864190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708EA0>)
2025-03-16 02:54:56,534:INFO:Checking exceptions
2025-03-16 02:54:56,534:INFO:Preloading libraries
2025-03-16 02:54:56,534:INFO:Set up data.
2025-03-16 02:54:56,539:INFO:Set up index.
2025-03-16 02:54:56,667:INFO:Initializing predict_model()
2025-03-16 02:54:56,668:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B67D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470A5C0>)
2025-03-16 02:54:56,668:INFO:Checking exceptions
2025-03-16 02:54:56,668:INFO:Preloading libraries
2025-03-16 02:54:56,668:INFO:Set up data.
2025-03-16 02:54:56,671:INFO:Set up index.
2025-03-16 02:54:56,807:INFO:Initializing predict_model()
2025-03-16 02:54:56,807:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744709D00>)
2025-03-16 02:54:56,807:INFO:Checking exceptions
2025-03-16 02:54:56,807:INFO:Preloading libraries
2025-03-16 02:54:56,807:INFO:Set up data.
2025-03-16 02:54:56,809:INFO:Set up index.
2025-03-16 02:54:56,943:INFO:Initializing predict_model()
2025-03-16 02:54:56,943:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227444B0090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447089A0>)
2025-03-16 02:54:56,943:INFO:Checking exceptions
2025-03-16 02:54:56,943:INFO:Preloading libraries
2025-03-16 02:54:56,943:INFO:Set up data.
2025-03-16 02:54:56,946:INFO:Set up index.
2025-03-16 02:54:57,083:INFO:Initializing predict_model()
2025-03-16 02:54:57,083:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464E200>)
2025-03-16 02:54:57,083:INFO:Checking exceptions
2025-03-16 02:54:57,083:INFO:Preloading libraries
2025-03-16 02:54:57,083:INFO:Set up data.
2025-03-16 02:54:57,087:INFO:Set up index.
2025-03-16 02:54:57,219:INFO:Initializing predict_model()
2025-03-16 02:54:57,219:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD42390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C180>)
2025-03-16 02:54:57,219:INFO:Checking exceptions
2025-03-16 02:54:57,219:INFO:Preloading libraries
2025-03-16 02:54:57,219:INFO:Set up data.
2025-03-16 02:54:57,222:INFO:Set up index.
2025-03-16 02:54:57,357:INFO:Initializing predict_model()
2025-03-16 02:54:57,357:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457E1E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464E200>)
2025-03-16 02:54:57,357:INFO:Checking exceptions
2025-03-16 02:54:57,357:INFO:Preloading libraries
2025-03-16 02:54:57,357:INFO:Set up data.
2025-03-16 02:54:57,359:INFO:Set up index.
2025-03-16 02:54:57,491:INFO:Initializing predict_model()
2025-03-16 02:54:57,491:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274463EFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464D9E0>)
2025-03-16 02:54:57,491:INFO:Checking exceptions
2025-03-16 02:54:57,491:INFO:Preloading libraries
2025-03-16 02:54:57,491:INFO:Set up data.
2025-03-16 02:54:57,494:INFO:Set up index.
2025-03-16 02:54:57,623:INFO:Initializing predict_model()
2025-03-16 02:54:57,623:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C63450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022744708680>)
2025-03-16 02:54:57,623:INFO:Checking exceptions
2025-03-16 02:54:57,623:INFO:Preloading libraries
2025-03-16 02:54:57,624:INFO:Set up data.
2025-03-16 02:54:57,627:INFO:Set up index.
2025-03-16 02:54:57,759:INFO:Initializing predict_model()
2025-03-16 02:54:57,759:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274483F210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447085E0>)
2025-03-16 02:54:57,759:INFO:Checking exceptions
2025-03-16 02:54:57,759:INFO:Preloading libraries
2025-03-16 02:54:57,759:INFO:Set up data.
2025-03-16 02:54:57,763:INFO:Set up index.
2025-03-16 02:54:57,897:INFO:Initializing predict_model()
2025-03-16 02:54:57,897:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227457D9550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274470AC00>)
2025-03-16 02:54:57,897:INFO:Checking exceptions
2025-03-16 02:54:57,897:INFO:Preloading libraries
2025-03-16 02:54:57,897:INFO:Set up data.
2025-03-16 02:54:57,900:INFO:Set up index.
2025-03-16 02:54:58,039:INFO:Initializing predict_model()
2025-03-16 02:54:58,039:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274543E510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000227447082C0>)
2025-03-16 02:54:58,039:INFO:Checking exceptions
2025-03-16 02:54:58,039:INFO:Preloading libraries
2025-03-16 02:54:58,039:INFO:Set up data.
2025-03-16 02:54:58,043:INFO:Set up index.
2025-03-16 02:54:58,174:INFO:Initializing predict_model()
2025-03-16 02:54:58,174:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745797810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464EE80>)
2025-03-16 02:54:58,174:INFO:Checking exceptions
2025-03-16 02:54:58,174:INFO:Preloading libraries
2025-03-16 02:54:58,174:INFO:Set up data.
2025-03-16 02:54:58,177:INFO:Set up index.
2025-03-16 02:54:58,309:INFO:Initializing predict_model()
2025-03-16 02:54:58,309:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD41F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464D440>)
2025-03-16 02:54:58,309:INFO:Checking exceptions
2025-03-16 02:54:58,309:INFO:Preloading libraries
2025-03-16 02:54:58,309:INFO:Set up data.
2025-03-16 02:54:58,312:INFO:Set up index.
2025-03-16 02:54:58,442:INFO:Initializing predict_model()
2025-03-16 02:54:58,442:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227436B7250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:54:58,442:INFO:Checking exceptions
2025-03-16 02:54:58,442:INFO:Preloading libraries
2025-03-16 02:54:58,444:INFO:Set up data.
2025-03-16 02:54:58,447:INFO:Set up index.
2025-03-16 02:54:58,575:INFO:Initializing predict_model()
2025-03-16 02:54:58,575:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741EDC410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:54:58,575:INFO:Checking exceptions
2025-03-16 02:54:58,575:INFO:Preloading libraries
2025-03-16 02:54:58,575:INFO:Set up data.
2025-03-16 02:54:58,578:INFO:Set up index.
2025-03-16 02:54:58,708:INFO:Initializing predict_model()
2025-03-16 02:54:58,708:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745621110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464D9E0>)
2025-03-16 02:54:58,708:INFO:Checking exceptions
2025-03-16 02:54:58,708:INFO:Preloading libraries
2025-03-16 02:54:58,708:INFO:Set up data.
2025-03-16 02:54:58,711:INFO:Set up index.
2025-03-16 02:54:58,844:INFO:Initializing predict_model()
2025-03-16 02:54:58,844:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273F32EB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C4A0>)
2025-03-16 02:54:58,844:INFO:Checking exceptions
2025-03-16 02:54:58,844:INFO:Preloading libraries
2025-03-16 02:54:58,846:INFO:Set up data.
2025-03-16 02:54:58,850:INFO:Set up index.
2025-03-16 02:54:58,978:INFO:Initializing predict_model()
2025-03-16 02:54:58,978:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274545ED50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464C180>)
2025-03-16 02:54:58,978:INFO:Checking exceptions
2025-03-16 02:54:58,978:INFO:Preloading libraries
2025-03-16 02:54:58,978:INFO:Set up data.
2025-03-16 02:54:58,981:INFO:Set up index.
2025-03-16 02:54:59,127:INFO:Initializing load_model()
2025-03-16 02:54:59,127:INFO:load_model(model_name=../eng_psu_hatyai/main/dt_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 02:54:59,252:INFO:Initializing predict_model()
2025-03-16 02:54:59,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745454C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:54:59,254:INFO:Checking exceptions
2025-03-16 02:54:59,254:INFO:Preloading libraries
2025-03-16 02:54:59,254:INFO:Set up data.
2025-03-16 02:54:59,259:INFO:Set up index.
2025-03-16 02:54:59,378:INFO:Initializing predict_model()
2025-03-16 02:54:59,378:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274388BCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:54:59,378:INFO:Checking exceptions
2025-03-16 02:54:59,378:INFO:Preloading libraries
2025-03-16 02:54:59,378:INFO:Set up data.
2025-03-16 02:54:59,386:INFO:Set up index.
2025-03-16 02:54:59,508:INFO:Initializing predict_model()
2025-03-16 02:54:59,510:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447BECD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:54:59,510:INFO:Checking exceptions
2025-03-16 02:54:59,510:INFO:Preloading libraries
2025-03-16 02:54:59,510:INFO:Set up data.
2025-03-16 02:54:59,514:INFO:Set up index.
2025-03-16 02:54:59,639:INFO:Initializing predict_model()
2025-03-16 02:54:59,639:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DB7EAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:54:59,639:INFO:Checking exceptions
2025-03-16 02:54:59,639:INFO:Preloading libraries
2025-03-16 02:54:59,639:INFO:Set up data.
2025-03-16 02:54:59,645:INFO:Set up index.
2025-03-16 02:54:59,762:INFO:Initializing predict_model()
2025-03-16 02:54:59,762:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447A4C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:54:59,762:INFO:Checking exceptions
2025-03-16 02:54:59,762:INFO:Preloading libraries
2025-03-16 02:54:59,762:INFO:Set up data.
2025-03-16 02:54:59,767:INFO:Set up index.
2025-03-16 02:54:59,885:INFO:Initializing predict_model()
2025-03-16 02:54:59,885:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745437FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:54:59,885:INFO:Checking exceptions
2025-03-16 02:54:59,885:INFO:Preloading libraries
2025-03-16 02:54:59,886:INFO:Set up data.
2025-03-16 02:54:59,890:INFO:Set up index.
2025-03-16 02:55:00,013:INFO:Initializing predict_model()
2025-03-16 02:55:00,013:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743711350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:00,013:INFO:Checking exceptions
2025-03-16 02:55:00,014:INFO:Preloading libraries
2025-03-16 02:55:00,014:INFO:Set up data.
2025-03-16 02:55:00,023:INFO:Set up index.
2025-03-16 02:55:00,152:INFO:Initializing predict_model()
2025-03-16 02:55:00,152:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227446F9350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:00,154:INFO:Checking exceptions
2025-03-16 02:55:00,154:INFO:Preloading libraries
2025-03-16 02:55:00,154:INFO:Set up data.
2025-03-16 02:55:00,157:INFO:Set up index.
2025-03-16 02:55:00,277:INFO:Initializing predict_model()
2025-03-16 02:55:00,277:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447D3290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:00,277:INFO:Checking exceptions
2025-03-16 02:55:00,277:INFO:Preloading libraries
2025-03-16 02:55:00,277:INFO:Set up data.
2025-03-16 02:55:00,284:INFO:Set up index.
2025-03-16 02:55:00,447:INFO:Initializing predict_model()
2025-03-16 02:55:00,447:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:00,447:INFO:Checking exceptions
2025-03-16 02:55:00,447:INFO:Preloading libraries
2025-03-16 02:55:00,448:INFO:Set up data.
2025-03-16 02:55:00,452:INFO:Set up index.
2025-03-16 02:55:00,578:INFO:Initializing predict_model()
2025-03-16 02:55:00,578:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274388B710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:00,578:INFO:Checking exceptions
2025-03-16 02:55:00,578:INFO:Preloading libraries
2025-03-16 02:55:00,578:INFO:Set up data.
2025-03-16 02:55:00,584:INFO:Set up index.
2025-03-16 02:55:00,714:INFO:Initializing predict_model()
2025-03-16 02:55:00,714:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274579E410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:00,715:INFO:Checking exceptions
2025-03-16 02:55:00,715:INFO:Preloading libraries
2025-03-16 02:55:00,715:INFO:Set up data.
2025-03-16 02:55:00,719:INFO:Set up index.
2025-03-16 02:55:00,846:INFO:Initializing predict_model()
2025-03-16 02:55:00,846:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274492A090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:00,846:INFO:Checking exceptions
2025-03-16 02:55:00,847:INFO:Preloading libraries
2025-03-16 02:55:00,847:INFO:Set up data.
2025-03-16 02:55:00,854:INFO:Set up index.
2025-03-16 02:55:00,983:INFO:Initializing predict_model()
2025-03-16 02:55:00,983:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274579D950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:00,983:INFO:Checking exceptions
2025-03-16 02:55:00,983:INFO:Preloading libraries
2025-03-16 02:55:00,983:INFO:Set up data.
2025-03-16 02:55:00,988:INFO:Set up index.
2025-03-16 02:55:01,112:INFO:Initializing predict_model()
2025-03-16 02:55:01,112:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FC4DCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:01,112:INFO:Checking exceptions
2025-03-16 02:55:01,112:INFO:Preloading libraries
2025-03-16 02:55:01,112:INFO:Set up data.
2025-03-16 02:55:01,117:INFO:Set up index.
2025-03-16 02:55:01,249:INFO:Initializing predict_model()
2025-03-16 02:55:01,249:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227458A01D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:01,249:INFO:Checking exceptions
2025-03-16 02:55:01,249:INFO:Preloading libraries
2025-03-16 02:55:01,249:INFO:Set up data.
2025-03-16 02:55:01,257:INFO:Set up index.
2025-03-16 02:55:01,375:INFO:Initializing predict_model()
2025-03-16 02:55:01,375:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227458A14D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:01,375:INFO:Checking exceptions
2025-03-16 02:55:01,375:INFO:Preloading libraries
2025-03-16 02:55:01,375:INFO:Set up data.
2025-03-16 02:55:01,381:INFO:Set up index.
2025-03-16 02:55:01,508:INFO:Initializing predict_model()
2025-03-16 02:55:01,509:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274581C3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:01,509:INFO:Checking exceptions
2025-03-16 02:55:01,509:INFO:Preloading libraries
2025-03-16 02:55:01,509:INFO:Set up data.
2025-03-16 02:55:01,517:INFO:Set up index.
2025-03-16 02:55:01,644:INFO:Initializing predict_model()
2025-03-16 02:55:01,644:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD41F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:01,644:INFO:Checking exceptions
2025-03-16 02:55:01,644:INFO:Preloading libraries
2025-03-16 02:55:01,644:INFO:Set up data.
2025-03-16 02:55:01,649:INFO:Set up index.
2025-03-16 02:55:01,773:INFO:Initializing predict_model()
2025-03-16 02:55:01,773:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744618790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:01,773:INFO:Checking exceptions
2025-03-16 02:55:01,773:INFO:Preloading libraries
2025-03-16 02:55:01,773:INFO:Set up data.
2025-03-16 02:55:01,780:INFO:Set up index.
2025-03-16 02:55:01,908:INFO:Initializing predict_model()
2025-03-16 02:55:01,908:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DD1CC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:01,908:INFO:Checking exceptions
2025-03-16 02:55:01,908:INFO:Preloading libraries
2025-03-16 02:55:01,908:INFO:Set up data.
2025-03-16 02:55:01,913:INFO:Set up index.
2025-03-16 02:55:02,036:INFO:Initializing predict_model()
2025-03-16 02:55:02,036:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445F7D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:02,036:INFO:Checking exceptions
2025-03-16 02:55:02,036:INFO:Preloading libraries
2025-03-16 02:55:02,036:INFO:Set up data.
2025-03-16 02:55:02,042:INFO:Set up index.
2025-03-16 02:55:02,169:INFO:Initializing predict_model()
2025-03-16 02:55:02,169:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274483D790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:02,169:INFO:Checking exceptions
2025-03-16 02:55:02,169:INFO:Preloading libraries
2025-03-16 02:55:02,171:INFO:Set up data.
2025-03-16 02:55:02,175:INFO:Set up index.
2025-03-16 02:55:02,297:INFO:Initializing predict_model()
2025-03-16 02:55:02,297:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227458A3C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:02,297:INFO:Checking exceptions
2025-03-16 02:55:02,297:INFO:Preloading libraries
2025-03-16 02:55:02,297:INFO:Set up data.
2025-03-16 02:55:02,303:INFO:Set up index.
2025-03-16 02:55:02,427:INFO:Initializing predict_model()
2025-03-16 02:55:02,427:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227444B04D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:02,427:INFO:Checking exceptions
2025-03-16 02:55:02,427:INFO:Preloading libraries
2025-03-16 02:55:02,428:INFO:Set up data.
2025-03-16 02:55:02,432:INFO:Set up index.
2025-03-16 02:55:02,570:INFO:Initializing predict_model()
2025-03-16 02:55:02,570:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384E4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:02,570:INFO:Checking exceptions
2025-03-16 02:55:02,570:INFO:Preloading libraries
2025-03-16 02:55:02,570:INFO:Set up data.
2025-03-16 02:55:02,576:INFO:Set up index.
2025-03-16 02:55:02,693:INFO:Initializing predict_model()
2025-03-16 02:55:02,693:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:02,693:INFO:Checking exceptions
2025-03-16 02:55:02,693:INFO:Preloading libraries
2025-03-16 02:55:02,693:INFO:Set up data.
2025-03-16 02:55:02,697:INFO:Set up index.
2025-03-16 02:55:02,826:INFO:Initializing predict_model()
2025-03-16 02:55:02,826:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744694210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:02,826:INFO:Checking exceptions
2025-03-16 02:55:02,826:INFO:Preloading libraries
2025-03-16 02:55:02,826:INFO:Set up data.
2025-03-16 02:55:02,831:INFO:Set up index.
2025-03-16 02:55:02,945:INFO:Initializing predict_model()
2025-03-16 02:55:02,945:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227447E7950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:02,945:INFO:Checking exceptions
2025-03-16 02:55:02,945:INFO:Preloading libraries
2025-03-16 02:55:02,945:INFO:Set up data.
2025-03-16 02:55:02,949:INFO:Set up index.
2025-03-16 02:55:03,071:INFO:Initializing predict_model()
2025-03-16 02:55:03,073:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274579D950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:03,073:INFO:Checking exceptions
2025-03-16 02:55:03,073:INFO:Preloading libraries
2025-03-16 02:55:03,073:INFO:Set up data.
2025-03-16 02:55:03,078:INFO:Set up index.
2025-03-16 02:55:03,199:INFO:Initializing predict_model()
2025-03-16 02:55:03,199:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274547D850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:03,199:INFO:Checking exceptions
2025-03-16 02:55:03,199:INFO:Preloading libraries
2025-03-16 02:55:03,199:INFO:Set up data.
2025-03-16 02:55:03,206:INFO:Set up index.
2025-03-16 02:55:03,337:INFO:Initializing predict_model()
2025-03-16 02:55:03,337:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B5590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:03,337:INFO:Checking exceptions
2025-03-16 02:55:03,337:INFO:Preloading libraries
2025-03-16 02:55:03,339:INFO:Set up data.
2025-03-16 02:55:03,347:INFO:Set up index.
2025-03-16 02:55:03,470:INFO:Initializing predict_model()
2025-03-16 02:55:03,470:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445D4150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:03,470:INFO:Checking exceptions
2025-03-16 02:55:03,472:INFO:Preloading libraries
2025-03-16 02:55:03,472:INFO:Set up data.
2025-03-16 02:55:03,477:INFO:Set up index.
2025-03-16 02:55:03,599:INFO:Initializing predict_model()
2025-03-16 02:55:03,599:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274482C250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:03,599:INFO:Checking exceptions
2025-03-16 02:55:03,599:INFO:Preloading libraries
2025-03-16 02:55:03,600:INFO:Set up data.
2025-03-16 02:55:03,607:INFO:Set up index.
2025-03-16 02:55:03,734:INFO:Initializing predict_model()
2025-03-16 02:55:03,734:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445DD390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:03,734:INFO:Checking exceptions
2025-03-16 02:55:03,734:INFO:Preloading libraries
2025-03-16 02:55:03,734:INFO:Set up data.
2025-03-16 02:55:03,743:INFO:Set up index.
2025-03-16 02:55:03,868:INFO:Initializing predict_model()
2025-03-16 02:55:03,868:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:03,868:INFO:Checking exceptions
2025-03-16 02:55:03,868:INFO:Preloading libraries
2025-03-16 02:55:03,869:INFO:Set up data.
2025-03-16 02:55:03,875:INFO:Set up index.
2025-03-16 02:55:03,997:INFO:Initializing predict_model()
2025-03-16 02:55:03,997:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274453D950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:03,997:INFO:Checking exceptions
2025-03-16 02:55:03,997:INFO:Preloading libraries
2025-03-16 02:55:03,999:INFO:Set up data.
2025-03-16 02:55:04,003:INFO:Set up index.
2025-03-16 02:55:04,129:INFO:Initializing predict_model()
2025-03-16 02:55:04,129:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438178D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:04,129:INFO:Checking exceptions
2025-03-16 02:55:04,129:INFO:Preloading libraries
2025-03-16 02:55:04,129:INFO:Set up data.
2025-03-16 02:55:04,135:INFO:Set up index.
2025-03-16 02:55:04,259:INFO:Initializing predict_model()
2025-03-16 02:55:04,259:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438A9B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:04,259:INFO:Checking exceptions
2025-03-16 02:55:04,259:INFO:Preloading libraries
2025-03-16 02:55:04,260:INFO:Set up data.
2025-03-16 02:55:04,264:INFO:Set up index.
2025-03-16 02:55:04,396:INFO:Initializing predict_model()
2025-03-16 02:55:04,396:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227453C65D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:04,396:INFO:Checking exceptions
2025-03-16 02:55:04,396:INFO:Preloading libraries
2025-03-16 02:55:04,396:INFO:Set up data.
2025-03-16 02:55:04,402:INFO:Set up index.
2025-03-16 02:55:04,522:INFO:Initializing predict_model()
2025-03-16 02:55:04,522:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438561D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:04,522:INFO:Checking exceptions
2025-03-16 02:55:04,522:INFO:Preloading libraries
2025-03-16 02:55:04,522:INFO:Set up data.
2025-03-16 02:55:04,528:INFO:Set up index.
2025-03-16 02:55:04,651:INFO:Initializing predict_model()
2025-03-16 02:55:04,651:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:04,651:INFO:Checking exceptions
2025-03-16 02:55:04,651:INFO:Preloading libraries
2025-03-16 02:55:04,653:INFO:Set up data.
2025-03-16 02:55:04,657:INFO:Set up index.
2025-03-16 02:55:04,777:INFO:Initializing predict_model()
2025-03-16 02:55:04,777:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445D4BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:04,777:INFO:Checking exceptions
2025-03-16 02:55:04,777:INFO:Preloading libraries
2025-03-16 02:55:04,777:INFO:Set up data.
2025-03-16 02:55:04,783:INFO:Set up index.
2025-03-16 02:55:04,900:INFO:Initializing predict_model()
2025-03-16 02:55:04,902:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743817050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:04,902:INFO:Checking exceptions
2025-03-16 02:55:04,902:INFO:Preloading libraries
2025-03-16 02:55:04,902:INFO:Set up data.
2025-03-16 02:55:04,907:INFO:Set up index.
2025-03-16 02:55:05,029:INFO:Initializing predict_model()
2025-03-16 02:55:05,029:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:05,029:INFO:Checking exceptions
2025-03-16 02:55:05,029:INFO:Preloading libraries
2025-03-16 02:55:05,029:INFO:Set up data.
2025-03-16 02:55:05,035:INFO:Set up index.
2025-03-16 02:55:05,157:INFO:Initializing predict_model()
2025-03-16 02:55:05,157:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445D4610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:05,157:INFO:Checking exceptions
2025-03-16 02:55:05,157:INFO:Preloading libraries
2025-03-16 02:55:05,157:INFO:Set up data.
2025-03-16 02:55:05,162:INFO:Set up index.
2025-03-16 02:55:05,287:INFO:Initializing predict_model()
2025-03-16 02:55:05,287:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274461AD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:05,287:INFO:Checking exceptions
2025-03-16 02:55:05,287:INFO:Preloading libraries
2025-03-16 02:55:05,287:INFO:Set up data.
2025-03-16 02:55:05,295:INFO:Set up index.
2025-03-16 02:55:05,419:INFO:Initializing predict_model()
2025-03-16 02:55:05,419:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DD1CC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:05,419:INFO:Checking exceptions
2025-03-16 02:55:05,419:INFO:Preloading libraries
2025-03-16 02:55:05,419:INFO:Set up data.
2025-03-16 02:55:05,425:INFO:Set up index.
2025-03-16 02:55:05,547:INFO:Initializing predict_model()
2025-03-16 02:55:05,547:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743882690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:05,547:INFO:Checking exceptions
2025-03-16 02:55:05,547:INFO:Preloading libraries
2025-03-16 02:55:05,549:INFO:Set up data.
2025-03-16 02:55:05,553:INFO:Set up index.
2025-03-16 02:55:05,688:INFO:Initializing predict_model()
2025-03-16 02:55:05,688:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445DD590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:05,688:INFO:Checking exceptions
2025-03-16 02:55:05,688:INFO:Preloading libraries
2025-03-16 02:55:05,688:INFO:Set up data.
2025-03-16 02:55:05,693:INFO:Set up index.
2025-03-16 02:55:05,832:INFO:Initializing predict_model()
2025-03-16 02:55:05,832:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438403D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:05,832:INFO:Checking exceptions
2025-03-16 02:55:05,832:INFO:Preloading libraries
2025-03-16 02:55:05,832:INFO:Set up data.
2025-03-16 02:55:05,842:INFO:Set up index.
2025-03-16 02:55:05,970:INFO:Initializing predict_model()
2025-03-16 02:55:05,970:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274581D0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:05,970:INFO:Checking exceptions
2025-03-16 02:55:05,970:INFO:Preloading libraries
2025-03-16 02:55:05,970:INFO:Set up data.
2025-03-16 02:55:05,974:INFO:Set up index.
2025-03-16 02:55:06,097:INFO:Initializing predict_model()
2025-03-16 02:55:06,098:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274384CDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:06,098:INFO:Checking exceptions
2025-03-16 02:55:06,098:INFO:Preloading libraries
2025-03-16 02:55:06,098:INFO:Set up data.
2025-03-16 02:55:06,102:INFO:Set up index.
2025-03-16 02:55:06,226:INFO:Initializing predict_model()
2025-03-16 02:55:06,226:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745C63650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:06,226:INFO:Checking exceptions
2025-03-16 02:55:06,226:INFO:Preloading libraries
2025-03-16 02:55:06,226:INFO:Set up data.
2025-03-16 02:55:06,235:INFO:Set up index.
2025-03-16 02:55:06,366:INFO:Initializing predict_model()
2025-03-16 02:55:06,366:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743724E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:06,366:INFO:Checking exceptions
2025-03-16 02:55:06,366:INFO:Preloading libraries
2025-03-16 02:55:06,366:INFO:Set up data.
2025-03-16 02:55:06,372:INFO:Set up index.
2025-03-16 02:55:06,494:INFO:Initializing predict_model()
2025-03-16 02:55:06,494:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743897890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:06,494:INFO:Checking exceptions
2025-03-16 02:55:06,494:INFO:Preloading libraries
2025-03-16 02:55:06,496:INFO:Set up data.
2025-03-16 02:55:06,500:INFO:Set up index.
2025-03-16 02:55:06,627:INFO:Initializing predict_model()
2025-03-16 02:55:06,627:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD41F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:06,627:INFO:Checking exceptions
2025-03-16 02:55:06,627:INFO:Preloading libraries
2025-03-16 02:55:06,627:INFO:Set up data.
2025-03-16 02:55:06,634:INFO:Set up index.
2025-03-16 02:55:06,761:INFO:Initializing predict_model()
2025-03-16 02:55:06,761:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438A9E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:06,761:INFO:Checking exceptions
2025-03-16 02:55:06,761:INFO:Preloading libraries
2025-03-16 02:55:06,761:INFO:Set up data.
2025-03-16 02:55:06,769:INFO:Set up index.
2025-03-16 02:55:06,893:INFO:Initializing predict_model()
2025-03-16 02:55:06,893:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274483F810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:06,893:INFO:Checking exceptions
2025-03-16 02:55:06,893:INFO:Preloading libraries
2025-03-16 02:55:06,893:INFO:Set up data.
2025-03-16 02:55:06,899:INFO:Set up index.
2025-03-16 02:55:07,022:INFO:Initializing predict_model()
2025-03-16 02:55:07,022:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273DD1CC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:07,022:INFO:Checking exceptions
2025-03-16 02:55:07,022:INFO:Preloading libraries
2025-03-16 02:55:07,022:INFO:Set up data.
2025-03-16 02:55:07,031:INFO:Set up index.
2025-03-16 02:55:07,155:INFO:Initializing predict_model()
2025-03-16 02:55:07,155:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445D4610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:07,155:INFO:Checking exceptions
2025-03-16 02:55:07,155:INFO:Preloading libraries
2025-03-16 02:55:07,156:INFO:Set up data.
2025-03-16 02:55:07,160:INFO:Set up index.
2025-03-16 02:55:07,285:INFO:Initializing predict_model()
2025-03-16 02:55:07,285:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744845290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:07,285:INFO:Checking exceptions
2025-03-16 02:55:07,285:INFO:Preloading libraries
2025-03-16 02:55:07,285:INFO:Set up data.
2025-03-16 02:55:07,290:INFO:Set up index.
2025-03-16 02:55:07,416:INFO:Initializing predict_model()
2025-03-16 02:55:07,416:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274478FD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:07,416:INFO:Checking exceptions
2025-03-16 02:55:07,416:INFO:Preloading libraries
2025-03-16 02:55:07,417:INFO:Set up data.
2025-03-16 02:55:07,421:INFO:Set up index.
2025-03-16 02:55:07,548:INFO:Initializing predict_model()
2025-03-16 02:55:07,548:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744846F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:07,548:INFO:Checking exceptions
2025-03-16 02:55:07,548:INFO:Preloading libraries
2025-03-16 02:55:07,548:INFO:Set up data.
2025-03-16 02:55:07,554:INFO:Set up index.
2025-03-16 02:55:07,674:INFO:Initializing predict_model()
2025-03-16 02:55:07,674:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C081D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:07,674:INFO:Checking exceptions
2025-03-16 02:55:07,674:INFO:Preloading libraries
2025-03-16 02:55:07,674:INFO:Set up data.
2025-03-16 02:55:07,680:INFO:Set up index.
2025-03-16 02:55:07,801:INFO:Initializing predict_model()
2025-03-16 02:55:07,801:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743C02B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:07,803:INFO:Checking exceptions
2025-03-16 02:55:07,803:INFO:Preloading libraries
2025-03-16 02:55:07,803:INFO:Set up data.
2025-03-16 02:55:07,807:INFO:Set up index.
2025-03-16 02:55:07,929:INFO:Initializing predict_model()
2025-03-16 02:55:07,931:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445F6C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:07,931:INFO:Checking exceptions
2025-03-16 02:55:07,931:INFO:Preloading libraries
2025-03-16 02:55:07,931:INFO:Set up data.
2025-03-16 02:55:07,936:INFO:Set up index.
2025-03-16 02:55:08,067:INFO:Initializing predict_model()
2025-03-16 02:55:08,067:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022744502610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:08,067:INFO:Checking exceptions
2025-03-16 02:55:08,067:INFO:Preloading libraries
2025-03-16 02:55:08,067:INFO:Set up data.
2025-03-16 02:55:08,072:INFO:Set up index.
2025-03-16 02:55:08,195:INFO:Initializing predict_model()
2025-03-16 02:55:08,195:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274466ACD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:08,195:INFO:Checking exceptions
2025-03-16 02:55:08,195:INFO:Preloading libraries
2025-03-16 02:55:08,195:INFO:Set up data.
2025-03-16 02:55:08,200:INFO:Set up index.
2025-03-16 02:55:08,322:INFO:Initializing predict_model()
2025-03-16 02:55:08,322:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274466ACD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:08,322:INFO:Checking exceptions
2025-03-16 02:55:08,322:INFO:Preloading libraries
2025-03-16 02:55:08,322:INFO:Set up data.
2025-03-16 02:55:08,328:INFO:Set up index.
2025-03-16 02:55:08,454:INFO:Initializing predict_model()
2025-03-16 02:55:08,454:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227444B9B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:08,456:INFO:Checking exceptions
2025-03-16 02:55:08,456:INFO:Preloading libraries
2025-03-16 02:55:08,456:INFO:Set up data.
2025-03-16 02:55:08,466:INFO:Set up index.
2025-03-16 02:55:08,589:INFO:Initializing predict_model()
2025-03-16 02:55:08,589:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227455B5110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:08,589:INFO:Checking exceptions
2025-03-16 02:55:08,589:INFO:Preloading libraries
2025-03-16 02:55:08,589:INFO:Set up data.
2025-03-16 02:55:08,595:INFO:Set up index.
2025-03-16 02:55:08,722:INFO:Initializing predict_model()
2025-03-16 02:55:08,722:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274463F710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:08,722:INFO:Checking exceptions
2025-03-16 02:55:08,722:INFO:Preloading libraries
2025-03-16 02:55:08,722:INFO:Set up data.
2025-03-16 02:55:08,728:INFO:Set up index.
2025-03-16 02:55:08,862:INFO:Initializing predict_model()
2025-03-16 02:55:08,862:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022741EDC410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:08,862:INFO:Checking exceptions
2025-03-16 02:55:08,862:INFO:Preloading libraries
2025-03-16 02:55:08,864:INFO:Set up data.
2025-03-16 02:55:08,869:INFO:Set up index.
2025-03-16 02:55:08,989:INFO:Initializing predict_model()
2025-03-16 02:55:08,991:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438561D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:08,991:INFO:Checking exceptions
2025-03-16 02:55:08,991:INFO:Preloading libraries
2025-03-16 02:55:08,991:INFO:Set up data.
2025-03-16 02:55:08,995:INFO:Set up index.
2025-03-16 02:55:09,117:INFO:Initializing predict_model()
2025-03-16 02:55:09,117:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745865990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:09,117:INFO:Checking exceptions
2025-03-16 02:55:09,117:INFO:Preloading libraries
2025-03-16 02:55:09,117:INFO:Set up data.
2025-03-16 02:55:09,123:INFO:Set up index.
2025-03-16 02:55:09,257:INFO:Initializing predict_model()
2025-03-16 02:55:09,257:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273D648390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:09,257:INFO:Checking exceptions
2025-03-16 02:55:09,257:INFO:Preloading libraries
2025-03-16 02:55:09,257:INFO:Set up data.
2025-03-16 02:55:09,263:INFO:Set up index.
2025-03-16 02:55:09,382:INFO:Initializing predict_model()
2025-03-16 02:55:09,382:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743855750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:09,382:INFO:Checking exceptions
2025-03-16 02:55:09,382:INFO:Preloading libraries
2025-03-16 02:55:09,382:INFO:Set up data.
2025-03-16 02:55:09,388:INFO:Set up index.
2025-03-16 02:55:09,507:INFO:Initializing predict_model()
2025-03-16 02:55:09,507:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002273FD41F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:09,507:INFO:Checking exceptions
2025-03-16 02:55:09,507:INFO:Preloading libraries
2025-03-16 02:55:09,507:INFO:Set up data.
2025-03-16 02:55:09,514:INFO:Set up index.
2025-03-16 02:55:09,638:INFO:Initializing predict_model()
2025-03-16 02:55:09,638:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022743888790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:09,638:INFO:Checking exceptions
2025-03-16 02:55:09,638:INFO:Preloading libraries
2025-03-16 02:55:09,638:INFO:Set up data.
2025-03-16 02:55:09,643:INFO:Set up index.
2025-03-16 02:55:09,766:INFO:Initializing predict_model()
2025-03-16 02:55:09,766:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227458A2E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:09,766:INFO:Checking exceptions
2025-03-16 02:55:09,766:INFO:Preloading libraries
2025-03-16 02:55:09,766:INFO:Set up data.
2025-03-16 02:55:09,770:INFO:Set up index.
2025-03-16 02:55:09,893:INFO:Initializing predict_model()
2025-03-16 02:55:09,893:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745797DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:09,893:INFO:Checking exceptions
2025-03-16 02:55:09,893:INFO:Preloading libraries
2025-03-16 02:55:09,893:INFO:Set up data.
2025-03-16 02:55:09,898:INFO:Set up index.
2025-03-16 02:55:10,030:INFO:Initializing predict_model()
2025-03-16 02:55:10,030:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445F4D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:10,030:INFO:Checking exceptions
2025-03-16 02:55:10,030:INFO:Preloading libraries
2025-03-16 02:55:10,030:INFO:Set up data.
2025-03-16 02:55:10,036:INFO:Set up index.
2025-03-16 02:55:10,157:INFO:Initializing predict_model()
2025-03-16 02:55:10,157:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227445F4890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:10,157:INFO:Checking exceptions
2025-03-16 02:55:10,157:INFO:Preloading libraries
2025-03-16 02:55:10,157:INFO:Set up data.
2025-03-16 02:55:10,163:INFO:Set up index.
2025-03-16 02:55:10,284:INFO:Initializing predict_model()
2025-03-16 02:55:10,284:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002274476AED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:10,284:INFO:Checking exceptions
2025-03-16 02:55:10,284:INFO:Preloading libraries
2025-03-16 02:55:10,284:INFO:Set up data.
2025-03-16 02:55:10,289:INFO:Set up index.
2025-03-16 02:55:10,412:INFO:Initializing predict_model()
2025-03-16 02:55:10,412:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227438A9E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464DEE0>)
2025-03-16 02:55:10,412:INFO:Checking exceptions
2025-03-16 02:55:10,412:INFO:Preloading libraries
2025-03-16 02:55:10,412:INFO:Set up data.
2025-03-16 02:55:10,419:INFO:Set up index.
2025-03-16 02:55:10,547:INFO:Initializing predict_model()
2025-03-16 02:55:10,547:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000022745838550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F6A0>)
2025-03-16 02:55:10,547:INFO:Checking exceptions
2025-03-16 02:55:10,547:INFO:Preloading libraries
2025-03-16 02:55:10,547:INFO:Set up data.
2025-03-16 02:55:10,555:INFO:Set up index.
2025-03-16 02:55:10,682:INFO:Initializing predict_model()
2025-03-16 02:55:10,682:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000227446F9350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002274464F060>)
2025-03-16 02:55:10,682:INFO:Checking exceptions
2025-03-16 02:55:10,682:INFO:Preloading libraries
2025-03-16 02:55:10,682:INFO:Set up data.
2025-03-16 02:55:10,688:INFO:Set up index.
2025-03-16 14:11:03,090:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 14:11:03,090:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 14:11:03,090:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 14:11:03,090:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 14:11:03,554:INFO:Initializing load_model()
2025-03-16 14:11:03,554:INFO:load_model(model_name=../eng_psu_hatyai/main/lgmb_temp_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 14:11:03,722:INFO:Initializing predict_model()
2025-03-16 14:11:03,723:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002615F2BC410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002617796CB80>)
2025-03-16 14:11:03,723:INFO:Checking exceptions
2025-03-16 14:11:03,723:INFO:Preloading libraries
2025-03-16 14:11:03,723:INFO:Set up data.
2025-03-16 14:11:03,728:INFO:Set up index.
2025-03-16 14:11:03,820:INFO:Initializing predict_model()
2025-03-16 14:11:03,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840017D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:03,820:INFO:Checking exceptions
2025-03-16 14:11:03,820:INFO:Preloading libraries
2025-03-16 14:11:03,820:INFO:Set up data.
2025-03-16 14:11:03,824:INFO:Set up index.
2025-03-16 14:11:03,916:INFO:Initializing predict_model()
2025-03-16 14:11:03,916:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261825B89D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:03,916:INFO:Checking exceptions
2025-03-16 14:11:03,916:INFO:Preloading libraries
2025-03-16 14:11:03,918:INFO:Set up data.
2025-03-16 14:11:03,921:INFO:Set up index.
2025-03-16 14:11:04,008:INFO:Initializing predict_model()
2025-03-16 14:11:04,008:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618226BC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC7060>)
2025-03-16 14:11:04,008:INFO:Checking exceptions
2025-03-16 14:11:04,009:INFO:Preloading libraries
2025-03-16 14:11:04,009:INFO:Set up data.
2025-03-16 14:11:04,013:INFO:Set up index.
2025-03-16 14:11:04,099:INFO:Initializing predict_model()
2025-03-16 14:11:04,099:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182A5F690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC7060>)
2025-03-16 14:11:04,099:INFO:Checking exceptions
2025-03-16 14:11:04,099:INFO:Preloading libraries
2025-03-16 14:11:04,099:INFO:Set up data.
2025-03-16 14:11:04,103:INFO:Set up index.
2025-03-16 14:11:04,187:INFO:Initializing predict_model()
2025-03-16 14:11:04,187:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F22E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC7060>)
2025-03-16 14:11:04,187:INFO:Checking exceptions
2025-03-16 14:11:04,187:INFO:Preloading libraries
2025-03-16 14:11:04,187:INFO:Set up data.
2025-03-16 14:11:04,190:INFO:Set up index.
2025-03-16 14:11:04,274:INFO:Initializing predict_model()
2025-03-16 14:11:04,275:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182A5ED50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E94A160>)
2025-03-16 14:11:04,275:INFO:Checking exceptions
2025-03-16 14:11:04,275:INFO:Preloading libraries
2025-03-16 14:11:04,275:INFO:Set up data.
2025-03-16 14:11:04,278:INFO:Set up index.
2025-03-16 14:11:04,362:INFO:Initializing predict_model()
2025-03-16 14:11:04,362:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F22A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC7060>)
2025-03-16 14:11:04,362:INFO:Checking exceptions
2025-03-16 14:11:04,363:INFO:Preloading libraries
2025-03-16 14:11:04,363:INFO:Set up data.
2025-03-16 14:11:04,365:INFO:Set up index.
2025-03-16 14:11:04,450:INFO:Initializing predict_model()
2025-03-16 14:11:04,450:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177823D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC7060>)
2025-03-16 14:11:04,450:INFO:Checking exceptions
2025-03-16 14:11:04,450:INFO:Preloading libraries
2025-03-16 14:11:04,450:INFO:Set up data.
2025-03-16 14:11:04,454:INFO:Set up index.
2025-03-16 14:11:04,538:INFO:Initializing predict_model()
2025-03-16 14:11:04,538:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182415050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC7060>)
2025-03-16 14:11:04,538:INFO:Checking exceptions
2025-03-16 14:11:04,538:INFO:Preloading libraries
2025-03-16 14:11:04,538:INFO:Set up data.
2025-03-16 14:11:04,541:INFO:Set up index.
2025-03-16 14:11:04,625:INFO:Initializing predict_model()
2025-03-16 14:11:04,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DD050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002617796CB80>)
2025-03-16 14:11:04,625:INFO:Checking exceptions
2025-03-16 14:11:04,625:INFO:Preloading libraries
2025-03-16 14:11:04,625:INFO:Set up data.
2025-03-16 14:11:04,628:INFO:Set up index.
2025-03-16 14:11:04,719:INFO:Initializing predict_model()
2025-03-16 14:11:04,719:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DB8290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC7060>)
2025-03-16 14:11:04,719:INFO:Checking exceptions
2025-03-16 14:11:04,719:INFO:Preloading libraries
2025-03-16 14:11:04,719:INFO:Set up data.
2025-03-16 14:11:04,723:INFO:Set up index.
2025-03-16 14:11:04,818:INFO:Initializing predict_model()
2025-03-16 14:11:04,818:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182A5EF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409F2E0>)
2025-03-16 14:11:04,818:INFO:Checking exceptions
2025-03-16 14:11:04,818:INFO:Preloading libraries
2025-03-16 14:11:04,818:INFO:Set up data.
2025-03-16 14:11:04,822:INFO:Set up index.
2025-03-16 14:11:04,907:INFO:Initializing predict_model()
2025-03-16 14:11:04,907:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261824150D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC71A0>)
2025-03-16 14:11:04,907:INFO:Checking exceptions
2025-03-16 14:11:04,907:INFO:Preloading libraries
2025-03-16 14:11:04,907:INFO:Set up data.
2025-03-16 14:11:04,911:INFO:Set up index.
2025-03-16 14:11:04,995:INFO:Initializing predict_model()
2025-03-16 14:11:04,995:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED1010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:04,995:INFO:Checking exceptions
2025-03-16 14:11:04,995:INFO:Preloading libraries
2025-03-16 14:11:04,995:INFO:Set up data.
2025-03-16 14:11:05,000:INFO:Set up index.
2025-03-16 14:11:05,084:INFO:Initializing predict_model()
2025-03-16 14:11:05,086:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F16850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:05,086:INFO:Checking exceptions
2025-03-16 14:11:05,086:INFO:Preloading libraries
2025-03-16 14:11:05,086:INFO:Set up data.
2025-03-16 14:11:05,089:INFO:Set up index.
2025-03-16 14:11:05,173:INFO:Initializing predict_model()
2025-03-16 14:11:05,173:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F04210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:05,173:INFO:Checking exceptions
2025-03-16 14:11:05,173:INFO:Preloading libraries
2025-03-16 14:11:05,173:INFO:Set up data.
2025-03-16 14:11:05,176:INFO:Set up index.
2025-03-16 14:11:05,258:INFO:Initializing predict_model()
2025-03-16 14:11:05,258:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618402C750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026184073060>)
2025-03-16 14:11:05,258:INFO:Checking exceptions
2025-03-16 14:11:05,258:INFO:Preloading libraries
2025-03-16 14:11:05,258:INFO:Set up data.
2025-03-16 14:11:05,262:INFO:Set up index.
2025-03-16 14:11:05,344:INFO:Initializing predict_model()
2025-03-16 14:11:05,344:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618226BC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:05,344:INFO:Checking exceptions
2025-03-16 14:11:05,344:INFO:Preloading libraries
2025-03-16 14:11:05,344:INFO:Set up data.
2025-03-16 14:11:05,347:INFO:Set up index.
2025-03-16 14:11:05,430:INFO:Initializing predict_model()
2025-03-16 14:11:05,430:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618402D250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:05,430:INFO:Checking exceptions
2025-03-16 14:11:05,430:INFO:Preloading libraries
2025-03-16 14:11:05,431:INFO:Set up data.
2025-03-16 14:11:05,434:INFO:Set up index.
2025-03-16 14:11:05,517:INFO:Initializing predict_model()
2025-03-16 14:11:05,517:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182130A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:05,517:INFO:Checking exceptions
2025-03-16 14:11:05,517:INFO:Preloading libraries
2025-03-16 14:11:05,517:INFO:Set up data.
2025-03-16 14:11:05,522:INFO:Set up index.
2025-03-16 14:11:05,605:INFO:Initializing predict_model()
2025-03-16 14:11:05,605:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED3DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E94A160>)
2025-03-16 14:11:05,605:INFO:Checking exceptions
2025-03-16 14:11:05,605:INFO:Preloading libraries
2025-03-16 14:11:05,605:INFO:Set up data.
2025-03-16 14:11:05,608:INFO:Set up index.
2025-03-16 14:11:05,690:INFO:Initializing predict_model()
2025-03-16 14:11:05,690:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EBAF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:05,690:INFO:Checking exceptions
2025-03-16 14:11:05,690:INFO:Preloading libraries
2025-03-16 14:11:05,690:INFO:Set up data.
2025-03-16 14:11:05,694:INFO:Set up index.
2025-03-16 14:11:05,775:INFO:Initializing predict_model()
2025-03-16 14:11:05,775:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EFA890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:05,775:INFO:Checking exceptions
2025-03-16 14:11:05,775:INFO:Preloading libraries
2025-03-16 14:11:05,775:INFO:Set up data.
2025-03-16 14:11:05,778:INFO:Set up index.
2025-03-16 14:11:05,867:INFO:Initializing predict_model()
2025-03-16 14:11:05,867:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F05250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:05,867:INFO:Checking exceptions
2025-03-16 14:11:05,867:INFO:Preloading libraries
2025-03-16 14:11:05,867:INFO:Set up data.
2025-03-16 14:11:05,871:INFO:Set up index.
2025-03-16 14:11:05,975:INFO:Initializing predict_model()
2025-03-16 14:11:05,975:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618402C410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002617796CB80>)
2025-03-16 14:11:05,975:INFO:Checking exceptions
2025-03-16 14:11:05,975:INFO:Preloading libraries
2025-03-16 14:11:05,975:INFO:Set up data.
2025-03-16 14:11:05,978:INFO:Set up index.
2025-03-16 14:11:06,064:INFO:Initializing predict_model()
2025-03-16 14:11:06,064:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261824179D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:06,064:INFO:Checking exceptions
2025-03-16 14:11:06,064:INFO:Preloading libraries
2025-03-16 14:11:06,064:INFO:Set up data.
2025-03-16 14:11:06,066:INFO:Set up index.
2025-03-16 14:11:06,153:INFO:Initializing predict_model()
2025-03-16 14:11:06,153:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184023610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:06,153:INFO:Checking exceptions
2025-03-16 14:11:06,153:INFO:Preloading libraries
2025-03-16 14:11:06,153:INFO:Set up data.
2025-03-16 14:11:06,156:INFO:Set up index.
2025-03-16 14:11:06,238:INFO:Initializing predict_model()
2025-03-16 14:11:06,238:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002617FDA7810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:06,240:INFO:Checking exceptions
2025-03-16 14:11:06,240:INFO:Preloading libraries
2025-03-16 14:11:06,240:INFO:Set up data.
2025-03-16 14:11:06,243:INFO:Set up index.
2025-03-16 14:11:06,325:INFO:Initializing predict_model()
2025-03-16 14:11:06,325:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DD410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026184073060>)
2025-03-16 14:11:06,325:INFO:Checking exceptions
2025-03-16 14:11:06,325:INFO:Preloading libraries
2025-03-16 14:11:06,325:INFO:Set up data.
2025-03-16 14:11:06,330:INFO:Set up index.
2025-03-16 14:11:06,412:INFO:Initializing predict_model()
2025-03-16 14:11:06,412:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823EA8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:06,412:INFO:Checking exceptions
2025-03-16 14:11:06,412:INFO:Preloading libraries
2025-03-16 14:11:06,412:INFO:Set up data.
2025-03-16 14:11:06,416:INFO:Set up index.
2025-03-16 14:11:06,500:INFO:Initializing predict_model()
2025-03-16 14:11:06,500:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823F9F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:06,500:INFO:Checking exceptions
2025-03-16 14:11:06,500:INFO:Preloading libraries
2025-03-16 14:11:06,500:INFO:Set up data.
2025-03-16 14:11:06,504:INFO:Set up index.
2025-03-16 14:11:06,614:INFO:Initializing predict_model()
2025-03-16 14:11:06,614:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002615F292390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:06,614:INFO:Checking exceptions
2025-03-16 14:11:06,614:INFO:Preloading libraries
2025-03-16 14:11:06,614:INFO:Set up data.
2025-03-16 14:11:06,616:INFO:Set up index.
2025-03-16 14:11:06,713:INFO:Initializing predict_model()
2025-03-16 14:11:06,713:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840C8B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E94A160>)
2025-03-16 14:11:06,713:INFO:Checking exceptions
2025-03-16 14:11:06,713:INFO:Preloading libraries
2025-03-16 14:11:06,714:INFO:Set up data.
2025-03-16 14:11:06,717:INFO:Set up index.
2025-03-16 14:11:06,802:INFO:Initializing predict_model()
2025-03-16 14:11:06,802:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED0E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:06,802:INFO:Checking exceptions
2025-03-16 14:11:06,803:INFO:Preloading libraries
2025-03-16 14:11:06,803:INFO:Set up data.
2025-03-16 14:11:06,806:INFO:Set up index.
2025-03-16 14:11:06,890:INFO:Initializing predict_model()
2025-03-16 14:11:06,890:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EF89D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:06,890:INFO:Checking exceptions
2025-03-16 14:11:06,890:INFO:Preloading libraries
2025-03-16 14:11:06,890:INFO:Set up data.
2025-03-16 14:11:06,895:INFO:Set up index.
2025-03-16 14:11:06,986:INFO:Initializing predict_model()
2025-03-16 14:11:06,986:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181A80690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:06,986:INFO:Checking exceptions
2025-03-16 14:11:06,986:INFO:Preloading libraries
2025-03-16 14:11:06,986:INFO:Set up data.
2025-03-16 14:11:06,990:INFO:Set up index.
2025-03-16 14:11:07,084:INFO:Initializing predict_model()
2025-03-16 14:11:07,084:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184020F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002617796CB80>)
2025-03-16 14:11:07,084:INFO:Checking exceptions
2025-03-16 14:11:07,084:INFO:Preloading libraries
2025-03-16 14:11:07,084:INFO:Set up data.
2025-03-16 14:11:07,088:INFO:Set up index.
2025-03-16 14:11:07,174:INFO:Initializing predict_model()
2025-03-16 14:11:07,174:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184003690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:07,174:INFO:Checking exceptions
2025-03-16 14:11:07,174:INFO:Preloading libraries
2025-03-16 14:11:07,174:INFO:Set up data.
2025-03-16 14:11:07,177:INFO:Set up index.
2025-03-16 14:11:07,263:INFO:Initializing predict_model()
2025-03-16 14:11:07,263:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182A5E490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:07,263:INFO:Checking exceptions
2025-03-16 14:11:07,263:INFO:Preloading libraries
2025-03-16 14:11:07,263:INFO:Set up data.
2025-03-16 14:11:07,265:INFO:Set up index.
2025-03-16 14:11:07,349:INFO:Initializing predict_model()
2025-03-16 14:11:07,349:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261821C8690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:07,349:INFO:Checking exceptions
2025-03-16 14:11:07,349:INFO:Preloading libraries
2025-03-16 14:11:07,349:INFO:Set up data.
2025-03-16 14:11:07,353:INFO:Set up index.
2025-03-16 14:11:07,434:INFO:Initializing predict_model()
2025-03-16 14:11:07,434:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261775EF2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026184073060>)
2025-03-16 14:11:07,435:INFO:Checking exceptions
2025-03-16 14:11:07,435:INFO:Preloading libraries
2025-03-16 14:11:07,435:INFO:Set up data.
2025-03-16 14:11:07,438:INFO:Set up index.
2025-03-16 14:11:07,525:INFO:Initializing predict_model()
2025-03-16 14:11:07,525:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DC210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:07,525:INFO:Checking exceptions
2025-03-16 14:11:07,527:INFO:Preloading libraries
2025-03-16 14:11:07,527:INFO:Set up data.
2025-03-16 14:11:07,530:INFO:Set up index.
2025-03-16 14:11:07,621:INFO:Initializing predict_model()
2025-03-16 14:11:07,621:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002615FA23010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:07,621:INFO:Checking exceptions
2025-03-16 14:11:07,621:INFO:Preloading libraries
2025-03-16 14:11:07,621:INFO:Set up data.
2025-03-16 14:11:07,623:INFO:Set up index.
2025-03-16 14:11:07,707:INFO:Initializing predict_model()
2025-03-16 14:11:07,708:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261824179D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:07,708:INFO:Checking exceptions
2025-03-16 14:11:07,708:INFO:Preloading libraries
2025-03-16 14:11:07,708:INFO:Set up data.
2025-03-16 14:11:07,712:INFO:Set up index.
2025-03-16 14:11:07,794:INFO:Initializing predict_model()
2025-03-16 14:11:07,794:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182130A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E94A160>)
2025-03-16 14:11:07,794:INFO:Checking exceptions
2025-03-16 14:11:07,794:INFO:Preloading libraries
2025-03-16 14:11:07,794:INFO:Set up data.
2025-03-16 14:11:07,797:INFO:Set up index.
2025-03-16 14:11:07,881:INFO:Initializing predict_model()
2025-03-16 14:11:07,881:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823F9F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:07,881:INFO:Checking exceptions
2025-03-16 14:11:07,881:INFO:Preloading libraries
2025-03-16 14:11:07,881:INFO:Set up data.
2025-03-16 14:11:07,885:INFO:Set up index.
2025-03-16 14:11:07,971:INFO:Initializing predict_model()
2025-03-16 14:11:07,972:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840227D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:07,972:INFO:Checking exceptions
2025-03-16 14:11:07,972:INFO:Preloading libraries
2025-03-16 14:11:07,972:INFO:Set up data.
2025-03-16 14:11:07,977:INFO:Set up index.
2025-03-16 14:11:08,066:INFO:Initializing predict_model()
2025-03-16 14:11:08,066:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DD050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:08,066:INFO:Checking exceptions
2025-03-16 14:11:08,066:INFO:Preloading libraries
2025-03-16 14:11:08,066:INFO:Set up data.
2025-03-16 14:11:08,069:INFO:Set up index.
2025-03-16 14:11:08,157:INFO:Initializing predict_model()
2025-03-16 14:11:08,157:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DF1C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002617796CB80>)
2025-03-16 14:11:08,157:INFO:Checking exceptions
2025-03-16 14:11:08,157:INFO:Preloading libraries
2025-03-16 14:11:08,157:INFO:Set up data.
2025-03-16 14:11:08,160:INFO:Set up index.
2025-03-16 14:11:08,244:INFO:Initializing predict_model()
2025-03-16 14:11:08,245:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DC0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:08,245:INFO:Checking exceptions
2025-03-16 14:11:08,245:INFO:Preloading libraries
2025-03-16 14:11:08,245:INFO:Set up data.
2025-03-16 14:11:08,248:INFO:Set up index.
2025-03-16 14:11:08,332:INFO:Initializing predict_model()
2025-03-16 14:11:08,332:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DACE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:08,332:INFO:Checking exceptions
2025-03-16 14:11:08,332:INFO:Preloading libraries
2025-03-16 14:11:08,333:INFO:Set up data.
2025-03-16 14:11:08,335:INFO:Set up index.
2025-03-16 14:11:08,417:INFO:Initializing predict_model()
2025-03-16 14:11:08,417:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DF9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:08,417:INFO:Checking exceptions
2025-03-16 14:11:08,417:INFO:Preloading libraries
2025-03-16 14:11:08,417:INFO:Set up data.
2025-03-16 14:11:08,422:INFO:Set up index.
2025-03-16 14:11:08,504:INFO:Initializing predict_model()
2025-03-16 14:11:08,505:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177823D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026184073060>)
2025-03-16 14:11:08,505:INFO:Checking exceptions
2025-03-16 14:11:08,505:INFO:Preloading libraries
2025-03-16 14:11:08,505:INFO:Set up data.
2025-03-16 14:11:08,508:INFO:Set up index.
2025-03-16 14:11:08,594:INFO:Initializing predict_model()
2025-03-16 14:11:08,594:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DF9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:08,594:INFO:Checking exceptions
2025-03-16 14:11:08,594:INFO:Preloading libraries
2025-03-16 14:11:08,594:INFO:Set up data.
2025-03-16 14:11:08,597:INFO:Set up index.
2025-03-16 14:11:08,684:INFO:Initializing predict_model()
2025-03-16 14:11:08,684:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182146750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:08,684:INFO:Checking exceptions
2025-03-16 14:11:08,684:INFO:Preloading libraries
2025-03-16 14:11:08,684:INFO:Set up data.
2025-03-16 14:11:08,688:INFO:Set up index.
2025-03-16 14:11:08,773:INFO:Initializing predict_model()
2025-03-16 14:11:08,773:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DB8290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:08,773:INFO:Checking exceptions
2025-03-16 14:11:08,773:INFO:Preloading libraries
2025-03-16 14:11:08,773:INFO:Set up data.
2025-03-16 14:11:08,776:INFO:Set up index.
2025-03-16 14:11:08,860:INFO:Initializing predict_model()
2025-03-16 14:11:08,860:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182A5F290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E94A160>)
2025-03-16 14:11:08,860:INFO:Checking exceptions
2025-03-16 14:11:08,860:INFO:Preloading libraries
2025-03-16 14:11:08,860:INFO:Set up data.
2025-03-16 14:11:08,864:INFO:Set up index.
2025-03-16 14:11:08,955:INFO:Initializing predict_model()
2025-03-16 14:11:08,955:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184002310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:08,955:INFO:Checking exceptions
2025-03-16 14:11:08,955:INFO:Preloading libraries
2025-03-16 14:11:08,955:INFO:Set up data.
2025-03-16 14:11:08,958:INFO:Set up index.
2025-03-16 14:11:09,054:INFO:Initializing predict_model()
2025-03-16 14:11:09,054:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182382D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:09,054:INFO:Checking exceptions
2025-03-16 14:11:09,054:INFO:Preloading libraries
2025-03-16 14:11:09,054:INFO:Set up data.
2025-03-16 14:11:09,059:INFO:Set up index.
2025-03-16 14:11:09,157:INFO:Initializing predict_model()
2025-03-16 14:11:09,157:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED0350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:09,157:INFO:Checking exceptions
2025-03-16 14:11:09,157:INFO:Preloading libraries
2025-03-16 14:11:09,157:INFO:Set up data.
2025-03-16 14:11:09,162:INFO:Set up index.
2025-03-16 14:11:09,268:INFO:Initializing predict_model()
2025-03-16 14:11:09,268:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED0350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002617796CB80>)
2025-03-16 14:11:09,268:INFO:Checking exceptions
2025-03-16 14:11:09,268:INFO:Preloading libraries
2025-03-16 14:11:09,268:INFO:Set up data.
2025-03-16 14:11:09,274:INFO:Set up index.
2025-03-16 14:11:09,381:INFO:Initializing predict_model()
2025-03-16 14:11:09,381:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177823D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:09,382:INFO:Checking exceptions
2025-03-16 14:11:09,382:INFO:Preloading libraries
2025-03-16 14:11:09,382:INFO:Set up data.
2025-03-16 14:11:09,385:INFO:Set up index.
2025-03-16 14:11:09,487:INFO:Initializing predict_model()
2025-03-16 14:11:09,487:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DB1190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:09,487:INFO:Checking exceptions
2025-03-16 14:11:09,487:INFO:Preloading libraries
2025-03-16 14:11:09,487:INFO:Set up data.
2025-03-16 14:11:09,491:INFO:Set up index.
2025-03-16 14:11:09,583:INFO:Initializing predict_model()
2025-03-16 14:11:09,583:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177823D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:09,583:INFO:Checking exceptions
2025-03-16 14:11:09,583:INFO:Preloading libraries
2025-03-16 14:11:09,583:INFO:Set up data.
2025-03-16 14:11:09,586:INFO:Set up index.
2025-03-16 14:11:09,682:INFO:Initializing predict_model()
2025-03-16 14:11:09,682:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261822AADD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026184073060>)
2025-03-16 14:11:09,682:INFO:Checking exceptions
2025-03-16 14:11:09,682:INFO:Preloading libraries
2025-03-16 14:11:09,682:INFO:Set up data.
2025-03-16 14:11:09,687:INFO:Set up index.
2025-03-16 14:11:09,783:INFO:Initializing predict_model()
2025-03-16 14:11:09,783:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F17750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:09,783:INFO:Checking exceptions
2025-03-16 14:11:09,784:INFO:Preloading libraries
2025-03-16 14:11:09,784:INFO:Set up data.
2025-03-16 14:11:09,787:INFO:Set up index.
2025-03-16 14:11:09,920:INFO:Initializing predict_model()
2025-03-16 14:11:09,920:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823F9F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:09,920:INFO:Checking exceptions
2025-03-16 14:11:09,920:INFO:Preloading libraries
2025-03-16 14:11:09,922:INFO:Set up data.
2025-03-16 14:11:09,926:INFO:Set up index.
2025-03-16 14:11:10,074:INFO:Initializing predict_model()
2025-03-16 14:11:10,074:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EDBD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:10,074:INFO:Checking exceptions
2025-03-16 14:11:10,074:INFO:Preloading libraries
2025-03-16 14:11:10,074:INFO:Set up data.
2025-03-16 14:11:10,077:INFO:Set up index.
2025-03-16 14:11:10,187:INFO:Initializing predict_model()
2025-03-16 14:11:10,187:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182132150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E94A160>)
2025-03-16 14:11:10,187:INFO:Checking exceptions
2025-03-16 14:11:10,187:INFO:Preloading libraries
2025-03-16 14:11:10,187:INFO:Set up data.
2025-03-16 14:11:10,190:INFO:Set up index.
2025-03-16 14:11:10,295:INFO:Initializing predict_model()
2025-03-16 14:11:10,295:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823F8490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:10,295:INFO:Checking exceptions
2025-03-16 14:11:10,295:INFO:Preloading libraries
2025-03-16 14:11:10,297:INFO:Set up data.
2025-03-16 14:11:10,301:INFO:Set up index.
2025-03-16 14:11:10,419:INFO:Initializing predict_model()
2025-03-16 14:11:10,419:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261821C8950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:10,419:INFO:Checking exceptions
2025-03-16 14:11:10,419:INFO:Preloading libraries
2025-03-16 14:11:10,419:INFO:Set up data.
2025-03-16 14:11:10,424:INFO:Set up index.
2025-03-16 14:11:10,538:INFO:Initializing predict_model()
2025-03-16 14:11:10,538:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181A0DC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:10,538:INFO:Checking exceptions
2025-03-16 14:11:10,538:INFO:Preloading libraries
2025-03-16 14:11:10,538:INFO:Set up data.
2025-03-16 14:11:10,543:INFO:Set up index.
2025-03-16 14:11:10,658:INFO:Initializing predict_model()
2025-03-16 14:11:10,660:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182415050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002617796CB80>)
2025-03-16 14:11:10,660:INFO:Checking exceptions
2025-03-16 14:11:10,660:INFO:Preloading libraries
2025-03-16 14:11:10,660:INFO:Set up data.
2025-03-16 14:11:10,670:INFO:Set up index.
2025-03-16 14:11:10,783:INFO:Initializing predict_model()
2025-03-16 14:11:10,783:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182417750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:10,784:INFO:Checking exceptions
2025-03-16 14:11:10,784:INFO:Preloading libraries
2025-03-16 14:11:10,784:INFO:Set up data.
2025-03-16 14:11:10,792:INFO:Set up index.
2025-03-16 14:11:10,917:INFO:Initializing predict_model()
2025-03-16 14:11:10,917:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181A62E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:10,917:INFO:Checking exceptions
2025-03-16 14:11:10,917:INFO:Preloading libraries
2025-03-16 14:11:10,919:INFO:Set up data.
2025-03-16 14:11:10,932:INFO:Set up index.
2025-03-16 14:11:11,067:INFO:Initializing predict_model()
2025-03-16 14:11:11,067:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184020F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:11,067:INFO:Checking exceptions
2025-03-16 14:11:11,067:INFO:Preloading libraries
2025-03-16 14:11:11,068:INFO:Set up data.
2025-03-16 14:11:11,073:INFO:Set up index.
2025-03-16 14:11:11,220:INFO:Initializing predict_model()
2025-03-16 14:11:11,222:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EDBFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026184073060>)
2025-03-16 14:11:11,222:INFO:Checking exceptions
2025-03-16 14:11:11,223:INFO:Preloading libraries
2025-03-16 14:11:11,223:INFO:Set up data.
2025-03-16 14:11:11,233:INFO:Set up index.
2025-03-16 14:11:11,348:INFO:Initializing predict_model()
2025-03-16 14:11:11,348:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F06590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:11,348:INFO:Checking exceptions
2025-03-16 14:11:11,348:INFO:Preloading libraries
2025-03-16 14:11:11,348:INFO:Set up data.
2025-03-16 14:11:11,358:INFO:Set up index.
2025-03-16 14:11:11,475:INFO:Initializing predict_model()
2025-03-16 14:11:11,475:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F23790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:11,477:INFO:Checking exceptions
2025-03-16 14:11:11,477:INFO:Preloading libraries
2025-03-16 14:11:11,477:INFO:Set up data.
2025-03-16 14:11:11,481:INFO:Set up index.
2025-03-16 14:11:11,593:INFO:Initializing predict_model()
2025-03-16 14:11:11,593:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED3290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:11,595:INFO:Checking exceptions
2025-03-16 14:11:11,595:INFO:Preloading libraries
2025-03-16 14:11:11,595:INFO:Set up data.
2025-03-16 14:11:11,599:INFO:Set up index.
2025-03-16 14:11:11,793:INFO:Initializing predict_model()
2025-03-16 14:11:11,794:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182382D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E94A160>)
2025-03-16 14:11:11,794:INFO:Checking exceptions
2025-03-16 14:11:11,794:INFO:Preloading libraries
2025-03-16 14:11:11,794:INFO:Set up data.
2025-03-16 14:11:11,799:INFO:Set up index.
2025-03-16 14:11:11,926:INFO:Initializing predict_model()
2025-03-16 14:11:11,926:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618178E290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:11,926:INFO:Checking exceptions
2025-03-16 14:11:11,926:INFO:Preloading libraries
2025-03-16 14:11:11,927:INFO:Set up data.
2025-03-16 14:11:11,934:INFO:Set up index.
2025-03-16 14:11:12,057:INFO:Initializing predict_model()
2025-03-16 14:11:12,058:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261822585D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:12,058:INFO:Checking exceptions
2025-03-16 14:11:12,058:INFO:Preloading libraries
2025-03-16 14:11:12,058:INFO:Set up data.
2025-03-16 14:11:12,064:INFO:Set up index.
2025-03-16 14:11:12,174:INFO:Initializing predict_model()
2025-03-16 14:11:12,174:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EFBF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:12,174:INFO:Checking exceptions
2025-03-16 14:11:12,174:INFO:Preloading libraries
2025-03-16 14:11:12,174:INFO:Set up data.
2025-03-16 14:11:12,178:INFO:Set up index.
2025-03-16 14:11:12,340:INFO:Initializing predict_model()
2025-03-16 14:11:12,340:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F07710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002617796CB80>)
2025-03-16 14:11:12,340:INFO:Checking exceptions
2025-03-16 14:11:12,340:INFO:Preloading libraries
2025-03-16 14:11:12,340:INFO:Set up data.
2025-03-16 14:11:12,346:INFO:Set up index.
2025-03-16 14:11:12,477:INFO:Initializing predict_model()
2025-03-16 14:11:12,477:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DC4C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:12,477:INFO:Checking exceptions
2025-03-16 14:11:12,477:INFO:Preloading libraries
2025-03-16 14:11:12,477:INFO:Set up data.
2025-03-16 14:11:12,483:INFO:Set up index.
2025-03-16 14:11:12,594:INFO:Initializing predict_model()
2025-03-16 14:11:12,594:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261818A0790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:12,594:INFO:Checking exceptions
2025-03-16 14:11:12,594:INFO:Preloading libraries
2025-03-16 14:11:12,594:INFO:Set up data.
2025-03-16 14:11:12,599:INFO:Set up index.
2025-03-16 14:11:12,719:INFO:Initializing predict_model()
2025-03-16 14:11:12,719:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823D3950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002618409FBA0>)
2025-03-16 14:11:12,720:INFO:Checking exceptions
2025-03-16 14:11:12,720:INFO:Preloading libraries
2025-03-16 14:11:12,720:INFO:Set up data.
2025-03-16 14:11:12,725:INFO:Set up index.
2025-03-16 14:11:12,834:INFO:Initializing predict_model()
2025-03-16 14:11:12,836:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823F9F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', LGBMRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026184073060>)
2025-03-16 14:11:12,836:INFO:Checking exceptions
2025-03-16 14:11:12,836:INFO:Preloading libraries
2025-03-16 14:11:12,836:INFO:Set up data.
2025-03-16 14:11:12,840:INFO:Set up index.
2025-03-16 14:11:12,951:INFO:Initializing load_model()
2025-03-16 14:11:12,951:INFO:load_model(model_name=../eng_psu_hatyai/main/humi_use_temp_model_2, platform=None, authentication=None, verbose=True)
2025-03-16 14:11:13,111:INFO:Initializing predict_model()
2025-03-16 14:11:13,111:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EF8850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBBA0>)
2025-03-16 14:11:13,111:INFO:Checking exceptions
2025-03-16 14:11:13,111:INFO:Preloading libraries
2025-03-16 14:11:13,113:INFO:Set up data.
2025-03-16 14:11:13,117:INFO:Set up index.
2025-03-16 14:11:13,230:INFO:Initializing predict_model()
2025-03-16 14:11:13,230:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261819F1410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBB00>)
2025-03-16 14:11:13,230:INFO:Checking exceptions
2025-03-16 14:11:13,230:INFO:Preloading libraries
2025-03-16 14:11:13,231:INFO:Set up data.
2025-03-16 14:11:13,235:INFO:Set up index.
2025-03-16 14:11:13,337:INFO:Initializing predict_model()
2025-03-16 14:11:13,337:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EBB490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026177E5F7E0>)
2025-03-16 14:11:13,337:INFO:Checking exceptions
2025-03-16 14:11:13,337:INFO:Preloading libraries
2025-03-16 14:11:13,339:INFO:Set up data.
2025-03-16 14:11:13,342:INFO:Set up index.
2025-03-16 14:11:13,440:INFO:Initializing predict_model()
2025-03-16 14:11:13,440:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181ACDA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:13,440:INFO:Checking exceptions
2025-03-16 14:11:13,440:INFO:Preloading libraries
2025-03-16 14:11:13,440:INFO:Set up data.
2025-03-16 14:11:13,444:INFO:Set up index.
2025-03-16 14:11:13,545:INFO:Initializing predict_model()
2025-03-16 14:11:13,547:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618261DED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:13,547:INFO:Checking exceptions
2025-03-16 14:11:13,547:INFO:Preloading libraries
2025-03-16 14:11:13,547:INFO:Set up data.
2025-03-16 14:11:13,553:INFO:Set up index.
2025-03-16 14:11:13,660:INFO:Initializing predict_model()
2025-03-16 14:11:13,660:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182132150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026177F3BA60>)
2025-03-16 14:11:13,660:INFO:Checking exceptions
2025-03-16 14:11:13,660:INFO:Preloading libraries
2025-03-16 14:11:13,662:INFO:Set up data.
2025-03-16 14:11:13,664:INFO:Set up index.
2025-03-16 14:11:13,767:INFO:Initializing predict_model()
2025-03-16 14:11:13,767:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618261DED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:13,767:INFO:Checking exceptions
2025-03-16 14:11:13,767:INFO:Preloading libraries
2025-03-16 14:11:13,767:INFO:Set up data.
2025-03-16 14:11:13,770:INFO:Set up index.
2025-03-16 14:11:13,870:INFO:Initializing predict_model()
2025-03-16 14:11:13,870:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261819F1410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:13,870:INFO:Checking exceptions
2025-03-16 14:11:13,870:INFO:Preloading libraries
2025-03-16 14:11:13,871:INFO:Set up data.
2025-03-16 14:11:13,874:INFO:Set up index.
2025-03-16 14:11:13,972:INFO:Initializing predict_model()
2025-03-16 14:11:13,972:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823F9F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:13,972:INFO:Checking exceptions
2025-03-16 14:11:13,972:INFO:Preloading libraries
2025-03-16 14:11:13,972:INFO:Set up data.
2025-03-16 14:11:13,974:INFO:Set up index.
2025-03-16 14:11:14,085:INFO:Initializing predict_model()
2025-03-16 14:11:14,085:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261841172D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:14,085:INFO:Checking exceptions
2025-03-16 14:11:14,085:INFO:Preloading libraries
2025-03-16 14:11:14,085:INFO:Set up data.
2025-03-16 14:11:14,088:INFO:Set up index.
2025-03-16 14:11:14,193:INFO:Initializing predict_model()
2025-03-16 14:11:14,193:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002615F47B150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:14,193:INFO:Checking exceptions
2025-03-16 14:11:14,193:INFO:Preloading libraries
2025-03-16 14:11:14,195:INFO:Set up data.
2025-03-16 14:11:14,198:INFO:Set up index.
2025-03-16 14:11:14,309:INFO:Initializing predict_model()
2025-03-16 14:11:14,309:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182382110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:14,309:INFO:Checking exceptions
2025-03-16 14:11:14,309:INFO:Preloading libraries
2025-03-16 14:11:14,309:INFO:Set up data.
2025-03-16 14:11:14,313:INFO:Set up index.
2025-03-16 14:11:14,413:INFO:Initializing predict_model()
2025-03-16 14:11:14,413:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261826953D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:14,413:INFO:Checking exceptions
2025-03-16 14:11:14,413:INFO:Preloading libraries
2025-03-16 14:11:14,413:INFO:Set up data.
2025-03-16 14:11:14,417:INFO:Set up index.
2025-03-16 14:11:14,530:INFO:Initializing predict_model()
2025-03-16 14:11:14,530:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184117F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:14,530:INFO:Checking exceptions
2025-03-16 14:11:14,530:INFO:Preloading libraries
2025-03-16 14:11:14,530:INFO:Set up data.
2025-03-16 14:11:14,535:INFO:Set up index.
2025-03-16 14:11:14,660:INFO:Initializing predict_model()
2025-03-16 14:11:14,660:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DC1190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:14,660:INFO:Checking exceptions
2025-03-16 14:11:14,660:INFO:Preloading libraries
2025-03-16 14:11:14,661:INFO:Set up data.
2025-03-16 14:11:14,665:INFO:Set up index.
2025-03-16 14:11:14,765:INFO:Initializing predict_model()
2025-03-16 14:11:14,766:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184022A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:14,766:INFO:Checking exceptions
2025-03-16 14:11:14,766:INFO:Preloading libraries
2025-03-16 14:11:14,766:INFO:Set up data.
2025-03-16 14:11:14,769:INFO:Set up index.
2025-03-16 14:11:14,866:INFO:Initializing predict_model()
2025-03-16 14:11:14,866:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840226D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:14,866:INFO:Checking exceptions
2025-03-16 14:11:14,866:INFO:Preloading libraries
2025-03-16 14:11:14,866:INFO:Set up data.
2025-03-16 14:11:14,869:INFO:Set up index.
2025-03-16 14:11:14,964:INFO:Initializing predict_model()
2025-03-16 14:11:14,964:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618410C050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:14,964:INFO:Checking exceptions
2025-03-16 14:11:14,964:INFO:Preloading libraries
2025-03-16 14:11:14,964:INFO:Set up data.
2025-03-16 14:11:14,967:INFO:Set up index.
2025-03-16 14:11:15,076:INFO:Initializing predict_model()
2025-03-16 14:11:15,076:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181E22D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:15,076:INFO:Checking exceptions
2025-03-16 14:11:15,076:INFO:Preloading libraries
2025-03-16 14:11:15,076:INFO:Set up data.
2025-03-16 14:11:15,079:INFO:Set up index.
2025-03-16 14:11:15,190:INFO:Initializing predict_model()
2025-03-16 14:11:15,190:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823820D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:15,190:INFO:Checking exceptions
2025-03-16 14:11:15,190:INFO:Preloading libraries
2025-03-16 14:11:15,190:INFO:Set up data.
2025-03-16 14:11:15,194:INFO:Set up index.
2025-03-16 14:11:15,294:INFO:Initializing predict_model()
2025-03-16 14:11:15,294:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618408AA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:15,294:INFO:Checking exceptions
2025-03-16 14:11:15,294:INFO:Preloading libraries
2025-03-16 14:11:15,294:INFO:Set up data.
2025-03-16 14:11:15,297:INFO:Set up index.
2025-03-16 14:11:15,395:INFO:Initializing predict_model()
2025-03-16 14:11:15,395:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DDE150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:15,395:INFO:Checking exceptions
2025-03-16 14:11:15,395:INFO:Preloading libraries
2025-03-16 14:11:15,395:INFO:Set up data.
2025-03-16 14:11:15,398:INFO:Set up index.
2025-03-16 14:11:15,499:INFO:Initializing predict_model()
2025-03-16 14:11:15,499:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED9A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:15,499:INFO:Checking exceptions
2025-03-16 14:11:15,500:INFO:Preloading libraries
2025-03-16 14:11:15,500:INFO:Set up data.
2025-03-16 14:11:15,503:INFO:Set up index.
2025-03-16 14:11:15,600:INFO:Initializing predict_model()
2025-03-16 14:11:15,600:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618227DB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:15,600:INFO:Checking exceptions
2025-03-16 14:11:15,600:INFO:Preloading libraries
2025-03-16 14:11:15,600:INFO:Set up data.
2025-03-16 14:11:15,606:INFO:Set up index.
2025-03-16 14:11:15,702:INFO:Initializing predict_model()
2025-03-16 14:11:15,703:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182415050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:15,703:INFO:Checking exceptions
2025-03-16 14:11:15,703:INFO:Preloading libraries
2025-03-16 14:11:15,703:INFO:Set up data.
2025-03-16 14:11:15,706:INFO:Set up index.
2025-03-16 14:11:15,803:INFO:Initializing predict_model()
2025-03-16 14:11:15,803:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F20950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:15,803:INFO:Checking exceptions
2025-03-16 14:11:15,803:INFO:Preloading libraries
2025-03-16 14:11:15,803:INFO:Set up data.
2025-03-16 14:11:15,806:INFO:Set up index.
2025-03-16 14:11:15,899:INFO:Initializing predict_model()
2025-03-16 14:11:15,899:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184006E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:15,899:INFO:Checking exceptions
2025-03-16 14:11:15,899:INFO:Preloading libraries
2025-03-16 14:11:15,899:INFO:Set up data.
2025-03-16 14:11:15,904:INFO:Set up index.
2025-03-16 14:11:15,989:INFO:Initializing predict_model()
2025-03-16 14:11:15,991:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EDA710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:15,991:INFO:Checking exceptions
2025-03-16 14:11:15,991:INFO:Preloading libraries
2025-03-16 14:11:15,991:INFO:Set up data.
2025-03-16 14:11:15,995:INFO:Set up index.
2025-03-16 14:11:16,089:INFO:Initializing predict_model()
2025-03-16 14:11:16,089:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840B9510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:16,089:INFO:Checking exceptions
2025-03-16 14:11:16,089:INFO:Preloading libraries
2025-03-16 14:11:16,089:INFO:Set up data.
2025-03-16 14:11:16,092:INFO:Set up index.
2025-03-16 14:11:16,178:INFO:Initializing predict_model()
2025-03-16 14:11:16,178:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182415050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:16,178:INFO:Checking exceptions
2025-03-16 14:11:16,178:INFO:Preloading libraries
2025-03-16 14:11:16,178:INFO:Set up data.
2025-03-16 14:11:16,181:INFO:Set up index.
2025-03-16 14:11:16,272:INFO:Initializing predict_model()
2025-03-16 14:11:16,272:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182258310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:16,272:INFO:Checking exceptions
2025-03-16 14:11:16,272:INFO:Preloading libraries
2025-03-16 14:11:16,272:INFO:Set up data.
2025-03-16 14:11:16,275:INFO:Set up index.
2025-03-16 14:11:16,369:INFO:Initializing predict_model()
2025-03-16 14:11:16,369:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261818A0790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:16,369:INFO:Checking exceptions
2025-03-16 14:11:16,369:INFO:Preloading libraries
2025-03-16 14:11:16,369:INFO:Set up data.
2025-03-16 14:11:16,372:INFO:Set up index.
2025-03-16 14:11:16,465:INFO:Initializing predict_model()
2025-03-16 14:11:16,465:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618229D290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:16,465:INFO:Checking exceptions
2025-03-16 14:11:16,465:INFO:Preloading libraries
2025-03-16 14:11:16,465:INFO:Set up data.
2025-03-16 14:11:16,468:INFO:Set up index.
2025-03-16 14:11:16,558:INFO:Initializing predict_model()
2025-03-16 14:11:16,558:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED2710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:16,558:INFO:Checking exceptions
2025-03-16 14:11:16,558:INFO:Preloading libraries
2025-03-16 14:11:16,559:INFO:Set up data.
2025-03-16 14:11:16,562:INFO:Set up index.
2025-03-16 14:11:16,650:INFO:Initializing predict_model()
2025-03-16 14:11:16,650:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177820B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:16,650:INFO:Checking exceptions
2025-03-16 14:11:16,650:INFO:Preloading libraries
2025-03-16 14:11:16,650:INFO:Set up data.
2025-03-16 14:11:16,653:INFO:Set up index.
2025-03-16 14:11:16,742:INFO:Initializing predict_model()
2025-03-16 14:11:16,743:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EF8490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:16,743:INFO:Checking exceptions
2025-03-16 14:11:16,743:INFO:Preloading libraries
2025-03-16 14:11:16,743:INFO:Set up data.
2025-03-16 14:11:16,746:INFO:Set up index.
2025-03-16 14:11:16,834:INFO:Initializing predict_model()
2025-03-16 14:11:16,834:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F07450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:16,834:INFO:Checking exceptions
2025-03-16 14:11:16,834:INFO:Preloading libraries
2025-03-16 14:11:16,836:INFO:Set up data.
2025-03-16 14:11:16,839:INFO:Set up index.
2025-03-16 14:11:16,932:INFO:Initializing predict_model()
2025-03-16 14:11:16,933:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184007690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:16,933:INFO:Checking exceptions
2025-03-16 14:11:16,933:INFO:Preloading libraries
2025-03-16 14:11:16,933:INFO:Set up data.
2025-03-16 14:11:16,936:INFO:Set up index.
2025-03-16 14:11:17,021:INFO:Initializing predict_model()
2025-03-16 14:11:17,021:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261818A0790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:17,021:INFO:Checking exceptions
2025-03-16 14:11:17,021:INFO:Preloading libraries
2025-03-16 14:11:17,021:INFO:Set up data.
2025-03-16 14:11:17,023:INFO:Set up index.
2025-03-16 14:11:17,113:INFO:Initializing predict_model()
2025-03-16 14:11:17,113:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182258290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:17,113:INFO:Checking exceptions
2025-03-16 14:11:17,113:INFO:Preloading libraries
2025-03-16 14:11:17,113:INFO:Set up data.
2025-03-16 14:11:17,116:INFO:Set up index.
2025-03-16 14:11:17,205:INFO:Initializing predict_model()
2025-03-16 14:11:17,205:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DC0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:17,205:INFO:Checking exceptions
2025-03-16 14:11:17,205:INFO:Preloading libraries
2025-03-16 14:11:17,206:INFO:Set up data.
2025-03-16 14:11:17,210:INFO:Set up index.
2025-03-16 14:11:17,305:INFO:Initializing predict_model()
2025-03-16 14:11:17,305:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261820A3FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:17,305:INFO:Checking exceptions
2025-03-16 14:11:17,305:INFO:Preloading libraries
2025-03-16 14:11:17,305:INFO:Set up data.
2025-03-16 14:11:17,308:INFO:Set up index.
2025-03-16 14:11:17,396:INFO:Initializing predict_model()
2025-03-16 14:11:17,396:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184110E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026177E5F7E0>)
2025-03-16 14:11:17,396:INFO:Checking exceptions
2025-03-16 14:11:17,396:INFO:Preloading libraries
2025-03-16 14:11:17,396:INFO:Set up data.
2025-03-16 14:11:17,399:INFO:Set up index.
2025-03-16 14:11:17,491:INFO:Initializing predict_model()
2025-03-16 14:11:17,491:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261821C8690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:17,491:INFO:Checking exceptions
2025-03-16 14:11:17,491:INFO:Preloading libraries
2025-03-16 14:11:17,491:INFO:Set up data.
2025-03-16 14:11:17,494:INFO:Set up index.
2025-03-16 14:11:17,584:INFO:Initializing predict_model()
2025-03-16 14:11:17,584:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184121450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:17,584:INFO:Checking exceptions
2025-03-16 14:11:17,584:INFO:Preloading libraries
2025-03-16 14:11:17,584:INFO:Set up data.
2025-03-16 14:11:17,587:INFO:Set up index.
2025-03-16 14:11:17,679:INFO:Initializing predict_model()
2025-03-16 14:11:17,679:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184112190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:17,679:INFO:Checking exceptions
2025-03-16 14:11:17,679:INFO:Preloading libraries
2025-03-16 14:11:17,680:INFO:Set up data.
2025-03-16 14:11:17,683:INFO:Set up index.
2025-03-16 14:11:17,772:INFO:Initializing predict_model()
2025-03-16 14:11:17,772:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181ACDA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EDEE840>)
2025-03-16 14:11:17,772:INFO:Checking exceptions
2025-03-16 14:11:17,772:INFO:Preloading libraries
2025-03-16 14:11:17,772:INFO:Set up data.
2025-03-16 14:11:17,775:INFO:Set up index.
2025-03-16 14:11:17,860:INFO:Initializing predict_model()
2025-03-16 14:11:17,860:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840B9850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EDEE840>)
2025-03-16 14:11:17,861:INFO:Checking exceptions
2025-03-16 14:11:17,861:INFO:Preloading libraries
2025-03-16 14:11:17,861:INFO:Set up data.
2025-03-16 14:11:17,864:INFO:Set up index.
2025-03-16 14:11:17,970:INFO:Initializing predict_model()
2025-03-16 14:11:17,970:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618402C590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EDEE840>)
2025-03-16 14:11:17,970:INFO:Checking exceptions
2025-03-16 14:11:17,970:INFO:Preloading libraries
2025-03-16 14:11:17,970:INFO:Set up data.
2025-03-16 14:11:17,974:INFO:Set up index.
2025-03-16 14:11:18,064:INFO:Initializing predict_model()
2025-03-16 14:11:18,064:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618410F810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:18,064:INFO:Checking exceptions
2025-03-16 14:11:18,064:INFO:Preloading libraries
2025-03-16 14:11:18,064:INFO:Set up data.
2025-03-16 14:11:18,069:INFO:Set up index.
2025-03-16 14:11:18,161:INFO:Initializing predict_model()
2025-03-16 14:11:18,161:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177820B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:18,161:INFO:Checking exceptions
2025-03-16 14:11:18,161:INFO:Preloading libraries
2025-03-16 14:11:18,161:INFO:Set up data.
2025-03-16 14:11:18,165:INFO:Set up index.
2025-03-16 14:11:18,257:INFO:Initializing predict_model()
2025-03-16 14:11:18,257:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182E52310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC6FC0>)
2025-03-16 14:11:18,258:INFO:Checking exceptions
2025-03-16 14:11:18,258:INFO:Preloading libraries
2025-03-16 14:11:18,258:INFO:Set up data.
2025-03-16 14:11:18,261:INFO:Set up index.
2025-03-16 14:11:18,357:INFO:Initializing predict_model()
2025-03-16 14:11:18,357:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184115D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC6FC0>)
2025-03-16 14:11:18,359:INFO:Checking exceptions
2025-03-16 14:11:18,359:INFO:Preloading libraries
2025-03-16 14:11:18,359:INFO:Set up data.
2025-03-16 14:11:18,363:INFO:Set up index.
2025-03-16 14:11:18,455:INFO:Initializing predict_model()
2025-03-16 14:11:18,455:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002615FA23010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC6FC0>)
2025-03-16 14:11:18,455:INFO:Checking exceptions
2025-03-16 14:11:18,455:INFO:Preloading libraries
2025-03-16 14:11:18,455:INFO:Set up data.
2025-03-16 14:11:18,458:INFO:Set up index.
2025-03-16 14:11:18,551:INFO:Initializing predict_model()
2025-03-16 14:11:18,551:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EBB3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC6FC0>)
2025-03-16 14:11:18,551:INFO:Checking exceptions
2025-03-16 14:11:18,551:INFO:Preloading libraries
2025-03-16 14:11:18,551:INFO:Set up data.
2025-03-16 14:11:18,555:INFO:Set up index.
2025-03-16 14:11:18,654:INFO:Initializing predict_model()
2025-03-16 14:11:18,654:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DD0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC6FC0>)
2025-03-16 14:11:18,654:INFO:Checking exceptions
2025-03-16 14:11:18,654:INFO:Preloading libraries
2025-03-16 14:11:18,654:INFO:Set up data.
2025-03-16 14:11:18,657:INFO:Set up index.
2025-03-16 14:11:18,776:INFO:Initializing predict_model()
2025-03-16 14:11:18,776:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823F9C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC6FC0>)
2025-03-16 14:11:18,776:INFO:Checking exceptions
2025-03-16 14:11:18,776:INFO:Preloading libraries
2025-03-16 14:11:18,776:INFO:Set up data.
2025-03-16 14:11:18,779:INFO:Set up index.
2025-03-16 14:11:18,881:INFO:Initializing predict_model()
2025-03-16 14:11:18,881:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177F46DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:18,881:INFO:Checking exceptions
2025-03-16 14:11:18,881:INFO:Preloading libraries
2025-03-16 14:11:18,882:INFO:Set up data.
2025-03-16 14:11:18,885:INFO:Set up index.
2025-03-16 14:11:18,984:INFO:Initializing predict_model()
2025-03-16 14:11:18,985:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261821C8310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:18,985:INFO:Checking exceptions
2025-03-16 14:11:18,985:INFO:Preloading libraries
2025-03-16 14:11:18,985:INFO:Set up data.
2025-03-16 14:11:18,988:INFO:Set up index.
2025-03-16 14:11:19,083:INFO:Initializing predict_model()
2025-03-16 14:11:19,083:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181A62E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:19,083:INFO:Checking exceptions
2025-03-16 14:11:19,083:INFO:Preloading libraries
2025-03-16 14:11:19,083:INFO:Set up data.
2025-03-16 14:11:19,087:INFO:Set up index.
2025-03-16 14:11:19,187:INFO:Initializing predict_model()
2025-03-16 14:11:19,187:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181ACD950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EDEE840>)
2025-03-16 14:11:19,187:INFO:Checking exceptions
2025-03-16 14:11:19,187:INFO:Preloading libraries
2025-03-16 14:11:19,189:INFO:Set up data.
2025-03-16 14:11:19,192:INFO:Set up index.
2025-03-16 14:11:19,286:INFO:Initializing predict_model()
2025-03-16 14:11:19,286:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F07110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:19,286:INFO:Checking exceptions
2025-03-16 14:11:19,287:INFO:Preloading libraries
2025-03-16 14:11:19,287:INFO:Set up data.
2025-03-16 14:11:19,290:INFO:Set up index.
2025-03-16 14:11:19,387:INFO:Initializing predict_model()
2025-03-16 14:11:19,387:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261825B8690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:19,387:INFO:Checking exceptions
2025-03-16 14:11:19,387:INFO:Preloading libraries
2025-03-16 14:11:19,387:INFO:Set up data.
2025-03-16 14:11:19,390:INFO:Set up index.
2025-03-16 14:11:19,490:INFO:Initializing predict_model()
2025-03-16 14:11:19,490:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002615F95BE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:19,490:INFO:Checking exceptions
2025-03-16 14:11:19,490:INFO:Preloading libraries
2025-03-16 14:11:19,490:INFO:Set up data.
2025-03-16 14:11:19,494:INFO:Set up index.
2025-03-16 14:11:19,589:INFO:Initializing predict_model()
2025-03-16 14:11:19,589:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261841169D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:19,589:INFO:Checking exceptions
2025-03-16 14:11:19,589:INFO:Preloading libraries
2025-03-16 14:11:19,589:INFO:Set up data.
2025-03-16 14:11:19,593:INFO:Set up index.
2025-03-16 14:11:19,698:INFO:Initializing predict_model()
2025-03-16 14:11:19,698:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184122510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615E949D00>)
2025-03-16 14:11:19,698:INFO:Checking exceptions
2025-03-16 14:11:19,698:INFO:Preloading libraries
2025-03-16 14:11:19,698:INFO:Set up data.
2025-03-16 14:11:19,702:INFO:Set up index.
2025-03-16 14:11:19,807:INFO:Initializing predict_model()
2025-03-16 14:11:19,807:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EFBC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:19,807:INFO:Checking exceptions
2025-03-16 14:11:19,807:INFO:Preloading libraries
2025-03-16 14:11:19,809:INFO:Set up data.
2025-03-16 14:11:19,812:INFO:Set up index.
2025-03-16 14:11:19,916:INFO:Initializing predict_model()
2025-03-16 14:11:19,916:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED1010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:19,916:INFO:Checking exceptions
2025-03-16 14:11:19,916:INFO:Preloading libraries
2025-03-16 14:11:19,917:INFO:Set up data.
2025-03-16 14:11:19,920:INFO:Set up index.
2025-03-16 14:11:20,026:INFO:Initializing predict_model()
2025-03-16 14:11:20,026:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED0FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EDEE840>)
2025-03-16 14:11:20,026:INFO:Checking exceptions
2025-03-16 14:11:20,026:INFO:Preloading libraries
2025-03-16 14:11:20,026:INFO:Set up data.
2025-03-16 14:11:20,029:INFO:Set up index.
2025-03-16 14:11:20,130:INFO:Initializing predict_model()
2025-03-16 14:11:20,130:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EF8490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:20,130:INFO:Checking exceptions
2025-03-16 14:11:20,130:INFO:Preloading libraries
2025-03-16 14:11:20,130:INFO:Set up data.
2025-03-16 14:11:20,134:INFO:Set up index.
2025-03-16 14:11:20,234:INFO:Initializing predict_model()
2025-03-16 14:11:20,234:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DAAF50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:20,234:INFO:Checking exceptions
2025-03-16 14:11:20,234:INFO:Preloading libraries
2025-03-16 14:11:20,234:INFO:Set up data.
2025-03-16 14:11:20,237:INFO:Set up index.
2025-03-16 14:11:20,333:INFO:Initializing predict_model()
2025-03-16 14:11:20,333:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DC210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC6FC0>)
2025-03-16 14:11:20,333:INFO:Checking exceptions
2025-03-16 14:11:20,333:INFO:Preloading libraries
2025-03-16 14:11:20,333:INFO:Set up data.
2025-03-16 14:11:20,336:INFO:Set up index.
2025-03-16 14:11:20,444:INFO:Initializing predict_model()
2025-03-16 14:11:20,444:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED2D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC6FC0>)
2025-03-16 14:11:20,444:INFO:Checking exceptions
2025-03-16 14:11:20,444:INFO:Preloading libraries
2025-03-16 14:11:20,444:INFO:Set up data.
2025-03-16 14:11:20,449:INFO:Set up index.
2025-03-16 14:11:20,537:INFO:Initializing predict_model()
2025-03-16 14:11:20,537:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184111F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC6FC0>)
2025-03-16 14:11:20,537:INFO:Checking exceptions
2025-03-16 14:11:20,537:INFO:Preloading libraries
2025-03-16 14:11:20,537:INFO:Set up data.
2025-03-16 14:11:20,540:INFO:Set up index.
2025-03-16 14:11:20,633:INFO:Initializing predict_model()
2025-03-16 14:11:20,634:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618261DED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBB00>)
2025-03-16 14:11:20,634:INFO:Checking exceptions
2025-03-16 14:11:20,634:INFO:Preloading libraries
2025-03-16 14:11:20,634:INFO:Set up data.
2025-03-16 14:11:20,636:INFO:Set up index.
2025-03-16 14:11:20,724:INFO:Initializing predict_model()
2025-03-16 14:11:20,724:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184110190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026177E5F7E0>)
2025-03-16 14:11:20,724:INFO:Checking exceptions
2025-03-16 14:11:20,724:INFO:Preloading libraries
2025-03-16 14:11:20,724:INFO:Set up data.
2025-03-16 14:11:20,727:INFO:Set up index.
2025-03-16 14:11:20,816:INFO:Initializing predict_model()
2025-03-16 14:11:20,816:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DE9D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF56480>)
2025-03-16 14:11:20,816:INFO:Checking exceptions
2025-03-16 14:11:20,816:INFO:Preloading libraries
2025-03-16 14:11:20,816:INFO:Set up data.
2025-03-16 14:11:20,820:INFO:Set up index.
2025-03-16 14:11:20,911:INFO:Initializing predict_model()
2025-03-16 14:11:20,911:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184007610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBBA0>)
2025-03-16 14:11:20,912:INFO:Checking exceptions
2025-03-16 14:11:20,912:INFO:Preloading libraries
2025-03-16 14:11:20,912:INFO:Set up data.
2025-03-16 14:11:20,915:INFO:Set up index.
2025-03-16 14:11:21,008:INFO:Initializing predict_model()
2025-03-16 14:11:21,008:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184111190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026182EC6FC0>)
2025-03-16 14:11:21,008:INFO:Checking exceptions
2025-03-16 14:11:21,008:INFO:Preloading libraries
2025-03-16 14:11:21,008:INFO:Set up data.
2025-03-16 14:11:21,011:INFO:Set up index.
2025-03-16 14:11:21,102:INFO:Initializing predict_model()
2025-03-16 14:11:21,102:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED8B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:21,103:INFO:Checking exceptions
2025-03-16 14:11:21,103:INFO:Preloading libraries
2025-03-16 14:11:21,103:INFO:Set up data.
2025-03-16 14:11:21,106:INFO:Set up index.
2025-03-16 14:11:21,199:INFO:Initializing predict_model()
2025-03-16 14:11:21,199:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261824179D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:21,199:INFO:Checking exceptions
2025-03-16 14:11:21,199:INFO:Preloading libraries
2025-03-16 14:11:21,199:INFO:Set up data.
2025-03-16 14:11:21,202:INFO:Set up index.
2025-03-16 14:11:21,296:INFO:Initializing predict_model()
2025-03-16 14:11:21,296:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261841110D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:21,296:INFO:Checking exceptions
2025-03-16 14:11:21,296:INFO:Preloading libraries
2025-03-16 14:11:21,296:INFO:Set up data.
2025-03-16 14:11:21,299:INFO:Set up index.
2025-03-16 14:11:21,385:INFO:Initializing predict_model()
2025-03-16 14:11:21,385:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182147CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EDEE840>)
2025-03-16 14:11:21,385:INFO:Checking exceptions
2025-03-16 14:11:21,385:INFO:Preloading libraries
2025-03-16 14:11:21,385:INFO:Set up data.
2025-03-16 14:11:21,390:INFO:Set up index.
2025-03-16 14:11:21,484:INFO:Initializing predict_model()
2025-03-16 14:11:21,484:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182B8EE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EDEE840>)
2025-03-16 14:11:21,484:INFO:Checking exceptions
2025-03-16 14:11:21,484:INFO:Preloading libraries
2025-03-16 14:11:21,484:INFO:Set up data.
2025-03-16 14:11:21,486:INFO:Set up index.
2025-03-16 14:11:21,585:INFO:Initializing predict_model()
2025-03-16 14:11:21,585:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DF8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:21,585:INFO:Checking exceptions
2025-03-16 14:11:21,585:INFO:Preloading libraries
2025-03-16 14:11:21,585:INFO:Set up data.
2025-03-16 14:11:21,589:INFO:Set up index.
2025-03-16 14:11:21,683:INFO:Initializing predict_model()
2025-03-16 14:11:21,684:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182258290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:21,684:INFO:Checking exceptions
2025-03-16 14:11:21,684:INFO:Preloading libraries
2025-03-16 14:11:21,684:INFO:Set up data.
2025-03-16 14:11:21,687:INFO:Set up index.
2025-03-16 14:11:21,787:INFO:Initializing predict_model()
2025-03-16 14:11:21,787:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182258310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026177E5F7E0>)
2025-03-16 14:11:21,787:INFO:Checking exceptions
2025-03-16 14:11:21,787:INFO:Preloading libraries
2025-03-16 14:11:21,787:INFO:Set up data.
2025-03-16 14:11:21,792:INFO:Set up index.
2025-03-16 14:11:21,893:INFO:Initializing predict_model()
2025-03-16 14:11:21,893:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618408AA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:21,893:INFO:Checking exceptions
2025-03-16 14:11:21,893:INFO:Preloading libraries
2025-03-16 14:11:21,893:INFO:Set up data.
2025-03-16 14:11:21,897:INFO:Set up index.
2025-03-16 14:11:21,995:INFO:Initializing predict_model()
2025-03-16 14:11:21,995:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184116710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model',
                 RandomForestRegressor(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002615EF562A0>)
2025-03-16 14:11:21,995:INFO:Checking exceptions
2025-03-16 14:11:21,995:INFO:Preloading libraries
2025-03-16 14:11:21,995:INFO:Set up data.
2025-03-16 14:11:21,998:INFO:Set up index.
2025-03-16 14:11:22,097:INFO:Initializing load_model()
2025-03-16 14:11:22,097:INFO:load_model(model_name=../eng_psu_hatyai/main/dt_model_eng, platform=None, authentication=None, verbose=True)
2025-03-16 14:11:22,233:INFO:Initializing predict_model()
2025-03-16 14:11:22,233:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261778578D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:22,233:INFO:Checking exceptions
2025-03-16 14:11:22,233:INFO:Preloading libraries
2025-03-16 14:11:22,233:INFO:Set up data.
2025-03-16 14:11:22,244:INFO:Set up index.
2025-03-16 14:11:22,336:INFO:Initializing predict_model()
2025-03-16 14:11:22,336:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261825B8690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:22,336:INFO:Checking exceptions
2025-03-16 14:11:22,336:INFO:Preloading libraries
2025-03-16 14:11:22,336:INFO:Set up data.
2025-03-16 14:11:22,342:INFO:Set up index.
2025-03-16 14:11:22,427:INFO:Initializing predict_model()
2025-03-16 14:11:22,427:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184171350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:22,427:INFO:Checking exceptions
2025-03-16 14:11:22,427:INFO:Preloading libraries
2025-03-16 14:11:22,429:INFO:Set up data.
2025-03-16 14:11:22,434:INFO:Set up index.
2025-03-16 14:11:22,514:INFO:Initializing predict_model()
2025-03-16 14:11:22,514:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261821C8350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:22,514:INFO:Checking exceptions
2025-03-16 14:11:22,514:INFO:Preloading libraries
2025-03-16 14:11:22,514:INFO:Set up data.
2025-03-16 14:11:22,519:INFO:Set up index.
2025-03-16 14:11:22,604:INFO:Initializing predict_model()
2025-03-16 14:11:22,604:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840069D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:22,604:INFO:Checking exceptions
2025-03-16 14:11:22,604:INFO:Preloading libraries
2025-03-16 14:11:22,604:INFO:Set up data.
2025-03-16 14:11:22,608:INFO:Set up index.
2025-03-16 14:11:22,686:INFO:Initializing predict_model()
2025-03-16 14:11:22,688:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618402C790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:22,688:INFO:Checking exceptions
2025-03-16 14:11:22,688:INFO:Preloading libraries
2025-03-16 14:11:22,688:INFO:Set up data.
2025-03-16 14:11:22,692:INFO:Set up index.
2025-03-16 14:11:22,774:INFO:Initializing predict_model()
2025-03-16 14:11:22,774:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181ACD950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:22,775:INFO:Checking exceptions
2025-03-16 14:11:22,775:INFO:Preloading libraries
2025-03-16 14:11:22,775:INFO:Set up data.
2025-03-16 14:11:22,780:INFO:Set up index.
2025-03-16 14:11:22,857:INFO:Initializing predict_model()
2025-03-16 14:11:22,857:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DC890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:22,857:INFO:Checking exceptions
2025-03-16 14:11:22,857:INFO:Preloading libraries
2025-03-16 14:11:22,857:INFO:Set up data.
2025-03-16 14:11:22,864:INFO:Set up index.
2025-03-16 14:11:22,955:INFO:Initializing predict_model()
2025-03-16 14:11:22,955:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DF1C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:22,955:INFO:Checking exceptions
2025-03-16 14:11:22,955:INFO:Preloading libraries
2025-03-16 14:11:22,955:INFO:Set up data.
2025-03-16 14:11:22,960:INFO:Set up index.
2025-03-16 14:11:23,044:INFO:Initializing predict_model()
2025-03-16 14:11:23,046:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DD4D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:23,046:INFO:Checking exceptions
2025-03-16 14:11:23,046:INFO:Preloading libraries
2025-03-16 14:11:23,046:INFO:Set up data.
2025-03-16 14:11:23,050:INFO:Set up index.
2025-03-16 14:11:23,133:INFO:Initializing predict_model()
2025-03-16 14:11:23,133:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DADC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:23,133:INFO:Checking exceptions
2025-03-16 14:11:23,133:INFO:Preloading libraries
2025-03-16 14:11:23,133:INFO:Set up data.
2025-03-16 14:11:23,139:INFO:Set up index.
2025-03-16 14:11:23,222:INFO:Initializing predict_model()
2025-03-16 14:11:23,222:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184007590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:23,222:INFO:Checking exceptions
2025-03-16 14:11:23,222:INFO:Preloading libraries
2025-03-16 14:11:23,222:INFO:Set up data.
2025-03-16 14:11:23,227:INFO:Set up index.
2025-03-16 14:11:23,309:INFO:Initializing predict_model()
2025-03-16 14:11:23,309:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182718A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:23,309:INFO:Checking exceptions
2025-03-16 14:11:23,310:INFO:Preloading libraries
2025-03-16 14:11:23,310:INFO:Set up data.
2025-03-16 14:11:23,314:INFO:Set up index.
2025-03-16 14:11:23,393:INFO:Initializing predict_model()
2025-03-16 14:11:23,393:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002615FC1D910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:23,393:INFO:Checking exceptions
2025-03-16 14:11:23,393:INFO:Preloading libraries
2025-03-16 14:11:23,393:INFO:Set up data.
2025-03-16 14:11:23,397:INFO:Set up index.
2025-03-16 14:11:23,483:INFO:Initializing predict_model()
2025-03-16 14:11:23,483:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DE8B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:23,483:INFO:Checking exceptions
2025-03-16 14:11:23,483:INFO:Preloading libraries
2025-03-16 14:11:23,483:INFO:Set up data.
2025-03-16 14:11:23,487:INFO:Set up index.
2025-03-16 14:11:23,580:INFO:Initializing predict_model()
2025-03-16 14:11:23,580:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DC890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:23,580:INFO:Checking exceptions
2025-03-16 14:11:23,580:INFO:Preloading libraries
2025-03-16 14:11:23,581:INFO:Set up data.
2025-03-16 14:11:23,587:INFO:Set up index.
2025-03-16 14:11:23,669:INFO:Initializing predict_model()
2025-03-16 14:11:23,671:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182E93190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:23,671:INFO:Checking exceptions
2025-03-16 14:11:23,671:INFO:Preloading libraries
2025-03-16 14:11:23,671:INFO:Set up data.
2025-03-16 14:11:23,675:INFO:Set up index.
2025-03-16 14:11:23,756:INFO:Initializing predict_model()
2025-03-16 14:11:23,756:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261841CB8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:23,756:INFO:Checking exceptions
2025-03-16 14:11:23,756:INFO:Preloading libraries
2025-03-16 14:11:23,756:INFO:Set up data.
2025-03-16 14:11:23,761:INFO:Set up index.
2025-03-16 14:11:23,843:INFO:Initializing predict_model()
2025-03-16 14:11:23,843:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DFA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:23,843:INFO:Checking exceptions
2025-03-16 14:11:23,843:INFO:Preloading libraries
2025-03-16 14:11:23,844:INFO:Set up data.
2025-03-16 14:11:23,848:INFO:Set up index.
2025-03-16 14:11:23,928:INFO:Initializing predict_model()
2025-03-16 14:11:23,928:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184170B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:23,928:INFO:Checking exceptions
2025-03-16 14:11:23,928:INFO:Preloading libraries
2025-03-16 14:11:23,928:INFO:Set up data.
2025-03-16 14:11:23,935:INFO:Set up index.
2025-03-16 14:11:24,017:INFO:Initializing predict_model()
2025-03-16 14:11:24,017:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182A5E490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:24,017:INFO:Checking exceptions
2025-03-16 14:11:24,017:INFO:Preloading libraries
2025-03-16 14:11:24,017:INFO:Set up data.
2025-03-16 14:11:24,023:INFO:Set up index.
2025-03-16 14:11:24,118:INFO:Initializing predict_model()
2025-03-16 14:11:24,118:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181D00E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:24,118:INFO:Checking exceptions
2025-03-16 14:11:24,118:INFO:Preloading libraries
2025-03-16 14:11:24,118:INFO:Set up data.
2025-03-16 14:11:24,123:INFO:Set up index.
2025-03-16 14:11:24,209:INFO:Initializing predict_model()
2025-03-16 14:11:24,209:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184162E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:24,209:INFO:Checking exceptions
2025-03-16 14:11:24,209:INFO:Preloading libraries
2025-03-16 14:11:24,209:INFO:Set up data.
2025-03-16 14:11:24,216:INFO:Set up index.
2025-03-16 14:11:24,296:INFO:Initializing predict_model()
2025-03-16 14:11:24,296:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618261DED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:24,296:INFO:Checking exceptions
2025-03-16 14:11:24,296:INFO:Preloading libraries
2025-03-16 14:11:24,298:INFO:Set up data.
2025-03-16 14:11:24,302:INFO:Set up index.
2025-03-16 14:11:24,378:INFO:Initializing predict_model()
2025-03-16 14:11:24,378:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DEAB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:24,378:INFO:Checking exceptions
2025-03-16 14:11:24,378:INFO:Preloading libraries
2025-03-16 14:11:24,378:INFO:Set up data.
2025-03-16 14:11:24,384:INFO:Set up index.
2025-03-16 14:11:24,464:INFO:Initializing predict_model()
2025-03-16 14:11:24,464:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261821C8390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:24,464:INFO:Checking exceptions
2025-03-16 14:11:24,464:INFO:Preloading libraries
2025-03-16 14:11:24,464:INFO:Set up data.
2025-03-16 14:11:24,468:INFO:Set up index.
2025-03-16 14:11:24,554:INFO:Initializing predict_model()
2025-03-16 14:11:24,554:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DD0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:24,554:INFO:Checking exceptions
2025-03-16 14:11:24,554:INFO:Preloading libraries
2025-03-16 14:11:24,554:INFO:Set up data.
2025-03-16 14:11:24,559:INFO:Set up index.
2025-03-16 14:11:24,653:INFO:Initializing predict_model()
2025-03-16 14:11:24,653:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261841BCC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:24,653:INFO:Checking exceptions
2025-03-16 14:11:24,653:INFO:Preloading libraries
2025-03-16 14:11:24,653:INFO:Set up data.
2025-03-16 14:11:24,658:INFO:Set up index.
2025-03-16 14:11:24,745:INFO:Initializing predict_model()
2025-03-16 14:11:24,745:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618261DED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:24,745:INFO:Checking exceptions
2025-03-16 14:11:24,745:INFO:Preloading libraries
2025-03-16 14:11:24,745:INFO:Set up data.
2025-03-16 14:11:24,750:INFO:Set up index.
2025-03-16 14:11:24,861:INFO:Initializing predict_model()
2025-03-16 14:11:24,861:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184172C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:24,861:INFO:Checking exceptions
2025-03-16 14:11:24,861:INFO:Preloading libraries
2025-03-16 14:11:24,861:INFO:Set up data.
2025-03-16 14:11:24,867:INFO:Set up index.
2025-03-16 14:11:24,950:INFO:Initializing predict_model()
2025-03-16 14:11:24,950:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182130A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:24,950:INFO:Checking exceptions
2025-03-16 14:11:24,950:INFO:Preloading libraries
2025-03-16 14:11:24,950:INFO:Set up data.
2025-03-16 14:11:24,955:INFO:Set up index.
2025-03-16 14:11:25,046:INFO:Initializing predict_model()
2025-03-16 14:11:25,046:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182718A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:25,046:INFO:Checking exceptions
2025-03-16 14:11:25,046:INFO:Preloading libraries
2025-03-16 14:11:25,048:INFO:Set up data.
2025-03-16 14:11:25,052:INFO:Set up index.
2025-03-16 14:11:25,152:INFO:Initializing predict_model()
2025-03-16 14:11:25,153:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182218790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:25,153:INFO:Checking exceptions
2025-03-16 14:11:25,153:INFO:Preloading libraries
2025-03-16 14:11:25,153:INFO:Set up data.
2025-03-16 14:11:25,157:INFO:Set up index.
2025-03-16 14:11:25,239:INFO:Initializing predict_model()
2025-03-16 14:11:25,239:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184113C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:25,239:INFO:Checking exceptions
2025-03-16 14:11:25,239:INFO:Preloading libraries
2025-03-16 14:11:25,239:INFO:Set up data.
2025-03-16 14:11:25,245:INFO:Set up index.
2025-03-16 14:11:25,330:INFO:Initializing predict_model()
2025-03-16 14:11:25,330:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F07210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:25,330:INFO:Checking exceptions
2025-03-16 14:11:25,330:INFO:Preloading libraries
2025-03-16 14:11:25,330:INFO:Set up data.
2025-03-16 14:11:25,335:INFO:Set up index.
2025-03-16 14:11:25,416:INFO:Initializing predict_model()
2025-03-16 14:11:25,416:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184023C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:25,416:INFO:Checking exceptions
2025-03-16 14:11:25,416:INFO:Preloading libraries
2025-03-16 14:11:25,416:INFO:Set up data.
2025-03-16 14:11:25,424:INFO:Set up index.
2025-03-16 14:11:25,513:INFO:Initializing predict_model()
2025-03-16 14:11:25,513:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DB0F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:25,513:INFO:Checking exceptions
2025-03-16 14:11:25,513:INFO:Preloading libraries
2025-03-16 14:11:25,513:INFO:Set up data.
2025-03-16 14:11:25,519:INFO:Set up index.
2025-03-16 14:11:25,616:INFO:Initializing predict_model()
2025-03-16 14:11:25,616:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184171010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:25,616:INFO:Checking exceptions
2025-03-16 14:11:25,617:INFO:Preloading libraries
2025-03-16 14:11:25,617:INFO:Set up data.
2025-03-16 14:11:25,624:INFO:Set up index.
2025-03-16 14:11:25,720:INFO:Initializing predict_model()
2025-03-16 14:11:25,720:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261775EF2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:25,720:INFO:Checking exceptions
2025-03-16 14:11:25,720:INFO:Preloading libraries
2025-03-16 14:11:25,721:INFO:Set up data.
2025-03-16 14:11:25,729:INFO:Set up index.
2025-03-16 14:11:25,810:INFO:Initializing predict_model()
2025-03-16 14:11:25,810:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261841718D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:25,810:INFO:Checking exceptions
2025-03-16 14:11:25,810:INFO:Preloading libraries
2025-03-16 14:11:25,812:INFO:Set up data.
2025-03-16 14:11:25,817:INFO:Set up index.
2025-03-16 14:11:25,894:INFO:Initializing predict_model()
2025-03-16 14:11:25,894:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182A5D710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:25,894:INFO:Checking exceptions
2025-03-16 14:11:25,896:INFO:Preloading libraries
2025-03-16 14:11:25,896:INFO:Set up data.
2025-03-16 14:11:25,900:INFO:Set up index.
2025-03-16 14:11:25,991:INFO:Initializing predict_model()
2025-03-16 14:11:25,991:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840B9C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:25,991:INFO:Checking exceptions
2025-03-16 14:11:25,991:INFO:Preloading libraries
2025-03-16 14:11:25,991:INFO:Set up data.
2025-03-16 14:11:25,997:INFO:Set up index.
2025-03-16 14:11:26,083:INFO:Initializing predict_model()
2025-03-16 14:11:26,083:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618261DED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:26,083:INFO:Checking exceptions
2025-03-16 14:11:26,083:INFO:Preloading libraries
2025-03-16 14:11:26,084:INFO:Set up data.
2025-03-16 14:11:26,093:INFO:Set up index.
2025-03-16 14:11:26,179:INFO:Initializing predict_model()
2025-03-16 14:11:26,179:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182130A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:26,179:INFO:Checking exceptions
2025-03-16 14:11:26,179:INFO:Preloading libraries
2025-03-16 14:11:26,179:INFO:Set up data.
2025-03-16 14:11:26,183:INFO:Set up index.
2025-03-16 14:11:26,264:INFO:Initializing predict_model()
2025-03-16 14:11:26,264:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED0E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:26,264:INFO:Checking exceptions
2025-03-16 14:11:26,264:INFO:Preloading libraries
2025-03-16 14:11:26,264:INFO:Set up data.
2025-03-16 14:11:26,269:INFO:Set up index.
2025-03-16 14:11:26,360:INFO:Initializing predict_model()
2025-03-16 14:11:26,362:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DD0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:26,362:INFO:Checking exceptions
2025-03-16 14:11:26,362:INFO:Preloading libraries
2025-03-16 14:11:26,362:INFO:Set up data.
2025-03-16 14:11:26,367:INFO:Set up index.
2025-03-16 14:11:26,453:INFO:Initializing predict_model()
2025-03-16 14:11:26,453:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182ED8510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:26,453:INFO:Checking exceptions
2025-03-16 14:11:26,453:INFO:Preloading libraries
2025-03-16 14:11:26,453:INFO:Set up data.
2025-03-16 14:11:26,458:INFO:Set up index.
2025-03-16 14:11:26,539:INFO:Initializing predict_model()
2025-03-16 14:11:26,539:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181A0E010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:26,539:INFO:Checking exceptions
2025-03-16 14:11:26,539:INFO:Preloading libraries
2025-03-16 14:11:26,539:INFO:Set up data.
2025-03-16 14:11:26,545:INFO:Set up index.
2025-03-16 14:11:26,627:INFO:Initializing predict_model()
2025-03-16 14:11:26,627:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DD4D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:26,627:INFO:Checking exceptions
2025-03-16 14:11:26,627:INFO:Preloading libraries
2025-03-16 14:11:26,627:INFO:Set up data.
2025-03-16 14:11:26,633:INFO:Set up index.
2025-03-16 14:11:26,713:INFO:Initializing predict_model()
2025-03-16 14:11:26,713:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618402D390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:26,713:INFO:Checking exceptions
2025-03-16 14:11:26,713:INFO:Preloading libraries
2025-03-16 14:11:26,715:INFO:Set up data.
2025-03-16 14:11:26,719:INFO:Set up index.
2025-03-16 14:11:26,803:INFO:Initializing predict_model()
2025-03-16 14:11:26,803:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184020250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:26,803:INFO:Checking exceptions
2025-03-16 14:11:26,803:INFO:Preloading libraries
2025-03-16 14:11:26,803:INFO:Set up data.
2025-03-16 14:11:26,808:INFO:Set up index.
2025-03-16 14:11:26,889:INFO:Initializing predict_model()
2025-03-16 14:11:26,889:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823F8490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:26,889:INFO:Checking exceptions
2025-03-16 14:11:26,889:INFO:Preloading libraries
2025-03-16 14:11:26,890:INFO:Set up data.
2025-03-16 14:11:26,895:INFO:Set up index.
2025-03-16 14:11:26,978:INFO:Initializing predict_model()
2025-03-16 14:11:26,978:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618261DED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:26,978:INFO:Checking exceptions
2025-03-16 14:11:26,978:INFO:Preloading libraries
2025-03-16 14:11:26,978:INFO:Set up data.
2025-03-16 14:11:26,982:INFO:Set up index.
2025-03-16 14:11:27,062:INFO:Initializing predict_model()
2025-03-16 14:11:27,062:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261824150D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:27,062:INFO:Checking exceptions
2025-03-16 14:11:27,062:INFO:Preloading libraries
2025-03-16 14:11:27,062:INFO:Set up data.
2025-03-16 14:11:27,067:INFO:Set up index.
2025-03-16 14:11:27,158:INFO:Initializing predict_model()
2025-03-16 14:11:27,158:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EBB190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:27,158:INFO:Checking exceptions
2025-03-16 14:11:27,158:INFO:Preloading libraries
2025-03-16 14:11:27,158:INFO:Set up data.
2025-03-16 14:11:27,164:INFO:Set up index.
2025-03-16 14:11:27,243:INFO:Initializing predict_model()
2025-03-16 14:11:27,243:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184116750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:27,243:INFO:Checking exceptions
2025-03-16 14:11:27,243:INFO:Preloading libraries
2025-03-16 14:11:27,243:INFO:Set up data.
2025-03-16 14:11:27,247:INFO:Set up index.
2025-03-16 14:11:27,330:INFO:Initializing predict_model()
2025-03-16 14:11:27,330:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182F05FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:27,330:INFO:Checking exceptions
2025-03-16 14:11:27,330:INFO:Preloading libraries
2025-03-16 14:11:27,330:INFO:Set up data.
2025-03-16 14:11:27,337:INFO:Set up index.
2025-03-16 14:11:27,419:INFO:Initializing predict_model()
2025-03-16 14:11:27,419:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DEA450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:27,419:INFO:Checking exceptions
2025-03-16 14:11:27,419:INFO:Preloading libraries
2025-03-16 14:11:27,419:INFO:Set up data.
2025-03-16 14:11:27,425:INFO:Set up index.
2025-03-16 14:11:27,527:INFO:Initializing predict_model()
2025-03-16 14:11:27,527:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026177DADC50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:27,527:INFO:Checking exceptions
2025-03-16 14:11:27,527:INFO:Preloading libraries
2025-03-16 14:11:27,527:INFO:Set up data.
2025-03-16 14:11:27,533:INFO:Set up index.
2025-03-16 14:11:27,627:INFO:Initializing predict_model()
2025-03-16 14:11:27,627:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182381C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:27,627:INFO:Checking exceptions
2025-03-16 14:11:27,627:INFO:Preloading libraries
2025-03-16 14:11:27,627:INFO:Set up data.
2025-03-16 14:11:27,634:INFO:Set up index.
2025-03-16 14:11:27,720:INFO:Initializing predict_model()
2025-03-16 14:11:27,720:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EFB0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:27,720:INFO:Checking exceptions
2025-03-16 14:11:27,720:INFO:Preloading libraries
2025-03-16 14:11:27,720:INFO:Set up data.
2025-03-16 14:11:27,725:INFO:Set up index.
2025-03-16 14:11:27,809:INFO:Initializing predict_model()
2025-03-16 14:11:27,810:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840C8350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:27,810:INFO:Checking exceptions
2025-03-16 14:11:27,810:INFO:Preloading libraries
2025-03-16 14:11:27,810:INFO:Set up data.
2025-03-16 14:11:27,815:INFO:Set up index.
2025-03-16 14:11:27,895:INFO:Initializing predict_model()
2025-03-16 14:11:27,896:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182A5F250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:27,896:INFO:Checking exceptions
2025-03-16 14:11:27,896:INFO:Preloading libraries
2025-03-16 14:11:27,896:INFO:Set up data.
2025-03-16 14:11:27,901:INFO:Set up index.
2025-03-16 14:11:27,979:INFO:Initializing predict_model()
2025-03-16 14:11:27,981:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840DE150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:27,981:INFO:Checking exceptions
2025-03-16 14:11:27,981:INFO:Preloading libraries
2025-03-16 14:11:27,981:INFO:Set up data.
2025-03-16 14:11:27,985:INFO:Set up index.
2025-03-16 14:11:28,063:INFO:Initializing predict_model()
2025-03-16 14:11:28,063:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182A5E950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:28,063:INFO:Checking exceptions
2025-03-16 14:11:28,063:INFO:Preloading libraries
2025-03-16 14:11:28,063:INFO:Set up data.
2025-03-16 14:11:28,069:INFO:Set up index.
2025-03-16 14:11:28,159:INFO:Initializing predict_model()
2025-03-16 14:11:28,160:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261841722D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:28,160:INFO:Checking exceptions
2025-03-16 14:11:28,160:INFO:Preloading libraries
2025-03-16 14:11:28,160:INFO:Set up data.
2025-03-16 14:11:28,165:INFO:Set up index.
2025-03-16 14:11:28,250:INFO:Initializing predict_model()
2025-03-16 14:11:28,250:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002615EE3D690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:28,250:INFO:Checking exceptions
2025-03-16 14:11:28,250:INFO:Preloading libraries
2025-03-16 14:11:28,250:INFO:Set up data.
2025-03-16 14:11:28,254:INFO:Set up index.
2025-03-16 14:11:28,336:INFO:Initializing predict_model()
2025-03-16 14:11:28,336:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181CD1250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:28,336:INFO:Checking exceptions
2025-03-16 14:11:28,336:INFO:Preloading libraries
2025-03-16 14:11:28,337:INFO:Set up data.
2025-03-16 14:11:28,343:INFO:Set up index.
2025-03-16 14:11:28,428:INFO:Initializing predict_model()
2025-03-16 14:11:28,428:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261775EF2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:28,428:INFO:Checking exceptions
2025-03-16 14:11:28,428:INFO:Preloading libraries
2025-03-16 14:11:28,428:INFO:Set up data.
2025-03-16 14:11:28,434:INFO:Set up index.
2025-03-16 14:11:28,519:INFO:Initializing predict_model()
2025-03-16 14:11:28,519:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840079D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:28,520:INFO:Checking exceptions
2025-03-16 14:11:28,520:INFO:Preloading libraries
2025-03-16 14:11:28,520:INFO:Set up data.
2025-03-16 14:11:28,530:INFO:Set up index.
2025-03-16 14:11:28,618:INFO:Initializing predict_model()
2025-03-16 14:11:28,618:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618419E4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:28,618:INFO:Checking exceptions
2025-03-16 14:11:28,618:INFO:Preloading libraries
2025-03-16 14:11:28,618:INFO:Set up data.
2025-03-16 14:11:28,625:INFO:Set up index.
2025-03-16 14:11:28,710:INFO:Initializing predict_model()
2025-03-16 14:11:28,710:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840C8B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:28,710:INFO:Checking exceptions
2025-03-16 14:11:28,710:INFO:Preloading libraries
2025-03-16 14:11:28,710:INFO:Set up data.
2025-03-16 14:11:28,717:INFO:Set up index.
2025-03-16 14:11:28,798:INFO:Initializing predict_model()
2025-03-16 14:11:28,798:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184117110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:28,798:INFO:Checking exceptions
2025-03-16 14:11:28,798:INFO:Preloading libraries
2025-03-16 14:11:28,798:INFO:Set up data.
2025-03-16 14:11:28,805:INFO:Set up index.
2025-03-16 14:11:28,890:INFO:Initializing predict_model()
2025-03-16 14:11:28,890:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026184111190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:28,890:INFO:Checking exceptions
2025-03-16 14:11:28,891:INFO:Preloading libraries
2025-03-16 14:11:28,891:INFO:Set up data.
2025-03-16 14:11:28,897:INFO:Set up index.
2025-03-16 14:11:28,980:INFO:Initializing predict_model()
2025-03-16 14:11:28,980:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026181ACDA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:28,980:INFO:Checking exceptions
2025-03-16 14:11:28,980:INFO:Preloading libraries
2025-03-16 14:11:28,980:INFO:Set up data.
2025-03-16 14:11:28,986:INFO:Set up index.
2025-03-16 14:11:29,072:INFO:Initializing predict_model()
2025-03-16 14:11:29,072:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618227DB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:29,072:INFO:Checking exceptions
2025-03-16 14:11:29,072:INFO:Preloading libraries
2025-03-16 14:11:29,072:INFO:Set up data.
2025-03-16 14:11:29,078:INFO:Set up index.
2025-03-16 14:11:29,169:INFO:Initializing predict_model()
2025-03-16 14:11:29,169:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618227DA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:29,170:INFO:Checking exceptions
2025-03-16 14:11:29,170:INFO:Preloading libraries
2025-03-16 14:11:29,170:INFO:Set up data.
2025-03-16 14:11:29,177:INFO:Set up index.
2025-03-16 14:11:29,271:INFO:Initializing predict_model()
2025-03-16 14:11:29,271:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002615F2BC410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:29,271:INFO:Checking exceptions
2025-03-16 14:11:29,271:INFO:Preloading libraries
2025-03-16 14:11:29,271:INFO:Set up data.
2025-03-16 14:11:29,277:INFO:Set up index.
2025-03-16 14:11:29,370:INFO:Initializing predict_model()
2025-03-16 14:11:29,370:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618402D110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:29,370:INFO:Checking exceptions
2025-03-16 14:11:29,370:INFO:Preloading libraries
2025-03-16 14:11:29,370:INFO:Set up data.
2025-03-16 14:11:29,377:INFO:Set up index.
2025-03-16 14:11:29,468:INFO:Initializing predict_model()
2025-03-16 14:11:29,468:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261823F8490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:29,468:INFO:Checking exceptions
2025-03-16 14:11:29,468:INFO:Preloading libraries
2025-03-16 14:11:29,468:INFO:Set up data.
2025-03-16 14:11:29,474:INFO:Set up index.
2025-03-16 14:11:29,567:INFO:Initializing predict_model()
2025-03-16 14:11:29,567:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002617FDA7810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:29,567:INFO:Checking exceptions
2025-03-16 14:11:29,568:INFO:Preloading libraries
2025-03-16 14:11:29,568:INFO:Set up data.
2025-03-16 14:11:29,575:INFO:Set up index.
2025-03-16 14:11:29,668:INFO:Initializing predict_model()
2025-03-16 14:11:29,668:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182B8EE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:29,668:INFO:Checking exceptions
2025-03-16 14:11:29,668:INFO:Preloading libraries
2025-03-16 14:11:29,668:INFO:Set up data.
2025-03-16 14:11:29,675:INFO:Set up index.
2025-03-16 14:11:29,767:INFO:Initializing predict_model()
2025-03-16 14:11:29,767:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EF8FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:29,767:INFO:Checking exceptions
2025-03-16 14:11:29,767:INFO:Preloading libraries
2025-03-16 14:11:29,767:INFO:Set up data.
2025-03-16 14:11:29,774:INFO:Set up index.
2025-03-16 14:11:29,863:INFO:Initializing predict_model()
2025-03-16 14:11:29,863:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618402C850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:29,863:INFO:Checking exceptions
2025-03-16 14:11:29,863:INFO:Preloading libraries
2025-03-16 14:11:29,863:INFO:Set up data.
2025-03-16 14:11:29,870:INFO:Set up index.
2025-03-16 14:11:29,963:INFO:Initializing predict_model()
2025-03-16 14:11:29,963:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182EF9090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:29,963:INFO:Checking exceptions
2025-03-16 14:11:29,963:INFO:Preloading libraries
2025-03-16 14:11:29,963:INFO:Set up data.
2025-03-16 14:11:29,968:INFO:Set up index.
2025-03-16 14:11:30,062:INFO:Initializing predict_model()
2025-03-16 14:11:30,062:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000002618402C790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:30,062:INFO:Checking exceptions
2025-03-16 14:11:30,062:INFO:Preloading libraries
2025-03-16 14:11:30,062:INFO:Set up data.
2025-03-16 14:11:30,068:INFO:Set up index.
2025-03-16 14:11:30,151:INFO:Initializing predict_model()
2025-03-16 14:11:30,151:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000261840079D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DA8E0>)
2025-03-16 14:11:30,151:INFO:Checking exceptions
2025-03-16 14:11:30,151:INFO:Preloading libraries
2025-03-16 14:11:30,151:INFO:Set up data.
2025-03-16 14:11:30,156:INFO:Set up index.
2025-03-16 14:11:30,277:INFO:Initializing predict_model()
2025-03-16 14:11:30,277:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x0000026182146750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000261840DBC40>)
2025-03-16 14:11:30,277:INFO:Checking exceptions
2025-03-16 14:11:30,277:INFO:Preloading libraries
2025-03-16 14:11:30,279:INFO:Set up data.
2025-03-16 14:11:30,284:INFO:Set up index.
2025-03-16 15:10:20,228:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 15:10:20,228:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 15:10:20,228:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 15:10:20,228:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-16 15:10:20,750:INFO:Initializing load_model()
2025-03-16 15:10:20,750:INFO:load_model(model_name=../eng_psu_hatyai/main/model_surat/dt_jsps01_temp_model, platform=None, authentication=None, verbose=True)
2025-03-16 15:11:07,462:INFO:Initializing load_model()
2025-03-16 15:11:07,462:INFO:load_model(model_name=../eng_psu_hatyai/main/dt_jsps01_temp_model, platform=None, authentication=None, verbose=True)
2025-03-16 15:12:56,003:INFO:Initializing load_model()
2025-03-16 15:12:56,003:INFO:load_model(model_name=../Surat/main/dt_jsps01_temp_model, platform=None, authentication=None, verbose=True)
2025-03-16 15:12:56,136:INFO:Initializing predict_model()
2025-03-16 15:12:56,136:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E544D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:12:56,136:INFO:Checking exceptions
2025-03-16 15:12:56,136:INFO:Preloading libraries
2025-03-16 15:12:56,136:INFO:Set up data.
2025-03-16 15:12:56,140:INFO:Set up index.
2025-03-16 15:12:56,266:INFO:Initializing predict_model()
2025-03-16 15:12:56,266:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E32790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D5872E0>)
2025-03-16 15:12:56,266:INFO:Checking exceptions
2025-03-16 15:12:56,266:INFO:Preloading libraries
2025-03-16 15:12:56,266:INFO:Set up data.
2025-03-16 15:12:56,269:INFO:Set up index.
2025-03-16 15:12:56,379:INFO:Initializing predict_model()
2025-03-16 15:12:56,379:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E1C250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D5871A0>)
2025-03-16 15:12:56,379:INFO:Checking exceptions
2025-03-16 15:12:56,379:INFO:Preloading libraries
2025-03-16 15:12:56,379:INFO:Set up data.
2025-03-16 15:12:56,383:INFO:Set up index.
2025-03-16 15:12:56,487:INFO:Initializing predict_model()
2025-03-16 15:12:56,487:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B211250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:12:56,487:INFO:Checking exceptions
2025-03-16 15:12:56,487:INFO:Preloading libraries
2025-03-16 15:12:56,487:INFO:Set up data.
2025-03-16 15:12:56,492:INFO:Set up index.
2025-03-16 15:12:56,604:INFO:Initializing predict_model()
2025-03-16 15:12:56,604:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B04ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D587CE0>)
2025-03-16 15:12:56,604:INFO:Checking exceptions
2025-03-16 15:12:56,604:INFO:Preloading libraries
2025-03-16 15:12:56,604:INFO:Set up data.
2025-03-16 15:12:56,607:INFO:Set up index.
2025-03-16 15:12:56,715:INFO:Initializing predict_model()
2025-03-16 15:12:56,715:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E05BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D586480>)
2025-03-16 15:12:56,715:INFO:Checking exceptions
2025-03-16 15:12:56,715:INFO:Preloading libraries
2025-03-16 15:12:56,715:INFO:Set up data.
2025-03-16 15:12:56,717:INFO:Set up index.
2025-03-16 15:12:56,833:INFO:Initializing predict_model()
2025-03-16 15:12:56,833:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E078D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D586AC0>)
2025-03-16 15:12:56,833:INFO:Checking exceptions
2025-03-16 15:12:56,833:INFO:Preloading libraries
2025-03-16 15:12:56,834:INFO:Set up data.
2025-03-16 15:12:56,838:INFO:Set up index.
2025-03-16 15:12:56,954:INFO:Initializing predict_model()
2025-03-16 15:12:56,954:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3DE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D5871A0>)
2025-03-16 15:12:56,954:INFO:Checking exceptions
2025-03-16 15:12:56,954:INFO:Preloading libraries
2025-03-16 15:12:56,954:INFO:Set up data.
2025-03-16 15:12:56,957:INFO:Set up index.
2025-03-16 15:12:57,064:INFO:Initializing predict_model()
2025-03-16 15:12:57,064:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0CBF8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D5872E0>)
2025-03-16 15:12:57,064:INFO:Checking exceptions
2025-03-16 15:12:57,064:INFO:Preloading libraries
2025-03-16 15:12:57,064:INFO:Set up data.
2025-03-16 15:12:57,068:INFO:Set up index.
2025-03-16 15:12:57,173:INFO:Initializing predict_model()
2025-03-16 15:12:57,173:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D169ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D587CE0>)
2025-03-16 15:12:57,173:INFO:Checking exceptions
2025-03-16 15:12:57,173:INFO:Preloading libraries
2025-03-16 15:12:57,173:INFO:Set up data.
2025-03-16 15:12:57,176:INFO:Set up index.
2025-03-16 15:12:57,289:INFO:Initializing predict_model()
2025-03-16 15:12:57,289:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B04ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D120>)
2025-03-16 15:12:57,289:INFO:Checking exceptions
2025-03-16 15:12:57,289:INFO:Preloading libraries
2025-03-16 15:12:57,289:INFO:Set up data.
2025-03-16 15:12:57,293:INFO:Set up index.
2025-03-16 15:12:57,398:INFO:Initializing predict_model()
2025-03-16 15:12:57,398:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3C690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D586480>)
2025-03-16 15:12:57,398:INFO:Checking exceptions
2025-03-16 15:12:57,398:INFO:Preloading libraries
2025-03-16 15:12:57,398:INFO:Set up data.
2025-03-16 15:12:57,401:INFO:Set up index.
2025-03-16 15:12:57,503:INFO:Initializing predict_model()
2025-03-16 15:12:57,503:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AE2B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:57,503:INFO:Checking exceptions
2025-03-16 15:12:57,503:INFO:Preloading libraries
2025-03-16 15:12:57,505:INFO:Set up data.
2025-03-16 15:12:57,507:INFO:Set up index.
2025-03-16 15:12:57,616:INFO:Initializing predict_model()
2025-03-16 15:12:57,616:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED87F7550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:12:57,616:INFO:Checking exceptions
2025-03-16 15:12:57,616:INFO:Preloading libraries
2025-03-16 15:12:57,616:INFO:Set up data.
2025-03-16 15:12:57,619:INFO:Set up index.
2025-03-16 15:12:57,723:INFO:Initializing predict_model()
2025-03-16 15:12:57,723:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B23BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:57,723:INFO:Checking exceptions
2025-03-16 15:12:57,723:INFO:Preloading libraries
2025-03-16 15:12:57,723:INFO:Set up data.
2025-03-16 15:12:57,726:INFO:Set up index.
2025-03-16 15:12:57,830:INFO:Initializing predict_model()
2025-03-16 15:12:57,831:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0CBF8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED6FDE340>)
2025-03-16 15:12:57,831:INFO:Checking exceptions
2025-03-16 15:12:57,831:INFO:Preloading libraries
2025-03-16 15:12:57,831:INFO:Set up data.
2025-03-16 15:12:57,834:INFO:Set up index.
2025-03-16 15:12:57,934:INFO:Initializing predict_model()
2025-03-16 15:12:57,934:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8ACF0950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:57,934:INFO:Checking exceptions
2025-03-16 15:12:57,934:INFO:Preloading libraries
2025-03-16 15:12:57,934:INFO:Set up data.
2025-03-16 15:12:57,939:INFO:Set up index.
2025-03-16 15:12:58,042:INFO:Initializing predict_model()
2025-03-16 15:12:58,042:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B04850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:12:58,042:INFO:Checking exceptions
2025-03-16 15:12:58,042:INFO:Preloading libraries
2025-03-16 15:12:58,042:INFO:Set up data.
2025-03-16 15:12:58,045:INFO:Set up index.
2025-03-16 15:12:58,159:INFO:Initializing predict_model()
2025-03-16 15:12:58,159:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B07790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:58,160:INFO:Checking exceptions
2025-03-16 15:12:58,160:INFO:Preloading libraries
2025-03-16 15:12:58,160:INFO:Set up data.
2025-03-16 15:12:58,164:INFO:Set up index.
2025-03-16 15:12:58,264:INFO:Initializing predict_model()
2025-03-16 15:12:58,264:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DD5C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED6FDE340>)
2025-03-16 15:12:58,264:INFO:Checking exceptions
2025-03-16 15:12:58,264:INFO:Preloading libraries
2025-03-16 15:12:58,264:INFO:Set up data.
2025-03-16 15:12:58,267:INFO:Set up index.
2025-03-16 15:12:58,377:INFO:Initializing predict_model()
2025-03-16 15:12:58,377:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E06F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:58,379:INFO:Checking exceptions
2025-03-16 15:12:58,379:INFO:Preloading libraries
2025-03-16 15:12:58,379:INFO:Set up data.
2025-03-16 15:12:58,382:INFO:Set up index.
2025-03-16 15:12:58,495:INFO:Initializing predict_model()
2025-03-16 15:12:58,495:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED87F7550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:12:58,495:INFO:Checking exceptions
2025-03-16 15:12:58,495:INFO:Preloading libraries
2025-03-16 15:12:58,495:INFO:Set up data.
2025-03-16 15:12:58,498:INFO:Set up index.
2025-03-16 15:12:58,614:INFO:Initializing predict_model()
2025-03-16 15:12:58,614:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DD72D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:58,614:INFO:Checking exceptions
2025-03-16 15:12:58,614:INFO:Preloading libraries
2025-03-16 15:12:58,614:INFO:Set up data.
2025-03-16 15:12:58,616:INFO:Set up index.
2025-03-16 15:12:58,716:INFO:Initializing predict_model()
2025-03-16 15:12:58,716:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E05B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED6FDE340>)
2025-03-16 15:12:58,716:INFO:Checking exceptions
2025-03-16 15:12:58,716:INFO:Preloading libraries
2025-03-16 15:12:58,716:INFO:Set up data.
2025-03-16 15:12:58,719:INFO:Set up index.
2025-03-16 15:12:58,823:INFO:Initializing predict_model()
2025-03-16 15:12:58,823:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CADE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:58,823:INFO:Checking exceptions
2025-03-16 15:12:58,823:INFO:Preloading libraries
2025-03-16 15:12:58,823:INFO:Set up data.
2025-03-16 15:12:58,825:INFO:Set up index.
2025-03-16 15:12:58,931:INFO:Initializing predict_model()
2025-03-16 15:12:58,931:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3DAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:12:58,931:INFO:Checking exceptions
2025-03-16 15:12:58,931:INFO:Preloading libraries
2025-03-16 15:12:58,931:INFO:Set up data.
2025-03-16 15:12:58,934:INFO:Set up index.
2025-03-16 15:12:59,035:INFO:Initializing predict_model()
2025-03-16 15:12:59,035:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B04ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:59,035:INFO:Checking exceptions
2025-03-16 15:12:59,035:INFO:Preloading libraries
2025-03-16 15:12:59,036:INFO:Set up data.
2025-03-16 15:12:59,039:INFO:Set up index.
2025-03-16 15:12:59,149:INFO:Initializing predict_model()
2025-03-16 15:12:59,149:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B8A010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED6FDE340>)
2025-03-16 15:12:59,149:INFO:Checking exceptions
2025-03-16 15:12:59,149:INFO:Preloading libraries
2025-03-16 15:12:59,149:INFO:Set up data.
2025-03-16 15:12:59,153:INFO:Set up index.
2025-03-16 15:12:59,261:INFO:Initializing predict_model()
2025-03-16 15:12:59,261:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AE0B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:59,261:INFO:Checking exceptions
2025-03-16 15:12:59,261:INFO:Preloading libraries
2025-03-16 15:12:59,261:INFO:Set up data.
2025-03-16 15:12:59,264:INFO:Set up index.
2025-03-16 15:12:59,368:INFO:Initializing predict_model()
2025-03-16 15:12:59,368:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B5A1A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:12:59,368:INFO:Checking exceptions
2025-03-16 15:12:59,368:INFO:Preloading libraries
2025-03-16 15:12:59,368:INFO:Set up data.
2025-03-16 15:12:59,373:INFO:Set up index.
2025-03-16 15:12:59,475:INFO:Initializing predict_model()
2025-03-16 15:12:59,475:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B04ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:59,475:INFO:Checking exceptions
2025-03-16 15:12:59,475:INFO:Preloading libraries
2025-03-16 15:12:59,475:INFO:Set up data.
2025-03-16 15:12:59,478:INFO:Set up index.
2025-03-16 15:12:59,580:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\2377297925.py:32: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  data_compare = pd.concat([data_compare, predict_test_1], axis=0)

2025-03-16 15:12:59,583:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\2377297925.py:44: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  result = pd.concat([result, predict_test_1], axis=0)

2025-03-16 15:12:59,590:INFO:Initializing predict_model()
2025-03-16 15:12:59,590:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AFB090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D120>)
2025-03-16 15:12:59,590:INFO:Checking exceptions
2025-03-16 15:12:59,590:INFO:Preloading libraries
2025-03-16 15:12:59,590:INFO:Set up data.
2025-03-16 15:12:59,593:INFO:Set up index.
2025-03-16 15:12:59,694:INFO:Initializing predict_model()
2025-03-16 15:12:59,694:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E4A210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:12:59,694:INFO:Checking exceptions
2025-03-16 15:12:59,694:INFO:Preloading libraries
2025-03-16 15:12:59,694:INFO:Set up data.
2025-03-16 15:12:59,697:INFO:Set up index.
2025-03-16 15:12:59,797:INFO:Initializing predict_model()
2025-03-16 15:12:59,797:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ADBE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:12:59,797:INFO:Checking exceptions
2025-03-16 15:12:59,797:INFO:Preloading libraries
2025-03-16 15:12:59,797:INFO:Set up data.
2025-03-16 15:12:59,798:INFO:Set up index.
2025-03-16 15:12:59,912:INFO:Initializing predict_model()
2025-03-16 15:12:59,912:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B8A550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0D1EFC0>)
2025-03-16 15:12:59,912:INFO:Checking exceptions
2025-03-16 15:12:59,912:INFO:Preloading libraries
2025-03-16 15:12:59,912:INFO:Set up data.
2025-03-16 15:12:59,916:INFO:Set up index.
2025-03-16 15:13:00,035:INFO:Initializing predict_model()
2025-03-16 15:13:00,035:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D169D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:00,035:INFO:Checking exceptions
2025-03-16 15:13:00,035:INFO:Preloading libraries
2025-03-16 15:13:00,035:INFO:Set up data.
2025-03-16 15:13:00,038:INFO:Set up index.
2025-03-16 15:13:00,154:INFO:Initializing predict_model()
2025-03-16 15:13:00,154:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED801E250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:13:00,154:INFO:Checking exceptions
2025-03-16 15:13:00,154:INFO:Preloading libraries
2025-03-16 15:13:00,154:INFO:Set up data.
2025-03-16 15:13:00,157:INFO:Set up index.
2025-03-16 15:13:00,263:INFO:Initializing predict_model()
2025-03-16 15:13:00,263:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B04ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:00,263:INFO:Checking exceptions
2025-03-16 15:13:00,263:INFO:Preloading libraries
2025-03-16 15:13:00,264:INFO:Set up data.
2025-03-16 15:13:00,265:INFO:Set up index.
2025-03-16 15:13:00,385:INFO:Initializing predict_model()
2025-03-16 15:13:00,385:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90C92090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0D1EFC0>)
2025-03-16 15:13:00,385:INFO:Checking exceptions
2025-03-16 15:13:00,385:INFO:Preloading libraries
2025-03-16 15:13:00,385:INFO:Set up data.
2025-03-16 15:13:00,387:INFO:Set up index.
2025-03-16 15:13:00,498:INFO:Initializing predict_model()
2025-03-16 15:13:00,498:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E1FB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:00,498:INFO:Checking exceptions
2025-03-16 15:13:00,498:INFO:Preloading libraries
2025-03-16 15:13:00,498:INFO:Set up data.
2025-03-16 15:13:00,501:INFO:Set up index.
2025-03-16 15:13:00,609:INFO:Initializing predict_model()
2025-03-16 15:13:00,609:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A13D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:13:00,609:INFO:Checking exceptions
2025-03-16 15:13:00,609:INFO:Preloading libraries
2025-03-16 15:13:00,609:INFO:Set up data.
2025-03-16 15:13:00,612:INFO:Set up index.
2025-03-16 15:13:00,738:INFO:Initializing predict_model()
2025-03-16 15:13:00,738:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8A9AE5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:00,738:INFO:Checking exceptions
2025-03-16 15:13:00,738:INFO:Preloading libraries
2025-03-16 15:13:00,738:INFO:Set up data.
2025-03-16 15:13:00,741:INFO:Set up index.
2025-03-16 15:13:00,846:INFO:Initializing predict_model()
2025-03-16 15:13:00,846:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0D1EFC0>)
2025-03-16 15:13:00,846:INFO:Checking exceptions
2025-03-16 15:13:00,846:INFO:Preloading libraries
2025-03-16 15:13:00,846:INFO:Set up data.
2025-03-16 15:13:00,849:INFO:Set up index.
2025-03-16 15:13:00,953:INFO:Initializing predict_model()
2025-03-16 15:13:00,953:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B5BA450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:00,953:INFO:Checking exceptions
2025-03-16 15:13:00,953:INFO:Preloading libraries
2025-03-16 15:13:00,953:INFO:Set up data.
2025-03-16 15:13:00,955:INFO:Set up index.
2025-03-16 15:13:01,059:INFO:Initializing predict_model()
2025-03-16 15:13:01,059:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B5EFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:13:01,059:INFO:Checking exceptions
2025-03-16 15:13:01,059:INFO:Preloading libraries
2025-03-16 15:13:01,059:INFO:Set up data.
2025-03-16 15:13:01,062:INFO:Set up index.
2025-03-16 15:13:01,165:INFO:Initializing predict_model()
2025-03-16 15:13:01,165:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DD7090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:01,165:INFO:Checking exceptions
2025-03-16 15:13:01,165:INFO:Preloading libraries
2025-03-16 15:13:01,165:INFO:Set up data.
2025-03-16 15:13:01,168:INFO:Set up index.
2025-03-16 15:13:01,269:INFO:Initializing predict_model()
2025-03-16 15:13:01,269:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E49ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0D1EFC0>)
2025-03-16 15:13:01,269:INFO:Checking exceptions
2025-03-16 15:13:01,269:INFO:Preloading libraries
2025-03-16 15:13:01,269:INFO:Set up data.
2025-03-16 15:13:01,272:INFO:Set up index.
2025-03-16 15:13:01,376:INFO:Initializing predict_model()
2025-03-16 15:13:01,376:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3DD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:01,376:INFO:Checking exceptions
2025-03-16 15:13:01,376:INFO:Preloading libraries
2025-03-16 15:13:01,376:INFO:Set up data.
2025-03-16 15:13:01,379:INFO:Set up index.
2025-03-16 15:13:01,480:INFO:Initializing predict_model()
2025-03-16 15:13:01,480:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AFB090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:13:01,480:INFO:Checking exceptions
2025-03-16 15:13:01,480:INFO:Preloading libraries
2025-03-16 15:13:01,482:INFO:Set up data.
2025-03-16 15:13:01,484:INFO:Set up index.
2025-03-16 15:13:01,587:INFO:Initializing predict_model()
2025-03-16 15:13:01,589:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B1A110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:01,589:INFO:Checking exceptions
2025-03-16 15:13:01,589:INFO:Preloading libraries
2025-03-16 15:13:01,589:INFO:Set up data.
2025-03-16 15:13:01,592:INFO:Set up index.
2025-03-16 15:13:01,698:INFO:Initializing predict_model()
2025-03-16 15:13:01,698:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3C590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0D1EFC0>)
2025-03-16 15:13:01,698:INFO:Checking exceptions
2025-03-16 15:13:01,698:INFO:Preloading libraries
2025-03-16 15:13:01,698:INFO:Set up data.
2025-03-16 15:13:01,701:INFO:Set up index.
2025-03-16 15:13:01,816:INFO:Initializing predict_model()
2025-03-16 15:13:01,816:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED87F7550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:01,816:INFO:Checking exceptions
2025-03-16 15:13:01,816:INFO:Preloading libraries
2025-03-16 15:13:01,816:INFO:Set up data.
2025-03-16 15:13:01,819:INFO:Set up index.
2025-03-16 15:13:01,927:INFO:Initializing predict_model()
2025-03-16 15:13:01,927:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B8AF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:13:01,927:INFO:Checking exceptions
2025-03-16 15:13:01,927:INFO:Preloading libraries
2025-03-16 15:13:01,927:INFO:Set up data.
2025-03-16 15:13:01,930:INFO:Set up index.
2025-03-16 15:13:02,037:INFO:Initializing predict_model()
2025-03-16 15:13:02,037:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E1E750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:02,037:INFO:Checking exceptions
2025-03-16 15:13:02,037:INFO:Preloading libraries
2025-03-16 15:13:02,037:INFO:Set up data.
2025-03-16 15:13:02,040:INFO:Set up index.
2025-03-16 15:13:02,147:INFO:Initializing predict_model()
2025-03-16 15:13:02,149:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B18250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0D1EFC0>)
2025-03-16 15:13:02,149:INFO:Checking exceptions
2025-03-16 15:13:02,149:INFO:Preloading libraries
2025-03-16 15:13:02,149:INFO:Set up data.
2025-03-16 15:13:02,150:INFO:Set up index.
2025-03-16 15:13:02,263:INFO:Initializing predict_model()
2025-03-16 15:13:02,263:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B642010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:02,263:INFO:Checking exceptions
2025-03-16 15:13:02,264:INFO:Preloading libraries
2025-03-16 15:13:02,264:INFO:Set up data.
2025-03-16 15:13:02,269:INFO:Set up index.
2025-03-16 15:13:02,388:INFO:Initializing predict_model()
2025-03-16 15:13:02,388:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CADE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED807F2E0>)
2025-03-16 15:13:02,388:INFO:Checking exceptions
2025-03-16 15:13:02,388:INFO:Preloading libraries
2025-03-16 15:13:02,388:INFO:Set up data.
2025-03-16 15:13:02,391:INFO:Set up index.
2025-03-16 15:13:02,490:INFO:Initializing predict_model()
2025-03-16 15:13:02,490:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DA27F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:02,490:INFO:Checking exceptions
2025-03-16 15:13:02,490:INFO:Preloading libraries
2025-03-16 15:13:02,490:INFO:Set up data.
2025-03-16 15:13:02,493:INFO:Set up index.
2025-03-16 15:13:02,599:INFO:Initializing predict_model()
2025-03-16 15:13:02,599:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ADBB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0D1EFC0>)
2025-03-16 15:13:02,599:INFO:Checking exceptions
2025-03-16 15:13:02,599:INFO:Preloading libraries
2025-03-16 15:13:02,601:INFO:Set up data.
2025-03-16 15:13:02,603:INFO:Set up index.
2025-03-16 15:13:02,704:INFO:Initializing predict_model()
2025-03-16 15:13:02,704:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E4D3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4D4E0>)
2025-03-16 15:13:02,704:INFO:Checking exceptions
2025-03-16 15:13:02,704:INFO:Preloading libraries
2025-03-16 15:13:02,704:INFO:Set up data.
2025-03-16 15:13:02,707:INFO:Set up index.
2025-03-16 15:13:02,830:INFO:Initializing load_model()
2025-03-16 15:13:02,830:INFO:load_model(model_name=../Surat/main/br_humi_u_temp_model_jsps01, platform=None, authentication=None, verbose=True)
2025-03-16 15:13:02,923:INFO:Initializing predict_model()
2025-03-16 15:13:02,923:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D0548D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:02,923:INFO:Checking exceptions
2025-03-16 15:13:02,924:INFO:Preloading libraries
2025-03-16 15:13:02,924:INFO:Set up data.
2025-03-16 15:13:02,927:INFO:Set up index.
2025-03-16 15:13:03,038:INFO:Initializing predict_model()
2025-03-16 15:13:03,038:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8F70F990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:03,038:INFO:Checking exceptions
2025-03-16 15:13:03,038:INFO:Preloading libraries
2025-03-16 15:13:03,038:INFO:Set up data.
2025-03-16 15:13:03,041:INFO:Set up index.
2025-03-16 15:13:03,146:INFO:Initializing predict_model()
2025-03-16 15:13:03,146:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AE44750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:03,146:INFO:Checking exceptions
2025-03-16 15:13:03,146:INFO:Preloading libraries
2025-03-16 15:13:03,146:INFO:Set up data.
2025-03-16 15:13:03,150:INFO:Set up index.
2025-03-16 15:13:03,254:INFO:Initializing predict_model()
2025-03-16 15:13:03,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CDCC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:03,254:INFO:Checking exceptions
2025-03-16 15:13:03,254:INFO:Preloading libraries
2025-03-16 15:13:03,254:INFO:Set up data.
2025-03-16 15:13:03,259:INFO:Set up index.
2025-03-16 15:13:03,368:INFO:Initializing predict_model()
2025-03-16 15:13:03,368:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBF8F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:03,368:INFO:Checking exceptions
2025-03-16 15:13:03,368:INFO:Preloading libraries
2025-03-16 15:13:03,368:INFO:Set up data.
2025-03-16 15:13:03,373:INFO:Set up index.
2025-03-16 15:13:03,476:INFO:Initializing predict_model()
2025-03-16 15:13:03,476:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB7DD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:03,478:INFO:Checking exceptions
2025-03-16 15:13:03,478:INFO:Preloading libraries
2025-03-16 15:13:03,478:INFO:Set up data.
2025-03-16 15:13:03,481:INFO:Set up index.
2025-03-16 15:13:03,581:INFO:Initializing predict_model()
2025-03-16 15:13:03,581:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B03AF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:03,581:INFO:Checking exceptions
2025-03-16 15:13:03,581:INFO:Preloading libraries
2025-03-16 15:13:03,581:INFO:Set up data.
2025-03-16 15:13:03,584:INFO:Set up index.
2025-03-16 15:13:03,687:INFO:Initializing predict_model()
2025-03-16 15:13:03,687:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AB53510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:03,687:INFO:Checking exceptions
2025-03-16 15:13:03,687:INFO:Preloading libraries
2025-03-16 15:13:03,687:INFO:Set up data.
2025-03-16 15:13:03,690:INFO:Set up index.
2025-03-16 15:13:03,812:INFO:Initializing predict_model()
2025-03-16 15:13:03,812:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB82310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:03,812:INFO:Checking exceptions
2025-03-16 15:13:03,812:INFO:Preloading libraries
2025-03-16 15:13:03,813:INFO:Set up data.
2025-03-16 15:13:03,818:INFO:Set up index.
2025-03-16 15:13:03,934:INFO:Initializing predict_model()
2025-03-16 15:13:03,934:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8FE3C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:03,934:INFO:Checking exceptions
2025-03-16 15:13:03,934:INFO:Preloading libraries
2025-03-16 15:13:03,934:INFO:Set up data.
2025-03-16 15:13:03,937:INFO:Set up index.
2025-03-16 15:13:04,040:INFO:Initializing predict_model()
2025-03-16 15:13:04,040:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D169CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:04,040:INFO:Checking exceptions
2025-03-16 15:13:04,040:INFO:Preloading libraries
2025-03-16 15:13:04,041:INFO:Set up data.
2025-03-16 15:13:04,044:INFO:Set up index.
2025-03-16 15:13:04,149:INFO:Initializing predict_model()
2025-03-16 15:13:04,149:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED896C250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:04,149:INFO:Checking exceptions
2025-03-16 15:13:04,149:INFO:Preloading libraries
2025-03-16 15:13:04,149:INFO:Set up data.
2025-03-16 15:13:04,154:INFO:Set up index.
2025-03-16 15:13:04,263:INFO:Initializing predict_model()
2025-03-16 15:13:04,263:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8F70E410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:04,263:INFO:Checking exceptions
2025-03-16 15:13:04,263:INFO:Preloading libraries
2025-03-16 15:13:04,263:INFO:Set up data.
2025-03-16 15:13:04,266:INFO:Set up index.
2025-03-16 15:13:04,374:INFO:Initializing predict_model()
2025-03-16 15:13:04,374:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B4FF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:04,374:INFO:Checking exceptions
2025-03-16 15:13:04,374:INFO:Preloading libraries
2025-03-16 15:13:04,374:INFO:Set up data.
2025-03-16 15:13:04,378:INFO:Set up index.
2025-03-16 15:13:04,479:INFO:Initializing predict_model()
2025-03-16 15:13:04,481:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AFA390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:04,481:INFO:Checking exceptions
2025-03-16 15:13:04,481:INFO:Preloading libraries
2025-03-16 15:13:04,481:INFO:Set up data.
2025-03-16 15:13:04,485:INFO:Set up index.
2025-03-16 15:13:04,604:INFO:Initializing predict_model()
2025-03-16 15:13:04,604:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8F70E590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:04,604:INFO:Checking exceptions
2025-03-16 15:13:04,604:INFO:Preloading libraries
2025-03-16 15:13:04,604:INFO:Set up data.
2025-03-16 15:13:04,610:INFO:Set up index.
2025-03-16 15:13:04,718:INFO:Initializing predict_model()
2025-03-16 15:13:04,718:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB84850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:04,718:INFO:Checking exceptions
2025-03-16 15:13:04,718:INFO:Preloading libraries
2025-03-16 15:13:04,718:INFO:Set up data.
2025-03-16 15:13:04,721:INFO:Set up index.
2025-03-16 15:13:04,827:INFO:Initializing predict_model()
2025-03-16 15:13:04,827:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D169A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:04,827:INFO:Checking exceptions
2025-03-16 15:13:04,827:INFO:Preloading libraries
2025-03-16 15:13:04,827:INFO:Set up data.
2025-03-16 15:13:04,830:INFO:Set up index.
2025-03-16 15:13:04,936:INFO:Initializing predict_model()
2025-03-16 15:13:04,936:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D066F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:04,936:INFO:Checking exceptions
2025-03-16 15:13:04,936:INFO:Preloading libraries
2025-03-16 15:13:04,936:INFO:Set up data.
2025-03-16 15:13:04,940:INFO:Set up index.
2025-03-16 15:13:05,044:INFO:Initializing predict_model()
2025-03-16 15:13:05,044:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BA5F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:05,044:INFO:Checking exceptions
2025-03-16 15:13:05,044:INFO:Preloading libraries
2025-03-16 15:13:05,044:INFO:Set up data.
2025-03-16 15:13:05,047:INFO:Set up index.
2025-03-16 15:13:05,154:INFO:Initializing predict_model()
2025-03-16 15:13:05,154:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBE3990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:05,154:INFO:Checking exceptions
2025-03-16 15:13:05,154:INFO:Preloading libraries
2025-03-16 15:13:05,154:INFO:Set up data.
2025-03-16 15:13:05,157:INFO:Set up index.
2025-03-16 15:13:05,271:INFO:Initializing predict_model()
2025-03-16 15:13:05,271:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B5C110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:05,271:INFO:Checking exceptions
2025-03-16 15:13:05,271:INFO:Preloading libraries
2025-03-16 15:13:05,271:INFO:Set up data.
2025-03-16 15:13:05,274:INFO:Set up index.
2025-03-16 15:13:05,376:INFO:Initializing predict_model()
2025-03-16 15:13:05,376:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0CBF8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:05,376:INFO:Checking exceptions
2025-03-16 15:13:05,376:INFO:Preloading libraries
2025-03-16 15:13:05,376:INFO:Set up data.
2025-03-16 15:13:05,379:INFO:Set up index.
2025-03-16 15:13:05,490:INFO:Initializing predict_model()
2025-03-16 15:13:05,490:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BBCA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:05,490:INFO:Checking exceptions
2025-03-16 15:13:05,490:INFO:Preloading libraries
2025-03-16 15:13:05,490:INFO:Set up data.
2025-03-16 15:13:05,493:INFO:Set up index.
2025-03-16 15:13:05,596:INFO:Initializing predict_model()
2025-03-16 15:13:05,596:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D95AF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:05,596:INFO:Checking exceptions
2025-03-16 15:13:05,596:INFO:Preloading libraries
2025-03-16 15:13:05,598:INFO:Set up data.
2025-03-16 15:13:05,599:INFO:Set up index.
2025-03-16 15:13:05,702:INFO:Initializing predict_model()
2025-03-16 15:13:05,702:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F4C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:05,702:INFO:Checking exceptions
2025-03-16 15:13:05,702:INFO:Preloading libraries
2025-03-16 15:13:05,702:INFO:Set up data.
2025-03-16 15:13:05,704:INFO:Set up index.
2025-03-16 15:13:05,808:INFO:Initializing predict_model()
2025-03-16 15:13:05,808:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CCFDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:05,808:INFO:Checking exceptions
2025-03-16 15:13:05,808:INFO:Preloading libraries
2025-03-16 15:13:05,808:INFO:Set up data.
2025-03-16 15:13:05,813:INFO:Set up index.
2025-03-16 15:13:05,921:INFO:Initializing predict_model()
2025-03-16 15:13:05,921:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CA1810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:05,921:INFO:Checking exceptions
2025-03-16 15:13:05,922:INFO:Preloading libraries
2025-03-16 15:13:05,922:INFO:Set up data.
2025-03-16 15:13:05,925:INFO:Set up index.
2025-03-16 15:13:06,032:INFO:Initializing predict_model()
2025-03-16 15:13:06,032:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D05E3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:06,032:INFO:Checking exceptions
2025-03-16 15:13:06,032:INFO:Preloading libraries
2025-03-16 15:13:06,032:INFO:Set up data.
2025-03-16 15:13:06,036:INFO:Set up index.
2025-03-16 15:13:06,146:INFO:Initializing predict_model()
2025-03-16 15:13:06,146:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBF5AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:06,146:INFO:Checking exceptions
2025-03-16 15:13:06,146:INFO:Preloading libraries
2025-03-16 15:13:06,147:INFO:Set up data.
2025-03-16 15:13:06,150:INFO:Set up index.
2025-03-16 15:13:06,255:INFO:Initializing predict_model()
2025-03-16 15:13:06,255:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B36450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:06,255:INFO:Checking exceptions
2025-03-16 15:13:06,255:INFO:Preloading libraries
2025-03-16 15:13:06,255:INFO:Set up data.
2025-03-16 15:13:06,258:INFO:Set up index.
2025-03-16 15:13:06,357:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\1056844038.py:44: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  result_humi = pd.concat([result_humi, predict_test_1], axis=0)

2025-03-16 15:13:06,364:INFO:Initializing predict_model()
2025-03-16 15:13:06,364:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B7D010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:06,364:INFO:Checking exceptions
2025-03-16 15:13:06,364:INFO:Preloading libraries
2025-03-16 15:13:06,364:INFO:Set up data.
2025-03-16 15:13:06,368:INFO:Set up index.
2025-03-16 15:13:06,472:INFO:Initializing predict_model()
2025-03-16 15:13:06,472:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CC5950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:06,472:INFO:Checking exceptions
2025-03-16 15:13:06,472:INFO:Preloading libraries
2025-03-16 15:13:06,472:INFO:Set up data.
2025-03-16 15:13:06,475:INFO:Set up index.
2025-03-16 15:13:06,581:INFO:Initializing predict_model()
2025-03-16 15:13:06,581:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A30990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:06,581:INFO:Checking exceptions
2025-03-16 15:13:06,581:INFO:Preloading libraries
2025-03-16 15:13:06,581:INFO:Set up data.
2025-03-16 15:13:06,583:INFO:Set up index.
2025-03-16 15:13:06,689:INFO:Initializing predict_model()
2025-03-16 15:13:06,689:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CDFD90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:06,689:INFO:Checking exceptions
2025-03-16 15:13:06,689:INFO:Preloading libraries
2025-03-16 15:13:06,689:INFO:Set up data.
2025-03-16 15:13:06,692:INFO:Set up index.
2025-03-16 15:13:06,813:INFO:Initializing predict_model()
2025-03-16 15:13:06,813:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D064650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:06,813:INFO:Checking exceptions
2025-03-16 15:13:06,813:INFO:Preloading libraries
2025-03-16 15:13:06,813:INFO:Set up data.
2025-03-16 15:13:06,816:INFO:Set up index.
2025-03-16 15:13:06,918:INFO:Initializing predict_model()
2025-03-16 15:13:06,918:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E55410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:06,918:INFO:Checking exceptions
2025-03-16 15:13:06,918:INFO:Preloading libraries
2025-03-16 15:13:06,918:INFO:Set up data.
2025-03-16 15:13:06,921:INFO:Set up index.
2025-03-16 15:13:07,038:INFO:Initializing predict_model()
2025-03-16 15:13:07,038:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B5BA090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:07,038:INFO:Checking exceptions
2025-03-16 15:13:07,038:INFO:Preloading libraries
2025-03-16 15:13:07,038:INFO:Set up data.
2025-03-16 15:13:07,042:INFO:Set up index.
2025-03-16 15:13:07,145:INFO:Initializing predict_model()
2025-03-16 15:13:07,145:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBF7F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:07,145:INFO:Checking exceptions
2025-03-16 15:13:07,145:INFO:Preloading libraries
2025-03-16 15:13:07,146:INFO:Set up data.
2025-03-16 15:13:07,147:INFO:Set up index.
2025-03-16 15:13:07,254:INFO:Initializing predict_model()
2025-03-16 15:13:07,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBF8050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:07,254:INFO:Checking exceptions
2025-03-16 15:13:07,254:INFO:Preloading libraries
2025-03-16 15:13:07,254:INFO:Set up data.
2025-03-16 15:13:07,257:INFO:Set up index.
2025-03-16 15:13:07,364:INFO:Initializing predict_model()
2025-03-16 15:13:07,364:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F3010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:07,364:INFO:Checking exceptions
2025-03-16 15:13:07,364:INFO:Preloading libraries
2025-03-16 15:13:07,364:INFO:Set up data.
2025-03-16 15:13:07,367:INFO:Set up index.
2025-03-16 15:13:07,472:INFO:Initializing predict_model()
2025-03-16 15:13:07,472:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D31F990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:07,472:INFO:Checking exceptions
2025-03-16 15:13:07,472:INFO:Preloading libraries
2025-03-16 15:13:07,472:INFO:Set up data.
2025-03-16 15:13:07,475:INFO:Set up index.
2025-03-16 15:13:07,576:INFO:Initializing predict_model()
2025-03-16 15:13:07,576:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DF7C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:07,576:INFO:Checking exceptions
2025-03-16 15:13:07,576:INFO:Preloading libraries
2025-03-16 15:13:07,576:INFO:Set up data.
2025-03-16 15:13:07,579:INFO:Set up index.
2025-03-16 15:13:07,686:INFO:Initializing predict_model()
2025-03-16 15:13:07,686:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E7A450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:07,686:INFO:Checking exceptions
2025-03-16 15:13:07,686:INFO:Preloading libraries
2025-03-16 15:13:07,686:INFO:Set up data.
2025-03-16 15:13:07,689:INFO:Set up index.
2025-03-16 15:13:07,790:INFO:Initializing predict_model()
2025-03-16 15:13:07,790:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901EDA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:07,790:INFO:Checking exceptions
2025-03-16 15:13:07,790:INFO:Preloading libraries
2025-03-16 15:13:07,790:INFO:Set up data.
2025-03-16 15:13:07,794:INFO:Set up index.
2025-03-16 15:13:07,914:INFO:Initializing predict_model()
2025-03-16 15:13:07,914:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B40F890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:07,914:INFO:Checking exceptions
2025-03-16 15:13:07,914:INFO:Preloading libraries
2025-03-16 15:13:07,914:INFO:Set up data.
2025-03-16 15:13:07,917:INFO:Set up index.
2025-03-16 15:13:08,031:INFO:Initializing predict_model()
2025-03-16 15:13:08,031:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CC7150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:08,033:INFO:Checking exceptions
2025-03-16 15:13:08,033:INFO:Preloading libraries
2025-03-16 15:13:08,033:INFO:Set up data.
2025-03-16 15:13:08,036:INFO:Set up index.
2025-03-16 15:13:08,134:INFO:Initializing predict_model()
2025-03-16 15:13:08,134:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B07950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:08,134:INFO:Checking exceptions
2025-03-16 15:13:08,134:INFO:Preloading libraries
2025-03-16 15:13:08,134:INFO:Set up data.
2025-03-16 15:13:08,137:INFO:Set up index.
2025-03-16 15:13:08,253:INFO:Initializing predict_model()
2025-03-16 15:13:08,253:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CC6890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:08,253:INFO:Checking exceptions
2025-03-16 15:13:08,253:INFO:Preloading libraries
2025-03-16 15:13:08,253:INFO:Set up data.
2025-03-16 15:13:08,257:INFO:Set up index.
2025-03-16 15:13:08,358:INFO:Initializing predict_model()
2025-03-16 15:13:08,358:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8F70F050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:08,358:INFO:Checking exceptions
2025-03-16 15:13:08,358:INFO:Preloading libraries
2025-03-16 15:13:08,358:INFO:Set up data.
2025-03-16 15:13:08,363:INFO:Set up index.
2025-03-16 15:13:08,476:INFO:Initializing predict_model()
2025-03-16 15:13:08,476:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE909FE710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:08,476:INFO:Checking exceptions
2025-03-16 15:13:08,476:INFO:Preloading libraries
2025-03-16 15:13:08,476:INFO:Set up data.
2025-03-16 15:13:08,478:INFO:Set up index.
2025-03-16 15:13:08,584:INFO:Initializing predict_model()
2025-03-16 15:13:08,584:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBF9BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:08,584:INFO:Checking exceptions
2025-03-16 15:13:08,584:INFO:Preloading libraries
2025-03-16 15:13:08,584:INFO:Set up data.
2025-03-16 15:13:08,587:INFO:Set up index.
2025-03-16 15:13:08,697:INFO:Initializing predict_model()
2025-03-16 15:13:08,698:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B730490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:08,698:INFO:Checking exceptions
2025-03-16 15:13:08,698:INFO:Preloading libraries
2025-03-16 15:13:08,698:INFO:Set up data.
2025-03-16 15:13:08,702:INFO:Set up index.
2025-03-16 15:13:08,811:INFO:Initializing predict_model()
2025-03-16 15:13:08,811:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901EEFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:08,811:INFO:Checking exceptions
2025-03-16 15:13:08,811:INFO:Preloading libraries
2025-03-16 15:13:08,812:INFO:Set up data.
2025-03-16 15:13:08,816:INFO:Set up index.
2025-03-16 15:13:08,925:INFO:Initializing predict_model()
2025-03-16 15:13:08,925:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DA24850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:08,925:INFO:Checking exceptions
2025-03-16 15:13:08,925:INFO:Preloading libraries
2025-03-16 15:13:08,925:INFO:Set up data.
2025-03-16 15:13:08,928:INFO:Set up index.
2025-03-16 15:13:09,041:INFO:Initializing predict_model()
2025-03-16 15:13:09,041:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D066FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:09,041:INFO:Checking exceptions
2025-03-16 15:13:09,041:INFO:Preloading libraries
2025-03-16 15:13:09,041:INFO:Set up data.
2025-03-16 15:13:09,043:INFO:Set up index.
2025-03-16 15:13:09,150:INFO:Initializing predict_model()
2025-03-16 15:13:09,150:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B2C6990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:09,150:INFO:Checking exceptions
2025-03-16 15:13:09,150:INFO:Preloading libraries
2025-03-16 15:13:09,150:INFO:Set up data.
2025-03-16 15:13:09,154:INFO:Set up index.
2025-03-16 15:13:09,270:INFO:Initializing predict_model()
2025-03-16 15:13:09,270:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D3286D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:09,270:INFO:Checking exceptions
2025-03-16 15:13:09,270:INFO:Preloading libraries
2025-03-16 15:13:09,272:INFO:Set up data.
2025-03-16 15:13:09,279:INFO:Set up index.
2025-03-16 15:13:09,387:INFO:Initializing predict_model()
2025-03-16 15:13:09,387:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4C180>)
2025-03-16 15:13:09,387:INFO:Checking exceptions
2025-03-16 15:13:09,387:INFO:Preloading libraries
2025-03-16 15:13:09,387:INFO:Set up data.
2025-03-16 15:13:09,390:INFO:Set up index.
2025-03-16 15:13:09,508:INFO:Initializing load_model()
2025-03-16 15:13:09,508:INFO:load_model(model_name=../Surat/main/gbr_pm_2_5_model, platform=None, authentication=None, verbose=True)
2025-03-16 15:13:09,648:INFO:Initializing predict_model()
2025-03-16 15:13:09,648:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:09,648:INFO:Checking exceptions
2025-03-16 15:13:09,648:INFO:Preloading libraries
2025-03-16 15:13:09,649:INFO:Set up data.
2025-03-16 15:13:09,654:INFO:Set up index.
2025-03-16 15:13:09,769:INFO:Initializing predict_model()
2025-03-16 15:13:09,769:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E21D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:09,769:INFO:Checking exceptions
2025-03-16 15:13:09,769:INFO:Preloading libraries
2025-03-16 15:13:09,769:INFO:Set up data.
2025-03-16 15:13:09,776:INFO:Set up index.
2025-03-16 15:13:09,886:INFO:Initializing predict_model()
2025-03-16 15:13:09,886:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B7D010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:09,886:INFO:Checking exceptions
2025-03-16 15:13:09,886:INFO:Preloading libraries
2025-03-16 15:13:09,886:INFO:Set up data.
2025-03-16 15:13:09,891:INFO:Set up index.
2025-03-16 15:13:10,016:INFO:Initializing predict_model()
2025-03-16 15:13:10,016:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A15DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:10,016:INFO:Checking exceptions
2025-03-16 15:13:10,016:INFO:Preloading libraries
2025-03-16 15:13:10,016:INFO:Set up data.
2025-03-16 15:13:10,020:INFO:Set up index.
2025-03-16 15:13:10,129:INFO:Initializing predict_model()
2025-03-16 15:13:10,129:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F4B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:10,129:INFO:Checking exceptions
2025-03-16 15:13:10,129:INFO:Preloading libraries
2025-03-16 15:13:10,129:INFO:Set up data.
2025-03-16 15:13:10,134:INFO:Set up index.
2025-03-16 15:13:10,243:INFO:Initializing predict_model()
2025-03-16 15:13:10,243:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CDFF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:10,243:INFO:Checking exceptions
2025-03-16 15:13:10,243:INFO:Preloading libraries
2025-03-16 15:13:10,243:INFO:Set up data.
2025-03-16 15:13:10,248:INFO:Set up index.
2025-03-16 15:13:10,357:INFO:Initializing predict_model()
2025-03-16 15:13:10,359:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8B89110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:10,359:INFO:Checking exceptions
2025-03-16 15:13:10,359:INFO:Preloading libraries
2025-03-16 15:13:10,359:INFO:Set up data.
2025-03-16 15:13:10,364:INFO:Set up index.
2025-03-16 15:13:10,474:INFO:Initializing predict_model()
2025-03-16 15:13:10,474:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:10,474:INFO:Checking exceptions
2025-03-16 15:13:10,474:INFO:Preloading libraries
2025-03-16 15:13:10,474:INFO:Set up data.
2025-03-16 15:13:10,480:INFO:Set up index.
2025-03-16 15:13:10,604:INFO:Initializing predict_model()
2025-03-16 15:13:10,604:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A14110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:10,604:INFO:Checking exceptions
2025-03-16 15:13:10,604:INFO:Preloading libraries
2025-03-16 15:13:10,604:INFO:Set up data.
2025-03-16 15:13:10,608:INFO:Set up index.
2025-03-16 15:13:10,723:INFO:Initializing predict_model()
2025-03-16 15:13:10,723:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CADE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:10,723:INFO:Checking exceptions
2025-03-16 15:13:10,723:INFO:Preloading libraries
2025-03-16 15:13:10,723:INFO:Set up data.
2025-03-16 15:13:10,728:INFO:Set up index.
2025-03-16 15:13:10,840:INFO:Initializing predict_model()
2025-03-16 15:13:10,842:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B44850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:10,842:INFO:Checking exceptions
2025-03-16 15:13:10,842:INFO:Preloading libraries
2025-03-16 15:13:10,842:INFO:Set up data.
2025-03-16 15:13:10,847:INFO:Set up index.
2025-03-16 15:13:10,961:INFO:Initializing predict_model()
2025-03-16 15:13:10,961:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A2D690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:10,961:INFO:Checking exceptions
2025-03-16 15:13:10,961:INFO:Preloading libraries
2025-03-16 15:13:10,961:INFO:Set up data.
2025-03-16 15:13:10,968:INFO:Set up index.
2025-03-16 15:13:11,079:INFO:Initializing predict_model()
2025-03-16 15:13:11,079:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A0E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:11,079:INFO:Checking exceptions
2025-03-16 15:13:11,079:INFO:Preloading libraries
2025-03-16 15:13:11,079:INFO:Set up data.
2025-03-16 15:13:11,084:INFO:Set up index.
2025-03-16 15:13:11,222:INFO:Initializing predict_model()
2025-03-16 15:13:11,222:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90D15B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:11,222:INFO:Checking exceptions
2025-03-16 15:13:11,222:INFO:Preloading libraries
2025-03-16 15:13:11,222:INFO:Set up data.
2025-03-16 15:13:11,226:INFO:Set up index.
2025-03-16 15:13:11,337:INFO:Initializing predict_model()
2025-03-16 15:13:11,337:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90C9BC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:11,337:INFO:Checking exceptions
2025-03-16 15:13:11,337:INFO:Preloading libraries
2025-03-16 15:13:11,337:INFO:Set up data.
2025-03-16 15:13:11,341:INFO:Set up index.
2025-03-16 15:13:11,453:INFO:Initializing predict_model()
2025-03-16 15:13:11,453:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:11,453:INFO:Checking exceptions
2025-03-16 15:13:11,453:INFO:Preloading libraries
2025-03-16 15:13:11,453:INFO:Set up data.
2025-03-16 15:13:11,459:INFO:Set up index.
2025-03-16 15:13:11,573:INFO:Initializing predict_model()
2025-03-16 15:13:11,573:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB85C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:11,573:INFO:Checking exceptions
2025-03-16 15:13:11,573:INFO:Preloading libraries
2025-03-16 15:13:11,573:INFO:Set up data.
2025-03-16 15:13:11,580:INFO:Set up index.
2025-03-16 15:13:11,690:INFO:Initializing predict_model()
2025-03-16 15:13:11,690:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBB71D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:11,690:INFO:Checking exceptions
2025-03-16 15:13:11,691:INFO:Preloading libraries
2025-03-16 15:13:11,691:INFO:Set up data.
2025-03-16 15:13:11,697:INFO:Set up index.
2025-03-16 15:13:11,805:INFO:Initializing predict_model()
2025-03-16 15:13:11,805:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DC00410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:11,805:INFO:Checking exceptions
2025-03-16 15:13:11,805:INFO:Preloading libraries
2025-03-16 15:13:11,805:INFO:Set up data.
2025-03-16 15:13:11,810:INFO:Set up index.
2025-03-16 15:13:11,921:INFO:Initializing predict_model()
2025-03-16 15:13:11,921:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AF14D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:11,921:INFO:Checking exceptions
2025-03-16 15:13:11,921:INFO:Preloading libraries
2025-03-16 15:13:11,921:INFO:Set up data.
2025-03-16 15:13:11,927:INFO:Set up index.
2025-03-16 15:13:12,036:INFO:Initializing predict_model()
2025-03-16 15:13:12,036:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D95AF10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:12,036:INFO:Checking exceptions
2025-03-16 15:13:12,036:INFO:Preloading libraries
2025-03-16 15:13:12,036:INFO:Set up data.
2025-03-16 15:13:12,040:INFO:Set up index.
2025-03-16 15:13:12,153:INFO:Initializing predict_model()
2025-03-16 15:13:12,153:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A0B5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:12,153:INFO:Checking exceptions
2025-03-16 15:13:12,153:INFO:Preloading libraries
2025-03-16 15:13:12,153:INFO:Set up data.
2025-03-16 15:13:12,159:INFO:Set up index.
2025-03-16 15:13:12,270:INFO:Initializing predict_model()
2025-03-16 15:13:12,270:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE909FF190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:12,271:INFO:Checking exceptions
2025-03-16 15:13:12,271:INFO:Preloading libraries
2025-03-16 15:13:12,271:INFO:Set up data.
2025-03-16 15:13:12,277:INFO:Set up index.
2025-03-16 15:13:12,393:INFO:Initializing predict_model()
2025-03-16 15:13:12,393:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E331D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:12,393:INFO:Checking exceptions
2025-03-16 15:13:12,393:INFO:Preloading libraries
2025-03-16 15:13:12,394:INFO:Set up data.
2025-03-16 15:13:12,398:INFO:Set up index.
2025-03-16 15:13:12,529:INFO:Initializing predict_model()
2025-03-16 15:13:12,529:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BA4D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:12,529:INFO:Checking exceptions
2025-03-16 15:13:12,529:INFO:Preloading libraries
2025-03-16 15:13:12,531:INFO:Set up data.
2025-03-16 15:13:12,536:INFO:Set up index.
2025-03-16 15:13:12,648:INFO:Initializing predict_model()
2025-03-16 15:13:12,650:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E4FE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:12,650:INFO:Checking exceptions
2025-03-16 15:13:12,650:INFO:Preloading libraries
2025-03-16 15:13:12,650:INFO:Set up data.
2025-03-16 15:13:12,655:INFO:Set up index.
2025-03-16 15:13:12,771:INFO:Initializing predict_model()
2025-03-16 15:13:12,771:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E4BDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:12,771:INFO:Checking exceptions
2025-03-16 15:13:12,771:INFO:Preloading libraries
2025-03-16 15:13:12,771:INFO:Set up data.
2025-03-16 15:13:12,781:INFO:Set up index.
2025-03-16 15:13:12,906:INFO:Initializing predict_model()
2025-03-16 15:13:12,906:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DC01210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:12,906:INFO:Checking exceptions
2025-03-16 15:13:12,906:INFO:Preloading libraries
2025-03-16 15:13:12,906:INFO:Set up data.
2025-03-16 15:13:12,913:INFO:Set up index.
2025-03-16 15:13:13,026:INFO:Initializing predict_model()
2025-03-16 15:13:13,026:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0358050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:13,026:INFO:Checking exceptions
2025-03-16 15:13:13,026:INFO:Preloading libraries
2025-03-16 15:13:13,026:INFO:Set up data.
2025-03-16 15:13:13,030:INFO:Set up index.
2025-03-16 15:13:13,138:INFO:Initializing predict_model()
2025-03-16 15:13:13,138:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CA0310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:13,138:INFO:Checking exceptions
2025-03-16 15:13:13,138:INFO:Preloading libraries
2025-03-16 15:13:13,140:INFO:Set up data.
2025-03-16 15:13:13,146:INFO:Set up index.
2025-03-16 15:13:13,259:INFO:Initializing predict_model()
2025-03-16 15:13:13,259:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B4C9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:13,259:INFO:Checking exceptions
2025-03-16 15:13:13,259:INFO:Preloading libraries
2025-03-16 15:13:13,259:INFO:Set up data.
2025-03-16 15:13:13,266:INFO:Set up index.
2025-03-16 15:13:13,373:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\107897864.py:45: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  result_pm_2_5 = pd.concat([result_pm_2_5, predict_test_1], axis=0)

2025-03-16 15:13:13,383:INFO:Initializing predict_model()
2025-03-16 15:13:13,383:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8C569D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:13,383:INFO:Checking exceptions
2025-03-16 15:13:13,384:INFO:Preloading libraries
2025-03-16 15:13:13,384:INFO:Set up data.
2025-03-16 15:13:13,388:INFO:Set up index.
2025-03-16 15:13:13,497:INFO:Initializing predict_model()
2025-03-16 15:13:13,497:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BA5F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:13,497:INFO:Checking exceptions
2025-03-16 15:13:13,497:INFO:Preloading libraries
2025-03-16 15:13:13,497:INFO:Set up data.
2025-03-16 15:13:13,502:INFO:Set up index.
2025-03-16 15:13:13,613:INFO:Initializing predict_model()
2025-03-16 15:13:13,613:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D514090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:13,613:INFO:Checking exceptions
2025-03-16 15:13:13,613:INFO:Preloading libraries
2025-03-16 15:13:13,613:INFO:Set up data.
2025-03-16 15:13:13,619:INFO:Set up index.
2025-03-16 15:13:13,728:INFO:Initializing predict_model()
2025-03-16 15:13:13,728:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E31050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:13,728:INFO:Checking exceptions
2025-03-16 15:13:13,729:INFO:Preloading libraries
2025-03-16 15:13:13,729:INFO:Set up data.
2025-03-16 15:13:13,736:INFO:Set up index.
2025-03-16 15:13:13,847:INFO:Initializing predict_model()
2025-03-16 15:13:13,849:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B06FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:13,849:INFO:Checking exceptions
2025-03-16 15:13:13,849:INFO:Preloading libraries
2025-03-16 15:13:13,849:INFO:Set up data.
2025-03-16 15:13:13,854:INFO:Set up index.
2025-03-16 15:13:13,974:INFO:Initializing predict_model()
2025-03-16 15:13:13,974:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CDFE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:13,974:INFO:Checking exceptions
2025-03-16 15:13:13,974:INFO:Preloading libraries
2025-03-16 15:13:13,974:INFO:Set up data.
2025-03-16 15:13:13,981:INFO:Set up index.
2025-03-16 15:13:14,098:INFO:Initializing predict_model()
2025-03-16 15:13:14,098:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB5F0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:14,098:INFO:Checking exceptions
2025-03-16 15:13:14,098:INFO:Preloading libraries
2025-03-16 15:13:14,098:INFO:Set up data.
2025-03-16 15:13:14,104:INFO:Set up index.
2025-03-16 15:13:14,224:INFO:Initializing predict_model()
2025-03-16 15:13:14,224:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:14,224:INFO:Checking exceptions
2025-03-16 15:13:14,224:INFO:Preloading libraries
2025-03-16 15:13:14,224:INFO:Set up data.
2025-03-16 15:13:14,229:INFO:Set up index.
2025-03-16 15:13:14,340:INFO:Initializing predict_model()
2025-03-16 15:13:14,340:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E331D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:14,340:INFO:Checking exceptions
2025-03-16 15:13:14,340:INFO:Preloading libraries
2025-03-16 15:13:14,340:INFO:Set up data.
2025-03-16 15:13:14,345:INFO:Set up index.
2025-03-16 15:13:14,469:INFO:Initializing predict_model()
2025-03-16 15:13:14,469:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:14,470:INFO:Checking exceptions
2025-03-16 15:13:14,470:INFO:Preloading libraries
2025-03-16 15:13:14,470:INFO:Set up data.
2025-03-16 15:13:14,476:INFO:Set up index.
2025-03-16 15:13:14,610:INFO:Initializing predict_model()
2025-03-16 15:13:14,610:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B87FE10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:14,610:INFO:Checking exceptions
2025-03-16 15:13:14,610:INFO:Preloading libraries
2025-03-16 15:13:14,610:INFO:Set up data.
2025-03-16 15:13:14,616:INFO:Set up index.
2025-03-16 15:13:14,726:INFO:Initializing predict_model()
2025-03-16 15:13:14,726:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E66190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:14,726:INFO:Checking exceptions
2025-03-16 15:13:14,726:INFO:Preloading libraries
2025-03-16 15:13:14,726:INFO:Set up data.
2025-03-16 15:13:14,732:INFO:Set up index.
2025-03-16 15:13:14,849:INFO:Initializing predict_model()
2025-03-16 15:13:14,849:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8A723410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:14,849:INFO:Checking exceptions
2025-03-16 15:13:14,849:INFO:Preloading libraries
2025-03-16 15:13:14,849:INFO:Set up data.
2025-03-16 15:13:14,854:INFO:Set up index.
2025-03-16 15:13:14,970:INFO:Initializing predict_model()
2025-03-16 15:13:14,970:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D95AE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:14,970:INFO:Checking exceptions
2025-03-16 15:13:14,970:INFO:Preloading libraries
2025-03-16 15:13:14,971:INFO:Set up data.
2025-03-16 15:13:14,975:INFO:Set up index.
2025-03-16 15:13:15,084:INFO:Initializing predict_model()
2025-03-16 15:13:15,084:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8ACF0950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:15,084:INFO:Checking exceptions
2025-03-16 15:13:15,084:INFO:Preloading libraries
2025-03-16 15:13:15,084:INFO:Set up data.
2025-03-16 15:13:15,090:INFO:Set up index.
2025-03-16 15:13:15,207:INFO:Initializing predict_model()
2025-03-16 15:13:15,207:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B06650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:15,207:INFO:Checking exceptions
2025-03-16 15:13:15,207:INFO:Preloading libraries
2025-03-16 15:13:15,209:INFO:Set up data.
2025-03-16 15:13:15,214:INFO:Set up index.
2025-03-16 15:13:15,329:INFO:Initializing predict_model()
2025-03-16 15:13:15,329:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A2E350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:15,329:INFO:Checking exceptions
2025-03-16 15:13:15,329:INFO:Preloading libraries
2025-03-16 15:13:15,329:INFO:Set up data.
2025-03-16 15:13:15,336:INFO:Set up index.
2025-03-16 15:13:15,449:INFO:Initializing predict_model()
2025-03-16 15:13:15,449:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E4D3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:15,449:INFO:Checking exceptions
2025-03-16 15:13:15,449:INFO:Preloading libraries
2025-03-16 15:13:15,450:INFO:Set up data.
2025-03-16 15:13:15,455:INFO:Set up index.
2025-03-16 15:13:15,573:INFO:Initializing predict_model()
2025-03-16 15:13:15,573:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E7A890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:15,573:INFO:Checking exceptions
2025-03-16 15:13:15,573:INFO:Preloading libraries
2025-03-16 15:13:15,573:INFO:Set up data.
2025-03-16 15:13:15,579:INFO:Set up index.
2025-03-16 15:13:15,689:INFO:Initializing predict_model()
2025-03-16 15:13:15,689:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D05D250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:15,689:INFO:Checking exceptions
2025-03-16 15:13:15,689:INFO:Preloading libraries
2025-03-16 15:13:15,689:INFO:Set up data.
2025-03-16 15:13:15,693:INFO:Set up index.
2025-03-16 15:13:15,814:INFO:Initializing predict_model()
2025-03-16 15:13:15,814:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BBF150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:15,814:INFO:Checking exceptions
2025-03-16 15:13:15,814:INFO:Preloading libraries
2025-03-16 15:13:15,814:INFO:Set up data.
2025-03-16 15:13:15,819:INFO:Set up index.
2025-03-16 15:13:15,939:INFO:Initializing predict_model()
2025-03-16 15:13:15,939:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B20910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:15,939:INFO:Checking exceptions
2025-03-16 15:13:15,939:INFO:Preloading libraries
2025-03-16 15:13:15,939:INFO:Set up data.
2025-03-16 15:13:15,946:INFO:Set up index.
2025-03-16 15:13:16,061:INFO:Initializing predict_model()
2025-03-16 15:13:16,061:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CA1A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:16,061:INFO:Checking exceptions
2025-03-16 15:13:16,061:INFO:Preloading libraries
2025-03-16 15:13:16,061:INFO:Set up data.
2025-03-16 15:13:16,066:INFO:Set up index.
2025-03-16 15:13:16,182:INFO:Initializing predict_model()
2025-03-16 15:13:16,182:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CF2410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:16,182:INFO:Checking exceptions
2025-03-16 15:13:16,182:INFO:Preloading libraries
2025-03-16 15:13:16,183:INFO:Set up data.
2025-03-16 15:13:16,188:INFO:Set up index.
2025-03-16 15:13:16,309:INFO:Initializing predict_model()
2025-03-16 15:13:16,309:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901EDB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:16,309:INFO:Checking exceptions
2025-03-16 15:13:16,309:INFO:Preloading libraries
2025-03-16 15:13:16,309:INFO:Set up data.
2025-03-16 15:13:16,315:INFO:Set up index.
2025-03-16 15:13:16,433:INFO:Initializing predict_model()
2025-03-16 15:13:16,433:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8024CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:16,433:INFO:Checking exceptions
2025-03-16 15:13:16,433:INFO:Preloading libraries
2025-03-16 15:13:16,434:INFO:Set up data.
2025-03-16 15:13:16,439:INFO:Set up index.
2025-03-16 15:13:16,559:INFO:Initializing predict_model()
2025-03-16 15:13:16,559:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CADE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99580>)
2025-03-16 15:13:16,559:INFO:Checking exceptions
2025-03-16 15:13:16,559:INFO:Preloading libraries
2025-03-16 15:13:16,560:INFO:Set up data.
2025-03-16 15:13:16,566:INFO:Set up index.
2025-03-16 15:14:13,116:INFO:Initializing load_model()
2025-03-16 15:14:13,116:INFO:load_model(model_name=../Surat/main/dt_jsps01_temp_model, platform=None, authentication=None, verbose=True)
2025-03-16 15:14:13,146:INFO:Initializing predict_model()
2025-03-16 15:14:13,146:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8FF5010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D586D40>)
2025-03-16 15:14:13,146:INFO:Checking exceptions
2025-03-16 15:14:13,146:INFO:Preloading libraries
2025-03-16 15:14:13,146:INFO:Set up data.
2025-03-16 15:14:13,150:INFO:Set up index.
2025-03-16 15:14:13,269:INFO:Initializing predict_model()
2025-03-16 15:14:13,269:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914D1A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDBC0>)
2025-03-16 15:14:13,269:INFO:Checking exceptions
2025-03-16 15:14:13,269:INFO:Preloading libraries
2025-03-16 15:14:13,269:INFO:Set up data.
2025-03-16 15:14:13,272:INFO:Set up index.
2025-03-16 15:14:13,378:INFO:Initializing predict_model()
2025-03-16 15:14:13,380:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ABE3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDEE0>)
2025-03-16 15:14:13,380:INFO:Checking exceptions
2025-03-16 15:14:13,380:INFO:Preloading libraries
2025-03-16 15:14:13,380:INFO:Set up data.
2025-03-16 15:14:13,383:INFO:Set up index.
2025-03-16 15:14:13,488:INFO:Initializing predict_model()
2025-03-16 15:14:13,488:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91534ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE660>)
2025-03-16 15:14:13,488:INFO:Checking exceptions
2025-03-16 15:14:13,488:INFO:Preloading libraries
2025-03-16 15:14:13,488:INFO:Set up data.
2025-03-16 15:14:13,491:INFO:Set up index.
2025-03-16 15:14:13,601:INFO:Initializing predict_model()
2025-03-16 15:14:13,601:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D322550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE700>)
2025-03-16 15:14:13,601:INFO:Checking exceptions
2025-03-16 15:14:13,601:INFO:Preloading libraries
2025-03-16 15:14:13,601:INFO:Set up data.
2025-03-16 15:14:13,605:INFO:Set up index.
2025-03-16 15:14:13,721:INFO:Initializing predict_model()
2025-03-16 15:14:13,721:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D322550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEF20>)
2025-03-16 15:14:13,721:INFO:Checking exceptions
2025-03-16 15:14:13,721:INFO:Preloading libraries
2025-03-16 15:14:13,721:INFO:Set up data.
2025-03-16 15:14:13,724:INFO:Set up index.
2025-03-16 15:14:13,833:INFO:Initializing predict_model()
2025-03-16 15:14:13,833:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B730490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEE80>)
2025-03-16 15:14:13,833:INFO:Checking exceptions
2025-03-16 15:14:13,833:INFO:Preloading libraries
2025-03-16 15:14:13,833:INFO:Set up data.
2025-03-16 15:14:13,836:INFO:Set up index.
2025-03-16 15:14:13,938:INFO:Initializing predict_model()
2025-03-16 15:14:13,938:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91544ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:13,938:INFO:Checking exceptions
2025-03-16 15:14:13,938:INFO:Preloading libraries
2025-03-16 15:14:13,938:INFO:Set up data.
2025-03-16 15:14:13,941:INFO:Set up index.
2025-03-16 15:14:14,051:INFO:Initializing predict_model()
2025-03-16 15:14:14,051:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B2CE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFD940>)
2025-03-16 15:14:14,051:INFO:Checking exceptions
2025-03-16 15:14:14,051:INFO:Preloading libraries
2025-03-16 15:14:14,051:INFO:Set up data.
2025-03-16 15:14:14,055:INFO:Set up index.
2025-03-16 15:14:14,164:INFO:Initializing predict_model()
2025-03-16 15:14:14,164:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DDBE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDE40>)
2025-03-16 15:14:14,164:INFO:Checking exceptions
2025-03-16 15:14:14,164:INFO:Preloading libraries
2025-03-16 15:14:14,165:INFO:Set up data.
2025-03-16 15:14:14,167:INFO:Set up index.
2025-03-16 15:14:14,275:INFO:Initializing predict_model()
2025-03-16 15:14:14,275:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AFA6710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEB60>)
2025-03-16 15:14:14,275:INFO:Checking exceptions
2025-03-16 15:14:14,275:INFO:Preloading libraries
2025-03-16 15:14:14,275:INFO:Set up data.
2025-03-16 15:14:14,279:INFO:Set up index.
2025-03-16 15:14:14,383:INFO:Initializing predict_model()
2025-03-16 15:14:14,383:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91545C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:14,383:INFO:Checking exceptions
2025-03-16 15:14:14,383:INFO:Preloading libraries
2025-03-16 15:14:14,383:INFO:Set up data.
2025-03-16 15:14:14,386:INFO:Set up index.
2025-03-16 15:14:14,491:INFO:Initializing predict_model()
2025-03-16 15:14:14,492:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF086A790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFD9E0>)
2025-03-16 15:14:14,492:INFO:Checking exceptions
2025-03-16 15:14:14,492:INFO:Preloading libraries
2025-03-16 15:14:14,492:INFO:Set up data.
2025-03-16 15:14:14,495:INFO:Set up index.
2025-03-16 15:14:14,600:INFO:Initializing predict_model()
2025-03-16 15:14:14,600:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914CEFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDBC0>)
2025-03-16 15:14:14,600:INFO:Checking exceptions
2025-03-16 15:14:14,600:INFO:Preloading libraries
2025-03-16 15:14:14,600:INFO:Set up data.
2025-03-16 15:14:14,603:INFO:Set up index.
2025-03-16 15:14:14,708:INFO:Initializing predict_model()
2025-03-16 15:14:14,708:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8C57A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDEE0>)
2025-03-16 15:14:14,708:INFO:Checking exceptions
2025-03-16 15:14:14,708:INFO:Preloading libraries
2025-03-16 15:14:14,708:INFO:Set up data.
2025-03-16 15:14:14,711:INFO:Set up index.
2025-03-16 15:14:14,820:INFO:Initializing predict_model()
2025-03-16 15:14:14,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8FF5010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE660>)
2025-03-16 15:14:14,820:INFO:Checking exceptions
2025-03-16 15:14:14,820:INFO:Preloading libraries
2025-03-16 15:14:14,820:INFO:Set up data.
2025-03-16 15:14:14,821:INFO:Set up index.
2025-03-16 15:14:14,930:INFO:Initializing predict_model()
2025-03-16 15:14:14,930:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914D0D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE700>)
2025-03-16 15:14:14,930:INFO:Checking exceptions
2025-03-16 15:14:14,930:INFO:Preloading libraries
2025-03-16 15:14:14,931:INFO:Set up data.
2025-03-16 15:14:14,934:INFO:Set up index.
2025-03-16 15:14:15,038:INFO:Initializing predict_model()
2025-03-16 15:14:15,040:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914C4D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEF20>)
2025-03-16 15:14:15,040:INFO:Checking exceptions
2025-03-16 15:14:15,040:INFO:Preloading libraries
2025-03-16 15:14:15,040:INFO:Set up data.
2025-03-16 15:14:15,043:INFO:Set up index.
2025-03-16 15:14:15,152:INFO:Initializing predict_model()
2025-03-16 15:14:15,152:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90F392D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEE80>)
2025-03-16 15:14:15,152:INFO:Checking exceptions
2025-03-16 15:14:15,152:INFO:Preloading libraries
2025-03-16 15:14:15,152:INFO:Set up data.
2025-03-16 15:14:15,155:INFO:Set up index.
2025-03-16 15:14:15,271:INFO:Initializing predict_model()
2025-03-16 15:14:15,271:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914C66D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:15,271:INFO:Checking exceptions
2025-03-16 15:14:15,271:INFO:Preloading libraries
2025-03-16 15:14:15,271:INFO:Set up data.
2025-03-16 15:14:15,277:INFO:Set up index.
2025-03-16 15:14:15,399:INFO:Initializing predict_model()
2025-03-16 15:14:15,399:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB5D950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFD940>)
2025-03-16 15:14:15,399:INFO:Checking exceptions
2025-03-16 15:14:15,399:INFO:Preloading libraries
2025-03-16 15:14:15,399:INFO:Set up data.
2025-03-16 15:14:15,404:INFO:Set up index.
2025-03-16 15:14:15,510:INFO:Initializing predict_model()
2025-03-16 15:14:15,510:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914D2790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDE40>)
2025-03-16 15:14:15,510:INFO:Checking exceptions
2025-03-16 15:14:15,510:INFO:Preloading libraries
2025-03-16 15:14:15,510:INFO:Set up data.
2025-03-16 15:14:15,514:INFO:Set up index.
2025-03-16 15:14:15,621:INFO:Initializing predict_model()
2025-03-16 15:14:15,621:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B5A1A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEB60>)
2025-03-16 15:14:15,621:INFO:Checking exceptions
2025-03-16 15:14:15,621:INFO:Preloading libraries
2025-03-16 15:14:15,621:INFO:Set up data.
2025-03-16 15:14:15,623:INFO:Set up index.
2025-03-16 15:14:15,728:INFO:Initializing predict_model()
2025-03-16 15:14:15,728:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D31F990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:15,728:INFO:Checking exceptions
2025-03-16 15:14:15,728:INFO:Preloading libraries
2025-03-16 15:14:15,728:INFO:Set up data.
2025-03-16 15:14:15,731:INFO:Set up index.
2025-03-16 15:14:15,841:INFO:Initializing predict_model()
2025-03-16 15:14:15,841:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8C57A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFD9E0>)
2025-03-16 15:14:15,841:INFO:Checking exceptions
2025-03-16 15:14:15,841:INFO:Preloading libraries
2025-03-16 15:14:15,841:INFO:Set up data.
2025-03-16 15:14:15,844:INFO:Set up index.
2025-03-16 15:14:15,958:INFO:Initializing predict_model()
2025-03-16 15:14:15,958:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D323850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDBC0>)
2025-03-16 15:14:15,958:INFO:Checking exceptions
2025-03-16 15:14:15,958:INFO:Preloading libraries
2025-03-16 15:14:15,958:INFO:Set up data.
2025-03-16 15:14:15,959:INFO:Set up index.
2025-03-16 15:14:16,070:INFO:Initializing predict_model()
2025-03-16 15:14:16,070:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D322950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDEE0>)
2025-03-16 15:14:16,070:INFO:Checking exceptions
2025-03-16 15:14:16,070:INFO:Preloading libraries
2025-03-16 15:14:16,070:INFO:Set up data.
2025-03-16 15:14:16,074:INFO:Set up index.
2025-03-16 15:14:16,188:INFO:Initializing predict_model()
2025-03-16 15:14:16,188:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914CDE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE660>)
2025-03-16 15:14:16,188:INFO:Checking exceptions
2025-03-16 15:14:16,188:INFO:Preloading libraries
2025-03-16 15:14:16,188:INFO:Set up data.
2025-03-16 15:14:16,192:INFO:Set up index.
2025-03-16 15:14:16,311:INFO:Initializing predict_model()
2025-03-16 15:14:16,311:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90F42650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE700>)
2025-03-16 15:14:16,311:INFO:Checking exceptions
2025-03-16 15:14:16,311:INFO:Preloading libraries
2025-03-16 15:14:16,311:INFO:Set up data.
2025-03-16 15:14:16,314:INFO:Set up index.
2025-03-16 15:14:16,420:INFO:Initializing predict_model()
2025-03-16 15:14:16,420:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914C4ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEF20>)
2025-03-16 15:14:16,420:INFO:Checking exceptions
2025-03-16 15:14:16,420:INFO:Preloading libraries
2025-03-16 15:14:16,420:INFO:Set up data.
2025-03-16 15:14:16,423:INFO:Set up index.
2025-03-16 15:14:16,530:INFO:Initializing predict_model()
2025-03-16 15:14:16,532:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91534ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEE80>)
2025-03-16 15:14:16,532:INFO:Checking exceptions
2025-03-16 15:14:16,532:INFO:Preloading libraries
2025-03-16 15:14:16,532:INFO:Set up data.
2025-03-16 15:14:16,534:INFO:Set up index.
2025-03-16 15:14:16,631:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\2377297925.py:32: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  data_compare = pd.concat([data_compare, predict_test_1], axis=0)

2025-03-16 15:14:16,635:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\2377297925.py:44: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  result = pd.concat([result, predict_test_1], axis=0)

2025-03-16 15:14:16,641:INFO:Initializing predict_model()
2025-03-16 15:14:16,641:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE909E7F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8D587EC0>)
2025-03-16 15:14:16,641:INFO:Checking exceptions
2025-03-16 15:14:16,641:INFO:Preloading libraries
2025-03-16 15:14:16,641:INFO:Set up data.
2025-03-16 15:14:16,644:INFO:Set up index.
2025-03-16 15:14:16,749:INFO:Initializing predict_model()
2025-03-16 15:14:16,749:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914CFB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE160>)
2025-03-16 15:14:16,749:INFO:Checking exceptions
2025-03-16 15:14:16,749:INFO:Preloading libraries
2025-03-16 15:14:16,749:INFO:Set up data.
2025-03-16 15:14:16,752:INFO:Set up index.
2025-03-16 15:14:16,858:INFO:Initializing predict_model()
2025-03-16 15:14:16,858:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ABFB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE700>)
2025-03-16 15:14:16,858:INFO:Checking exceptions
2025-03-16 15:14:16,858:INFO:Preloading libraries
2025-03-16 15:14:16,858:INFO:Set up data.
2025-03-16 15:14:16,861:INFO:Set up index.
2025-03-16 15:14:16,969:INFO:Initializing predict_model()
2025-03-16 15:14:16,969:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914D2390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEE80>)
2025-03-16 15:14:16,969:INFO:Checking exceptions
2025-03-16 15:14:16,969:INFO:Preloading libraries
2025-03-16 15:14:16,969:INFO:Set up data.
2025-03-16 15:14:16,972:INFO:Set up index.
2025-03-16 15:14:17,080:INFO:Initializing predict_model()
2025-03-16 15:14:17,080:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE9131DFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEB60>)
2025-03-16 15:14:17,080:INFO:Checking exceptions
2025-03-16 15:14:17,080:INFO:Preloading libraries
2025-03-16 15:14:17,080:INFO:Set up data.
2025-03-16 15:14:17,083:INFO:Set up index.
2025-03-16 15:14:17,190:INFO:Initializing predict_model()
2025-03-16 15:14:17,192:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901D8390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDE40>)
2025-03-16 15:14:17,192:INFO:Checking exceptions
2025-03-16 15:14:17,192:INFO:Preloading libraries
2025-03-16 15:14:17,192:INFO:Set up data.
2025-03-16 15:14:17,194:INFO:Set up index.
2025-03-16 15:14:17,304:INFO:Initializing predict_model()
2025-03-16 15:14:17,304:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914CE390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFD940>)
2025-03-16 15:14:17,304:INFO:Checking exceptions
2025-03-16 15:14:17,304:INFO:Preloading libraries
2025-03-16 15:14:17,304:INFO:Set up data.
2025-03-16 15:14:17,307:INFO:Set up index.
2025-03-16 15:14:17,423:INFO:Initializing predict_model()
2025-03-16 15:14:17,423:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914E2390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDBC0>)
2025-03-16 15:14:17,423:INFO:Checking exceptions
2025-03-16 15:14:17,423:INFO:Preloading libraries
2025-03-16 15:14:17,423:INFO:Set up data.
2025-03-16 15:14:17,427:INFO:Set up index.
2025-03-16 15:14:17,550:INFO:Initializing predict_model()
2025-03-16 15:14:17,551:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB60D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFD9E0>)
2025-03-16 15:14:17,551:INFO:Checking exceptions
2025-03-16 15:14:17,551:INFO:Preloading libraries
2025-03-16 15:14:17,551:INFO:Set up data.
2025-03-16 15:14:17,554:INFO:Set up index.
2025-03-16 15:14:17,660:INFO:Initializing predict_model()
2025-03-16 15:14:17,660:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE9152BB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE660>)
2025-03-16 15:14:17,660:INFO:Checking exceptions
2025-03-16 15:14:17,660:INFO:Preloading libraries
2025-03-16 15:14:17,660:INFO:Set up data.
2025-03-16 15:14:17,661:INFO:Set up index.
2025-03-16 15:14:17,767:INFO:Initializing predict_model()
2025-03-16 15:14:17,769:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB7F690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:17,769:INFO:Checking exceptions
2025-03-16 15:14:17,769:INFO:Preloading libraries
2025-03-16 15:14:17,769:INFO:Set up data.
2025-03-16 15:14:17,772:INFO:Set up index.
2025-03-16 15:14:17,877:INFO:Initializing predict_model()
2025-03-16 15:14:17,877:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B730490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEF20>)
2025-03-16 15:14:17,877:INFO:Checking exceptions
2025-03-16 15:14:17,877:INFO:Preloading libraries
2025-03-16 15:14:17,877:INFO:Set up data.
2025-03-16 15:14:17,882:INFO:Set up index.
2025-03-16 15:14:17,995:INFO:Initializing predict_model()
2025-03-16 15:14:17,995:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B730490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:17,995:INFO:Checking exceptions
2025-03-16 15:14:17,995:INFO:Preloading libraries
2025-03-16 15:14:17,995:INFO:Set up data.
2025-03-16 15:14:17,997:INFO:Set up index.
2025-03-16 15:14:18,106:INFO:Initializing predict_model()
2025-03-16 15:14:18,106:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE9152A210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE160>)
2025-03-16 15:14:18,106:INFO:Checking exceptions
2025-03-16 15:14:18,106:INFO:Preloading libraries
2025-03-16 15:14:18,106:INFO:Set up data.
2025-03-16 15:14:18,109:INFO:Set up index.
2025-03-16 15:14:18,214:INFO:Initializing predict_model()
2025-03-16 15:14:18,214:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914CD050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE700>)
2025-03-16 15:14:18,214:INFO:Checking exceptions
2025-03-16 15:14:18,214:INFO:Preloading libraries
2025-03-16 15:14:18,216:INFO:Set up data.
2025-03-16 15:14:18,217:INFO:Set up index.
2025-03-16 15:14:18,324:INFO:Initializing predict_model()
2025-03-16 15:14:18,324:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914E05D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEE80>)
2025-03-16 15:14:18,326:INFO:Checking exceptions
2025-03-16 15:14:18,326:INFO:Preloading libraries
2025-03-16 15:14:18,326:INFO:Set up data.
2025-03-16 15:14:18,329:INFO:Set up index.
2025-03-16 15:14:18,434:INFO:Initializing predict_model()
2025-03-16 15:14:18,434:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91529D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEB60>)
2025-03-16 15:14:18,434:INFO:Checking exceptions
2025-03-16 15:14:18,434:INFO:Preloading libraries
2025-03-16 15:14:18,434:INFO:Set up data.
2025-03-16 15:14:18,437:INFO:Set up index.
2025-03-16 15:14:18,550:INFO:Initializing predict_model()
2025-03-16 15:14:18,550:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8B89110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDE40>)
2025-03-16 15:14:18,550:INFO:Checking exceptions
2025-03-16 15:14:18,550:INFO:Preloading libraries
2025-03-16 15:14:18,550:INFO:Set up data.
2025-03-16 15:14:18,553:INFO:Set up index.
2025-03-16 15:14:18,664:INFO:Initializing predict_model()
2025-03-16 15:14:18,664:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D322950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFD940>)
2025-03-16 15:14:18,664:INFO:Checking exceptions
2025-03-16 15:14:18,664:INFO:Preloading libraries
2025-03-16 15:14:18,664:INFO:Set up data.
2025-03-16 15:14:18,666:INFO:Set up index.
2025-03-16 15:14:18,777:INFO:Initializing predict_model()
2025-03-16 15:14:18,777:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914D2A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFDBC0>)
2025-03-16 15:14:18,777:INFO:Checking exceptions
2025-03-16 15:14:18,777:INFO:Preloading libraries
2025-03-16 15:14:18,777:INFO:Set up data.
2025-03-16 15:14:18,780:INFO:Set up index.
2025-03-16 15:14:18,888:INFO:Initializing predict_model()
2025-03-16 15:14:18,888:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914E0650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFD9E0>)
2025-03-16 15:14:18,888:INFO:Checking exceptions
2025-03-16 15:14:18,888:INFO:Preloading libraries
2025-03-16 15:14:18,888:INFO:Set up data.
2025-03-16 15:14:18,891:INFO:Set up index.
2025-03-16 15:14:18,997:INFO:Initializing predict_model()
2025-03-16 15:14:18,999:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91529190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE660>)
2025-03-16 15:14:18,999:INFO:Checking exceptions
2025-03-16 15:14:18,999:INFO:Preloading libraries
2025-03-16 15:14:18,999:INFO:Set up data.
2025-03-16 15:14:19,002:INFO:Set up index.
2025-03-16 15:14:19,115:INFO:Initializing predict_model()
2025-03-16 15:14:19,115:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91547690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:19,115:INFO:Checking exceptions
2025-03-16 15:14:19,115:INFO:Preloading libraries
2025-03-16 15:14:19,117:INFO:Set up data.
2025-03-16 15:14:19,118:INFO:Set up index.
2025-03-16 15:14:19,232:INFO:Initializing predict_model()
2025-03-16 15:14:19,232:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B2F150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEF20>)
2025-03-16 15:14:19,232:INFO:Checking exceptions
2025-03-16 15:14:19,232:INFO:Preloading libraries
2025-03-16 15:14:19,232:INFO:Set up data.
2025-03-16 15:14:19,235:INFO:Set up index.
2025-03-16 15:14:19,344:INFO:Initializing predict_model()
2025-03-16 15:14:19,344:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DD9E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:19,344:INFO:Checking exceptions
2025-03-16 15:14:19,344:INFO:Preloading libraries
2025-03-16 15:14:19,344:INFO:Set up data.
2025-03-16 15:14:19,348:INFO:Set up index.
2025-03-16 15:14:19,457:INFO:Initializing predict_model()
2025-03-16 15:14:19,457:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DD9F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE160>)
2025-03-16 15:14:19,457:INFO:Checking exceptions
2025-03-16 15:14:19,457:INFO:Preloading libraries
2025-03-16 15:14:19,457:INFO:Set up data.
2025-03-16 15:14:19,462:INFO:Set up index.
2025-03-16 15:14:19,577:INFO:Initializing predict_model()
2025-03-16 15:14:19,577:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D8A7B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE700>)
2025-03-16 15:14:19,577:INFO:Checking exceptions
2025-03-16 15:14:19,577:INFO:Preloading libraries
2025-03-16 15:14:19,577:INFO:Set up data.
2025-03-16 15:14:19,582:INFO:Set up index.
2025-03-16 15:14:19,703:INFO:Initializing predict_model()
2025-03-16 15:14:19,703:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CADE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEE80>)
2025-03-16 15:14:19,703:INFO:Checking exceptions
2025-03-16 15:14:19,703:INFO:Preloading libraries
2025-03-16 15:14:19,703:INFO:Set up data.
2025-03-16 15:14:19,706:INFO:Set up index.
2025-03-16 15:14:19,814:INFO:Initializing predict_model()
2025-03-16 15:14:19,814:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DD8FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEB60>)
2025-03-16 15:14:19,814:INFO:Checking exceptions
2025-03-16 15:14:19,814:INFO:Preloading libraries
2025-03-16 15:14:19,815:INFO:Set up data.
2025-03-16 15:14:19,817:INFO:Set up index.
2025-03-16 15:14:19,938:INFO:Initializing load_model()
2025-03-16 15:14:19,938:INFO:load_model(model_name=../Surat/main/br_humi_u_temp_model_jsps01, platform=None, authentication=None, verbose=True)
2025-03-16 15:14:20,023:INFO:Initializing predict_model()
2025-03-16 15:14:20,023:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A2EFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E3C360>)
2025-03-16 15:14:20,023:INFO:Checking exceptions
2025-03-16 15:14:20,023:INFO:Preloading libraries
2025-03-16 15:14:20,024:INFO:Set up data.
2025-03-16 15:14:20,027:INFO:Set up index.
2025-03-16 15:14:20,157:INFO:Initializing predict_model()
2025-03-16 15:14:20,157:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D95B290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:20,157:INFO:Checking exceptions
2025-03-16 15:14:20,157:INFO:Preloading libraries
2025-03-16 15:14:20,157:INFO:Set up data.
2025-03-16 15:14:20,161:INFO:Set up index.
2025-03-16 15:14:20,289:INFO:Initializing predict_model()
2025-03-16 15:14:20,289:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B2C6990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:20,289:INFO:Checking exceptions
2025-03-16 15:14:20,289:INFO:Preloading libraries
2025-03-16 15:14:20,289:INFO:Set up data.
2025-03-16 15:14:20,293:INFO:Set up index.
2025-03-16 15:14:20,400:INFO:Initializing predict_model()
2025-03-16 15:14:20,400:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A0B390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:20,400:INFO:Checking exceptions
2025-03-16 15:14:20,400:INFO:Preloading libraries
2025-03-16 15:14:20,401:INFO:Set up data.
2025-03-16 15:14:20,404:INFO:Set up index.
2025-03-16 15:14:20,513:INFO:Initializing predict_model()
2025-03-16 15:14:20,513:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A2B110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:20,514:INFO:Checking exceptions
2025-03-16 15:14:20,514:INFO:Preloading libraries
2025-03-16 15:14:20,514:INFO:Set up data.
2025-03-16 15:14:20,517:INFO:Set up index.
2025-03-16 15:14:20,624:INFO:Initializing predict_model()
2025-03-16 15:14:20,624:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D03F8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:20,624:INFO:Checking exceptions
2025-03-16 15:14:20,624:INFO:Preloading libraries
2025-03-16 15:14:20,624:INFO:Set up data.
2025-03-16 15:14:20,628:INFO:Set up index.
2025-03-16 15:14:20,744:INFO:Initializing predict_model()
2025-03-16 15:14:20,744:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB61DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:20,744:INFO:Checking exceptions
2025-03-16 15:14:20,744:INFO:Preloading libraries
2025-03-16 15:14:20,744:INFO:Set up data.
2025-03-16 15:14:20,748:INFO:Set up index.
2025-03-16 15:14:20,861:INFO:Initializing predict_model()
2025-03-16 15:14:20,861:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E7A210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:20,861:INFO:Checking exceptions
2025-03-16 15:14:20,861:INFO:Preloading libraries
2025-03-16 15:14:20,861:INFO:Set up data.
2025-03-16 15:14:20,863:INFO:Set up index.
2025-03-16 15:14:20,975:INFO:Initializing predict_model()
2025-03-16 15:14:20,975:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E21910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:20,975:INFO:Checking exceptions
2025-03-16 15:14:20,975:INFO:Preloading libraries
2025-03-16 15:14:20,975:INFO:Set up data.
2025-03-16 15:14:20,979:INFO:Set up index.
2025-03-16 15:14:21,095:INFO:Initializing predict_model()
2025-03-16 15:14:21,095:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A30490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:21,095:INFO:Checking exceptions
2025-03-16 15:14:21,095:INFO:Preloading libraries
2025-03-16 15:14:21,095:INFO:Set up data.
2025-03-16 15:14:21,098:INFO:Set up index.
2025-03-16 15:14:21,206:INFO:Initializing predict_model()
2025-03-16 15:14:21,206:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E23910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:21,206:INFO:Checking exceptions
2025-03-16 15:14:21,206:INFO:Preloading libraries
2025-03-16 15:14:21,206:INFO:Set up data.
2025-03-16 15:14:21,209:INFO:Set up index.
2025-03-16 15:14:21,317:INFO:Initializing predict_model()
2025-03-16 15:14:21,317:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BBF150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:21,317:INFO:Checking exceptions
2025-03-16 15:14:21,317:INFO:Preloading libraries
2025-03-16 15:14:21,317:INFO:Set up data.
2025-03-16 15:14:21,321:INFO:Set up index.
2025-03-16 15:14:21,453:INFO:Initializing predict_model()
2025-03-16 15:14:21,453:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D95B010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:21,453:INFO:Checking exceptions
2025-03-16 15:14:21,453:INFO:Preloading libraries
2025-03-16 15:14:21,453:INFO:Set up data.
2025-03-16 15:14:21,459:INFO:Set up index.
2025-03-16 15:14:21,575:INFO:Initializing predict_model()
2025-03-16 15:14:21,577:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:21,577:INFO:Checking exceptions
2025-03-16 15:14:21,577:INFO:Preloading libraries
2025-03-16 15:14:21,577:INFO:Set up data.
2025-03-16 15:14:21,580:INFO:Set up index.
2025-03-16 15:14:21,688:INFO:Initializing predict_model()
2025-03-16 15:14:21,688:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B04810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:21,688:INFO:Checking exceptions
2025-03-16 15:14:21,688:INFO:Preloading libraries
2025-03-16 15:14:21,688:INFO:Set up data.
2025-03-16 15:14:21,695:INFO:Set up index.
2025-03-16 15:14:21,807:INFO:Initializing predict_model()
2025-03-16 15:14:21,807:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A09DD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:21,807:INFO:Checking exceptions
2025-03-16 15:14:21,807:INFO:Preloading libraries
2025-03-16 15:14:21,807:INFO:Set up data.
2025-03-16 15:14:21,810:INFO:Set up index.
2025-03-16 15:14:21,923:INFO:Initializing predict_model()
2025-03-16 15:14:21,923:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90C9AD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:21,923:INFO:Checking exceptions
2025-03-16 15:14:21,923:INFO:Preloading libraries
2025-03-16 15:14:21,924:INFO:Set up data.
2025-03-16 15:14:21,927:INFO:Set up index.
2025-03-16 15:14:22,038:INFO:Initializing predict_model()
2025-03-16 15:14:22,038:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F3C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:22,038:INFO:Checking exceptions
2025-03-16 15:14:22,038:INFO:Preloading libraries
2025-03-16 15:14:22,038:INFO:Set up data.
2025-03-16 15:14:22,043:INFO:Set up index.
2025-03-16 15:14:22,149:INFO:Initializing predict_model()
2025-03-16 15:14:22,149:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E7ACD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:22,149:INFO:Checking exceptions
2025-03-16 15:14:22,149:INFO:Preloading libraries
2025-03-16 15:14:22,150:INFO:Set up data.
2025-03-16 15:14:22,153:INFO:Set up index.
2025-03-16 15:14:22,262:INFO:Initializing predict_model()
2025-03-16 15:14:22,262:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:22,262:INFO:Checking exceptions
2025-03-16 15:14:22,262:INFO:Preloading libraries
2025-03-16 15:14:22,262:INFO:Set up data.
2025-03-16 15:14:22,265:INFO:Set up index.
2025-03-16 15:14:22,385:INFO:Initializing predict_model()
2025-03-16 15:14:22,385:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D05B0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:22,385:INFO:Checking exceptions
2025-03-16 15:14:22,385:INFO:Preloading libraries
2025-03-16 15:14:22,385:INFO:Set up data.
2025-03-16 15:14:22,389:INFO:Set up index.
2025-03-16 15:14:22,515:INFO:Initializing predict_model()
2025-03-16 15:14:22,515:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A24C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:22,515:INFO:Checking exceptions
2025-03-16 15:14:22,515:INFO:Preloading libraries
2025-03-16 15:14:22,516:INFO:Set up data.
2025-03-16 15:14:22,518:INFO:Set up index.
2025-03-16 15:14:22,645:INFO:Initializing predict_model()
2025-03-16 15:14:22,645:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F4B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:22,645:INFO:Checking exceptions
2025-03-16 15:14:22,645:INFO:Preloading libraries
2025-03-16 15:14:22,645:INFO:Set up data.
2025-03-16 15:14:22,648:INFO:Set up index.
2025-03-16 15:14:22,759:INFO:Initializing predict_model()
2025-03-16 15:14:22,759:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB7C350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:22,759:INFO:Checking exceptions
2025-03-16 15:14:22,759:INFO:Preloading libraries
2025-03-16 15:14:22,760:INFO:Set up data.
2025-03-16 15:14:22,764:INFO:Set up index.
2025-03-16 15:14:22,886:INFO:Initializing predict_model()
2025-03-16 15:14:22,886:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B8B310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:22,886:INFO:Checking exceptions
2025-03-16 15:14:22,886:INFO:Preloading libraries
2025-03-16 15:14:22,886:INFO:Set up data.
2025-03-16 15:14:22,889:INFO:Set up index.
2025-03-16 15:14:23,003:INFO:Initializing predict_model()
2025-03-16 15:14:23,003:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D95B290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:23,003:INFO:Checking exceptions
2025-03-16 15:14:23,003:INFO:Preloading libraries
2025-03-16 15:14:23,003:INFO:Set up data.
2025-03-16 15:14:23,006:INFO:Set up index.
2025-03-16 15:14:23,122:INFO:Initializing predict_model()
2025-03-16 15:14:23,122:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F3A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:23,122:INFO:Checking exceptions
2025-03-16 15:14:23,123:INFO:Preloading libraries
2025-03-16 15:14:23,123:INFO:Set up data.
2025-03-16 15:14:23,125:INFO:Set up index.
2025-03-16 15:14:23,234:INFO:Initializing predict_model()
2025-03-16 15:14:23,234:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8F70F150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:23,235:INFO:Checking exceptions
2025-03-16 15:14:23,235:INFO:Preloading libraries
2025-03-16 15:14:23,235:INFO:Set up data.
2025-03-16 15:14:23,238:INFO:Set up index.
2025-03-16 15:14:23,347:INFO:Initializing predict_model()
2025-03-16 15:14:23,347:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B8A790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:23,347:INFO:Checking exceptions
2025-03-16 15:14:23,347:INFO:Preloading libraries
2025-03-16 15:14:23,347:INFO:Set up data.
2025-03-16 15:14:23,352:INFO:Set up index.
2025-03-16 15:14:23,467:INFO:Initializing predict_model()
2025-03-16 15:14:23,467:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E20B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:23,467:INFO:Checking exceptions
2025-03-16 15:14:23,467:INFO:Preloading libraries
2025-03-16 15:14:23,467:INFO:Set up data.
2025-03-16 15:14:23,470:INFO:Set up index.
2025-03-16 15:14:23,582:INFO:Initializing predict_model()
2025-03-16 15:14:23,582:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B2D750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:23,582:INFO:Checking exceptions
2025-03-16 15:14:23,582:INFO:Preloading libraries
2025-03-16 15:14:23,582:INFO:Set up data.
2025-03-16 15:14:23,585:INFO:Set up index.
2025-03-16 15:14:23,683:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\1056844038.py:44: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  result_humi = pd.concat([result_humi, predict_test_1], axis=0)

2025-03-16 15:14:23,690:INFO:Initializing predict_model()
2025-03-16 15:14:23,690:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A02B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:23,690:INFO:Checking exceptions
2025-03-16 15:14:23,690:INFO:Preloading libraries
2025-03-16 15:14:23,690:INFO:Set up data.
2025-03-16 15:14:23,694:INFO:Set up index.
2025-03-16 15:14:23,807:INFO:Initializing predict_model()
2025-03-16 15:14:23,807:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E1F650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:23,807:INFO:Checking exceptions
2025-03-16 15:14:23,807:INFO:Preloading libraries
2025-03-16 15:14:23,807:INFO:Set up data.
2025-03-16 15:14:23,810:INFO:Set up index.
2025-03-16 15:14:23,934:INFO:Initializing predict_model()
2025-03-16 15:14:23,934:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E1F350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:23,934:INFO:Checking exceptions
2025-03-16 15:14:23,935:INFO:Preloading libraries
2025-03-16 15:14:23,935:INFO:Set up data.
2025-03-16 15:14:23,938:INFO:Set up index.
2025-03-16 15:14:24,045:INFO:Initializing predict_model()
2025-03-16 15:14:24,045:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90D149D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:24,045:INFO:Checking exceptions
2025-03-16 15:14:24,045:INFO:Preloading libraries
2025-03-16 15:14:24,045:INFO:Set up data.
2025-03-16 15:14:24,048:INFO:Set up index.
2025-03-16 15:14:24,159:INFO:Initializing predict_model()
2025-03-16 15:14:24,159:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D05FB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:24,159:INFO:Checking exceptions
2025-03-16 15:14:24,159:INFO:Preloading libraries
2025-03-16 15:14:24,159:INFO:Set up data.
2025-03-16 15:14:24,163:INFO:Set up index.
2025-03-16 15:14:24,284:INFO:Initializing predict_model()
2025-03-16 15:14:24,284:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D3286D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:24,284:INFO:Checking exceptions
2025-03-16 15:14:24,284:INFO:Preloading libraries
2025-03-16 15:14:24,284:INFO:Set up data.
2025-03-16 15:14:24,287:INFO:Set up index.
2025-03-16 15:14:24,392:INFO:Initializing predict_model()
2025-03-16 15:14:24,392:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBB66D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:24,392:INFO:Checking exceptions
2025-03-16 15:14:24,392:INFO:Preloading libraries
2025-03-16 15:14:24,392:INFO:Set up data.
2025-03-16 15:14:24,395:INFO:Set up index.
2025-03-16 15:14:24,531:INFO:Initializing predict_model()
2025-03-16 15:14:24,531:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E1DAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:24,531:INFO:Checking exceptions
2025-03-16 15:14:24,531:INFO:Preloading libraries
2025-03-16 15:14:24,531:INFO:Set up data.
2025-03-16 15:14:24,535:INFO:Set up index.
2025-03-16 15:14:24,652:INFO:Initializing predict_model()
2025-03-16 15:14:24,652:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:24,652:INFO:Checking exceptions
2025-03-16 15:14:24,652:INFO:Preloading libraries
2025-03-16 15:14:24,653:INFO:Set up data.
2025-03-16 15:14:24,657:INFO:Set up index.
2025-03-16 15:14:24,764:INFO:Initializing predict_model()
2025-03-16 15:14:24,764:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F3410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:24,764:INFO:Checking exceptions
2025-03-16 15:14:24,765:INFO:Preloading libraries
2025-03-16 15:14:24,765:INFO:Set up data.
2025-03-16 15:14:24,768:INFO:Set up index.
2025-03-16 15:14:24,877:INFO:Initializing predict_model()
2025-03-16 15:14:24,877:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90D14850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:24,877:INFO:Checking exceptions
2025-03-16 15:14:24,877:INFO:Preloading libraries
2025-03-16 15:14:24,877:INFO:Set up data.
2025-03-16 15:14:24,880:INFO:Set up index.
2025-03-16 15:14:24,992:INFO:Initializing predict_model()
2025-03-16 15:14:24,992:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E1C210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:24,992:INFO:Checking exceptions
2025-03-16 15:14:24,992:INFO:Preloading libraries
2025-03-16 15:14:24,992:INFO:Set up data.
2025-03-16 15:14:24,994:INFO:Set up index.
2025-03-16 15:14:25,104:INFO:Initializing predict_model()
2025-03-16 15:14:25,104:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A01150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:25,104:INFO:Checking exceptions
2025-03-16 15:14:25,104:INFO:Preloading libraries
2025-03-16 15:14:25,104:INFO:Set up data.
2025-03-16 15:14:25,107:INFO:Set up index.
2025-03-16 15:14:25,217:INFO:Initializing predict_model()
2025-03-16 15:14:25,217:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E1CCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:25,217:INFO:Checking exceptions
2025-03-16 15:14:25,217:INFO:Preloading libraries
2025-03-16 15:14:25,217:INFO:Set up data.
2025-03-16 15:14:25,224:INFO:Set up index.
2025-03-16 15:14:25,330:INFO:Initializing predict_model()
2025-03-16 15:14:25,330:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBFAA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:25,330:INFO:Checking exceptions
2025-03-16 15:14:25,330:INFO:Preloading libraries
2025-03-16 15:14:25,330:INFO:Set up data.
2025-03-16 15:14:25,334:INFO:Set up index.
2025-03-16 15:14:25,450:INFO:Initializing predict_model()
2025-03-16 15:14:25,452:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90F43550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:25,452:INFO:Checking exceptions
2025-03-16 15:14:25,452:INFO:Preloading libraries
2025-03-16 15:14:25,452:INFO:Set up data.
2025-03-16 15:14:25,455:INFO:Set up index.
2025-03-16 15:14:25,567:INFO:Initializing predict_model()
2025-03-16 15:14:25,567:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D058450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:25,567:INFO:Checking exceptions
2025-03-16 15:14:25,567:INFO:Preloading libraries
2025-03-16 15:14:25,567:INFO:Set up data.
2025-03-16 15:14:25,570:INFO:Set up index.
2025-03-16 15:14:25,683:INFO:Initializing predict_model()
2025-03-16 15:14:25,683:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A2AE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:25,683:INFO:Checking exceptions
2025-03-16 15:14:25,683:INFO:Preloading libraries
2025-03-16 15:14:25,683:INFO:Set up data.
2025-03-16 15:14:25,686:INFO:Set up index.
2025-03-16 15:14:25,801:INFO:Initializing predict_model()
2025-03-16 15:14:25,801:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D03F8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:25,801:INFO:Checking exceptions
2025-03-16 15:14:25,801:INFO:Preloading libraries
2025-03-16 15:14:25,801:INFO:Set up data.
2025-03-16 15:14:25,805:INFO:Set up index.
2025-03-16 15:14:25,916:INFO:Initializing predict_model()
2025-03-16 15:14:25,916:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CDFFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:25,917:INFO:Checking exceptions
2025-03-16 15:14:25,917:INFO:Preloading libraries
2025-03-16 15:14:25,917:INFO:Set up data.
2025-03-16 15:14:25,920:INFO:Set up index.
2025-03-16 15:14:26,033:INFO:Initializing predict_model()
2025-03-16 15:14:26,033:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBF67D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:26,033:INFO:Checking exceptions
2025-03-16 15:14:26,033:INFO:Preloading libraries
2025-03-16 15:14:26,033:INFO:Set up data.
2025-03-16 15:14:26,036:INFO:Set up index.
2025-03-16 15:14:26,147:INFO:Initializing predict_model()
2025-03-16 15:14:26,147:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E1CED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:26,147:INFO:Checking exceptions
2025-03-16 15:14:26,147:INFO:Preloading libraries
2025-03-16 15:14:26,147:INFO:Set up data.
2025-03-16 15:14:26,150:INFO:Set up index.
2025-03-16 15:14:26,257:INFO:Initializing predict_model()
2025-03-16 15:14:26,257:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB7F690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:26,257:INFO:Checking exceptions
2025-03-16 15:14:26,257:INFO:Preloading libraries
2025-03-16 15:14:26,257:INFO:Set up data.
2025-03-16 15:14:26,260:INFO:Set up index.
2025-03-16 15:14:26,373:INFO:Initializing predict_model()
2025-03-16 15:14:26,373:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D8A7B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:26,373:INFO:Checking exceptions
2025-03-16 15:14:26,373:INFO:Preloading libraries
2025-03-16 15:14:26,373:INFO:Set up data.
2025-03-16 15:14:26,376:INFO:Set up index.
2025-03-16 15:14:26,494:INFO:Initializing predict_model()
2025-03-16 15:14:26,494:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B2E190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:26,494:INFO:Checking exceptions
2025-03-16 15:14:26,494:INFO:Preloading libraries
2025-03-16 15:14:26,494:INFO:Set up data.
2025-03-16 15:14:26,500:INFO:Set up index.
2025-03-16 15:14:26,616:INFO:Initializing predict_model()
2025-03-16 15:14:26,616:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90F43910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:26,616:INFO:Checking exceptions
2025-03-16 15:14:26,616:INFO:Preloading libraries
2025-03-16 15:14:26,616:INFO:Set up data.
2025-03-16 15:14:26,623:INFO:Set up index.
2025-03-16 15:14:26,742:INFO:Initializing predict_model()
2025-03-16 15:14:26,742:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DDBC90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:26,742:INFO:Checking exceptions
2025-03-16 15:14:26,742:INFO:Preloading libraries
2025-03-16 15:14:26,742:INFO:Set up data.
2025-03-16 15:14:26,745:INFO:Set up index.
2025-03-16 15:14:26,856:INFO:Initializing predict_model()
2025-03-16 15:14:26,856:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8CD3250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DED8126480>)
2025-03-16 15:14:26,856:INFO:Checking exceptions
2025-03-16 15:14:26,856:INFO:Preloading libraries
2025-03-16 15:14:26,856:INFO:Set up data.
2025-03-16 15:14:26,862:INFO:Set up index.
2025-03-16 15:14:26,988:INFO:Initializing load_model()
2025-03-16 15:14:26,988:INFO:load_model(model_name=../Surat/main/gbr_pm_2_5_model, platform=None, authentication=None, verbose=True)
2025-03-16 15:14:27,107:INFO:Initializing predict_model()
2025-03-16 15:14:27,107:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90F42E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:27,107:INFO:Checking exceptions
2025-03-16 15:14:27,107:INFO:Preloading libraries
2025-03-16 15:14:27,107:INFO:Set up data.
2025-03-16 15:14:27,113:INFO:Set up index.
2025-03-16 15:14:27,227:INFO:Initializing predict_model()
2025-03-16 15:14:27,227:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E74AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:27,227:INFO:Checking exceptions
2025-03-16 15:14:27,227:INFO:Preloading libraries
2025-03-16 15:14:27,227:INFO:Set up data.
2025-03-16 15:14:27,233:INFO:Set up index.
2025-03-16 15:14:27,354:INFO:Initializing predict_model()
2025-03-16 15:14:27,354:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A00B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:27,354:INFO:Checking exceptions
2025-03-16 15:14:27,356:INFO:Preloading libraries
2025-03-16 15:14:27,356:INFO:Set up data.
2025-03-16 15:14:27,360:INFO:Set up index.
2025-03-16 15:14:27,501:INFO:Initializing predict_model()
2025-03-16 15:14:27,501:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D065F50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:27,502:INFO:Checking exceptions
2025-03-16 15:14:27,502:INFO:Preloading libraries
2025-03-16 15:14:27,502:INFO:Set up data.
2025-03-16 15:14:27,506:INFO:Set up index.
2025-03-16 15:14:27,625:INFO:Initializing predict_model()
2025-03-16 15:14:27,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B19010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:27,625:INFO:Checking exceptions
2025-03-16 15:14:27,625:INFO:Preloading libraries
2025-03-16 15:14:27,625:INFO:Set up data.
2025-03-16 15:14:27,630:INFO:Set up index.
2025-03-16 15:14:27,743:INFO:Initializing predict_model()
2025-03-16 15:14:27,743:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DD6390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:27,743:INFO:Checking exceptions
2025-03-16 15:14:27,743:INFO:Preloading libraries
2025-03-16 15:14:27,743:INFO:Set up data.
2025-03-16 15:14:27,748:INFO:Set up index.
2025-03-16 15:14:27,866:INFO:Initializing predict_model()
2025-03-16 15:14:27,866:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E55790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:27,866:INFO:Checking exceptions
2025-03-16 15:14:27,866:INFO:Preloading libraries
2025-03-16 15:14:27,867:INFO:Set up data.
2025-03-16 15:14:27,873:INFO:Set up index.
2025-03-16 15:14:27,997:INFO:Initializing predict_model()
2025-03-16 15:14:27,997:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91476490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:27,997:INFO:Checking exceptions
2025-03-16 15:14:27,997:INFO:Preloading libraries
2025-03-16 15:14:27,997:INFO:Set up data.
2025-03-16 15:14:28,003:INFO:Set up index.
2025-03-16 15:14:28,132:INFO:Initializing predict_model()
2025-03-16 15:14:28,132:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A0F550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:28,132:INFO:Checking exceptions
2025-03-16 15:14:28,132:INFO:Preloading libraries
2025-03-16 15:14:28,132:INFO:Set up data.
2025-03-16 15:14:28,137:INFO:Set up index.
2025-03-16 15:14:28,260:INFO:Initializing predict_model()
2025-03-16 15:14:28,260:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBAEF90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:28,260:INFO:Checking exceptions
2025-03-16 15:14:28,260:INFO:Preloading libraries
2025-03-16 15:14:28,260:INFO:Set up data.
2025-03-16 15:14:28,267:INFO:Set up index.
2025-03-16 15:14:28,388:INFO:Initializing predict_model()
2025-03-16 15:14:28,388:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A0F550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:28,388:INFO:Checking exceptions
2025-03-16 15:14:28,388:INFO:Preloading libraries
2025-03-16 15:14:28,388:INFO:Set up data.
2025-03-16 15:14:28,394:INFO:Set up index.
2025-03-16 15:14:28,512:INFO:Initializing predict_model()
2025-03-16 15:14:28,512:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED814D350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:28,512:INFO:Checking exceptions
2025-03-16 15:14:28,512:INFO:Preloading libraries
2025-03-16 15:14:28,513:INFO:Set up data.
2025-03-16 15:14:28,517:INFO:Set up index.
2025-03-16 15:14:28,628:INFO:Initializing predict_model()
2025-03-16 15:14:28,628:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901EF890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:28,628:INFO:Checking exceptions
2025-03-16 15:14:28,628:INFO:Preloading libraries
2025-03-16 15:14:28,628:INFO:Set up data.
2025-03-16 15:14:28,635:INFO:Set up index.
2025-03-16 15:14:28,754:INFO:Initializing predict_model()
2025-03-16 15:14:28,754:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901EF890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:28,754:INFO:Checking exceptions
2025-03-16 15:14:28,754:INFO:Preloading libraries
2025-03-16 15:14:28,754:INFO:Set up data.
2025-03-16 15:14:28,759:INFO:Set up index.
2025-03-16 15:14:28,874:INFO:Initializing predict_model()
2025-03-16 15:14:28,874:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B7C850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:28,874:INFO:Checking exceptions
2025-03-16 15:14:28,874:INFO:Preloading libraries
2025-03-16 15:14:28,876:INFO:Set up data.
2025-03-16 15:14:28,880:INFO:Set up index.
2025-03-16 15:14:28,997:INFO:Initializing predict_model()
2025-03-16 15:14:28,997:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ABF750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:28,997:INFO:Checking exceptions
2025-03-16 15:14:28,997:INFO:Preloading libraries
2025-03-16 15:14:28,997:INFO:Set up data.
2025-03-16 15:14:29,003:INFO:Set up index.
2025-03-16 15:14:29,122:INFO:Initializing predict_model()
2025-03-16 15:14:29,122:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91024050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:29,122:INFO:Checking exceptions
2025-03-16 15:14:29,122:INFO:Preloading libraries
2025-03-16 15:14:29,122:INFO:Set up data.
2025-03-16 15:14:29,128:INFO:Set up index.
2025-03-16 15:14:29,254:INFO:Initializing predict_model()
2025-03-16 15:14:29,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A27010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:29,254:INFO:Checking exceptions
2025-03-16 15:14:29,254:INFO:Preloading libraries
2025-03-16 15:14:29,254:INFO:Set up data.
2025-03-16 15:14:29,260:INFO:Set up index.
2025-03-16 15:14:29,373:INFO:Initializing predict_model()
2025-03-16 15:14:29,373:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBB6750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:29,373:INFO:Checking exceptions
2025-03-16 15:14:29,373:INFO:Preloading libraries
2025-03-16 15:14:29,374:INFO:Set up data.
2025-03-16 15:14:29,378:INFO:Set up index.
2025-03-16 15:14:29,493:INFO:Initializing predict_model()
2025-03-16 15:14:29,493:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90C90ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:29,493:INFO:Checking exceptions
2025-03-16 15:14:29,493:INFO:Preloading libraries
2025-03-16 15:14:29,493:INFO:Set up data.
2025-03-16 15:14:29,501:INFO:Set up index.
2025-03-16 15:14:29,617:INFO:Initializing predict_model()
2025-03-16 15:14:29,617:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90288950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:29,617:INFO:Checking exceptions
2025-03-16 15:14:29,617:INFO:Preloading libraries
2025-03-16 15:14:29,617:INFO:Set up data.
2025-03-16 15:14:29,624:INFO:Set up index.
2025-03-16 15:14:29,738:INFO:Initializing predict_model()
2025-03-16 15:14:29,738:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8B89110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:29,738:INFO:Checking exceptions
2025-03-16 15:14:29,738:INFO:Preloading libraries
2025-03-16 15:14:29,738:INFO:Set up data.
2025-03-16 15:14:29,744:INFO:Set up index.
2025-03-16 15:14:29,857:INFO:Initializing predict_model()
2025-03-16 15:14:29,857:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A30B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:29,857:INFO:Checking exceptions
2025-03-16 15:14:29,857:INFO:Preloading libraries
2025-03-16 15:14:29,857:INFO:Set up data.
2025-03-16 15:14:29,863:INFO:Set up index.
2025-03-16 15:14:29,978:INFO:Initializing predict_model()
2025-03-16 15:14:29,978:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E6C590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:29,978:INFO:Checking exceptions
2025-03-16 15:14:29,978:INFO:Preloading libraries
2025-03-16 15:14:29,978:INFO:Set up data.
2025-03-16 15:14:29,984:INFO:Set up index.
2025-03-16 15:14:30,102:INFO:Initializing predict_model()
2025-03-16 15:14:30,102:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AE15D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:30,102:INFO:Checking exceptions
2025-03-16 15:14:30,102:INFO:Preloading libraries
2025-03-16 15:14:30,102:INFO:Set up data.
2025-03-16 15:14:30,107:INFO:Set up index.
2025-03-16 15:14:30,221:INFO:Initializing predict_model()
2025-03-16 15:14:30,221:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A0E3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:30,221:INFO:Checking exceptions
2025-03-16 15:14:30,221:INFO:Preloading libraries
2025-03-16 15:14:30,221:INFO:Set up data.
2025-03-16 15:14:30,226:INFO:Set up index.
2025-03-16 15:14:30,354:INFO:Initializing predict_model()
2025-03-16 15:14:30,354:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B21910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:30,354:INFO:Checking exceptions
2025-03-16 15:14:30,354:INFO:Preloading libraries
2025-03-16 15:14:30,354:INFO:Set up data.
2025-03-16 15:14:30,360:INFO:Set up index.
2025-03-16 15:14:30,504:INFO:Initializing predict_model()
2025-03-16 15:14:30,504:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BA7F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:30,504:INFO:Checking exceptions
2025-03-16 15:14:30,504:INFO:Preloading libraries
2025-03-16 15:14:30,504:INFO:Set up data.
2025-03-16 15:14:30,510:INFO:Set up index.
2025-03-16 15:14:30,625:INFO:Initializing predict_model()
2025-03-16 15:14:30,625:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D95B050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:30,625:INFO:Checking exceptions
2025-03-16 15:14:30,625:INFO:Preloading libraries
2025-03-16 15:14:30,625:INFO:Set up data.
2025-03-16 15:14:30,635:INFO:Set up index.
2025-03-16 15:14:30,752:INFO:Initializing predict_model()
2025-03-16 15:14:30,752:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE912F0990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:30,752:INFO:Checking exceptions
2025-03-16 15:14:30,752:INFO:Preloading libraries
2025-03-16 15:14:30,753:INFO:Set up data.
2025-03-16 15:14:30,758:INFO:Set up index.
2025-03-16 15:14:30,884:INFO:Initializing predict_model()
2025-03-16 15:14:30,884:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E74E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:30,884:INFO:Checking exceptions
2025-03-16 15:14:30,884:INFO:Preloading libraries
2025-03-16 15:14:30,884:INFO:Set up data.
2025-03-16 15:14:30,892:INFO:Set up index.
2025-03-16 15:14:30,996:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\107897864.py:45: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  result_pm_2_5 = pd.concat([result_pm_2_5, predict_test_1], axis=0)

2025-03-16 15:14:31,006:INFO:Initializing predict_model()
2025-03-16 15:14:31,006:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90FF1650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:31,006:INFO:Checking exceptions
2025-03-16 15:14:31,006:INFO:Preloading libraries
2025-03-16 15:14:31,006:INFO:Set up data.
2025-03-16 15:14:31,012:INFO:Set up index.
2025-03-16 15:14:31,124:INFO:Initializing predict_model()
2025-03-16 15:14:31,124:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBAEA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:31,124:INFO:Checking exceptions
2025-03-16 15:14:31,124:INFO:Preloading libraries
2025-03-16 15:14:31,124:INFO:Set up data.
2025-03-16 15:14:31,129:INFO:Set up index.
2025-03-16 15:14:31,240:INFO:Initializing predict_model()
2025-03-16 15:14:31,240:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E66990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:31,240:INFO:Checking exceptions
2025-03-16 15:14:31,240:INFO:Preloading libraries
2025-03-16 15:14:31,240:INFO:Set up data.
2025-03-16 15:14:31,246:INFO:Set up index.
2025-03-16 15:14:31,360:INFO:Initializing predict_model()
2025-03-16 15:14:31,360:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DA24AD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:31,360:INFO:Checking exceptions
2025-03-16 15:14:31,360:INFO:Preloading libraries
2025-03-16 15:14:31,360:INFO:Set up data.
2025-03-16 15:14:31,367:INFO:Set up index.
2025-03-16 15:14:31,483:INFO:Initializing predict_model()
2025-03-16 15:14:31,483:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF01A0F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:31,483:INFO:Checking exceptions
2025-03-16 15:14:31,483:INFO:Preloading libraries
2025-03-16 15:14:31,483:INFO:Set up data.
2025-03-16 15:14:31,488:INFO:Set up index.
2025-03-16 15:14:31,602:INFO:Initializing predict_model()
2025-03-16 15:14:31,602:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A2F750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:31,602:INFO:Checking exceptions
2025-03-16 15:14:31,602:INFO:Preloading libraries
2025-03-16 15:14:31,602:INFO:Set up data.
2025-03-16 15:14:31,607:INFO:Set up index.
2025-03-16 15:14:31,721:INFO:Initializing predict_model()
2025-03-16 15:14:31,723:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBAC9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:31,723:INFO:Checking exceptions
2025-03-16 15:14:31,723:INFO:Preloading libraries
2025-03-16 15:14:31,723:INFO:Set up data.
2025-03-16 15:14:31,727:INFO:Set up index.
2025-03-16 15:14:31,842:INFO:Initializing predict_model()
2025-03-16 15:14:31,842:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A2CD50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:31,842:INFO:Checking exceptions
2025-03-16 15:14:31,842:INFO:Preloading libraries
2025-03-16 15:14:31,843:INFO:Set up data.
2025-03-16 15:14:31,847:INFO:Set up index.
2025-03-16 15:14:31,969:INFO:Initializing predict_model()
2025-03-16 15:14:31,969:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F4B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:31,969:INFO:Checking exceptions
2025-03-16 15:14:31,969:INFO:Preloading libraries
2025-03-16 15:14:31,969:INFO:Set up data.
2025-03-16 15:14:31,973:INFO:Set up index.
2025-03-16 15:14:32,088:INFO:Initializing predict_model()
2025-03-16 15:14:32,088:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AB53510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:32,088:INFO:Checking exceptions
2025-03-16 15:14:32,088:INFO:Preloading libraries
2025-03-16 15:14:32,088:INFO:Set up data.
2025-03-16 15:14:32,094:INFO:Set up index.
2025-03-16 15:14:32,214:INFO:Initializing predict_model()
2025-03-16 15:14:32,214:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AFA6710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:32,214:INFO:Checking exceptions
2025-03-16 15:14:32,214:INFO:Preloading libraries
2025-03-16 15:14:32,214:INFO:Set up data.
2025-03-16 15:14:32,221:INFO:Set up index.
2025-03-16 15:14:32,336:INFO:Initializing predict_model()
2025-03-16 15:14:32,336:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ABE510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:32,336:INFO:Checking exceptions
2025-03-16 15:14:32,336:INFO:Preloading libraries
2025-03-16 15:14:32,336:INFO:Set up data.
2025-03-16 15:14:32,342:INFO:Set up index.
2025-03-16 15:14:32,457:INFO:Initializing predict_model()
2025-03-16 15:14:32,457:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B44C8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:32,457:INFO:Checking exceptions
2025-03-16 15:14:32,457:INFO:Preloading libraries
2025-03-16 15:14:32,457:INFO:Set up data.
2025-03-16 15:14:32,463:INFO:Set up index.
2025-03-16 15:14:32,575:INFO:Initializing predict_model()
2025-03-16 15:14:32,575:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBAF550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:32,575:INFO:Checking exceptions
2025-03-16 15:14:32,575:INFO:Preloading libraries
2025-03-16 15:14:32,575:INFO:Set up data.
2025-03-16 15:14:32,582:INFO:Set up index.
2025-03-16 15:14:32,699:INFO:Initializing predict_model()
2025-03-16 15:14:32,699:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AE444D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:32,699:INFO:Checking exceptions
2025-03-16 15:14:32,701:INFO:Preloading libraries
2025-03-16 15:14:32,701:INFO:Set up data.
2025-03-16 15:14:32,705:INFO:Set up index.
2025-03-16 15:14:32,820:INFO:Initializing predict_model()
2025-03-16 15:14:32,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB60A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:32,820:INFO:Checking exceptions
2025-03-16 15:14:32,820:INFO:Preloading libraries
2025-03-16 15:14:32,820:INFO:Set up data.
2025-03-16 15:14:32,825:INFO:Set up index.
2025-03-16 15:14:32,943:INFO:Initializing predict_model()
2025-03-16 15:14:32,943:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A0E790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:32,943:INFO:Checking exceptions
2025-03-16 15:14:32,943:INFO:Preloading libraries
2025-03-16 15:14:32,943:INFO:Set up data.
2025-03-16 15:14:32,948:INFO:Set up index.
2025-03-16 15:14:33,064:INFO:Initializing predict_model()
2025-03-16 15:14:33,064:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ABFB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:33,064:INFO:Checking exceptions
2025-03-16 15:14:33,064:INFO:Preloading libraries
2025-03-16 15:14:33,064:INFO:Set up data.
2025-03-16 15:14:33,070:INFO:Set up index.
2025-03-16 15:14:33,183:INFO:Initializing predict_model()
2025-03-16 15:14:33,183:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0CA9C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:33,183:INFO:Checking exceptions
2025-03-16 15:14:33,183:INFO:Preloading libraries
2025-03-16 15:14:33,183:INFO:Set up data.
2025-03-16 15:14:33,189:INFO:Set up index.
2025-03-16 15:14:33,306:INFO:Initializing predict_model()
2025-03-16 15:14:33,306:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90C91B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:33,306:INFO:Checking exceptions
2025-03-16 15:14:33,306:INFO:Preloading libraries
2025-03-16 15:14:33,306:INFO:Set up data.
2025-03-16 15:14:33,310:INFO:Set up index.
2025-03-16 15:14:33,425:INFO:Initializing predict_model()
2025-03-16 15:14:33,425:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A0E790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:33,427:INFO:Checking exceptions
2025-03-16 15:14:33,427:INFO:Preloading libraries
2025-03-16 15:14:33,427:INFO:Set up data.
2025-03-16 15:14:33,431:INFO:Set up index.
2025-03-16 15:14:33,553:INFO:Initializing predict_model()
2025-03-16 15:14:33,553:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E6D410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:33,553:INFO:Checking exceptions
2025-03-16 15:14:33,553:INFO:Preloading libraries
2025-03-16 15:14:33,553:INFO:Set up data.
2025-03-16 15:14:33,557:INFO:Set up index.
2025-03-16 15:14:33,685:INFO:Initializing predict_model()
2025-03-16 15:14:33,685:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8F70EA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:33,687:INFO:Checking exceptions
2025-03-16 15:14:33,687:INFO:Preloading libraries
2025-03-16 15:14:33,687:INFO:Set up data.
2025-03-16 15:14:33,693:INFO:Set up index.
2025-03-16 15:14:33,820:INFO:Initializing predict_model()
2025-03-16 15:14:33,820:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A03710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:33,822:INFO:Checking exceptions
2025-03-16 15:14:33,822:INFO:Preloading libraries
2025-03-16 15:14:33,822:INFO:Set up data.
2025-03-16 15:14:33,827:INFO:Set up index.
2025-03-16 15:14:33,940:INFO:Initializing predict_model()
2025-03-16 15:14:33,940:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E6FA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:33,940:INFO:Checking exceptions
2025-03-16 15:14:33,940:INFO:Preloading libraries
2025-03-16 15:14:33,942:INFO:Set up data.
2025-03-16 15:14:33,946:INFO:Set up index.
2025-03-16 15:14:34,059:INFO:Initializing predict_model()
2025-03-16 15:14:34,059:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901ED390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFE200>)
2025-03-16 15:14:34,059:INFO:Checking exceptions
2025-03-16 15:14:34,059:INFO:Preloading libraries
2025-03-16 15:14:34,061:INFO:Set up data.
2025-03-16 15:14:34,067:INFO:Set up index.
2025-03-16 15:14:34,179:INFO:Initializing predict_model()
2025-03-16 15:14:34,179:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B5EFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE90EFEC00>)
2025-03-16 15:14:34,179:INFO:Checking exceptions
2025-03-16 15:14:34,179:INFO:Preloading libraries
2025-03-16 15:14:34,179:INFO:Set up data.
2025-03-16 15:14:34,185:INFO:Set up index.
2025-03-16 15:16:07,423:INFO:Initializing load_model()
2025-03-16 15:16:07,423:INFO:load_model(model_name=../Surat/main/dt_jsps01_temp_model, platform=None, authentication=None, verbose=True)
2025-03-16 15:16:07,444:INFO:Initializing predict_model()
2025-03-16 15:16:07,444:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CDD4D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DEF0E4DF80>)
2025-03-16 15:16:07,444:INFO:Checking exceptions
2025-03-16 15:16:07,444:INFO:Preloading libraries
2025-03-16 15:16:07,444:INFO:Set up data.
2025-03-16 15:16:07,447:INFO:Set up index.
2025-03-16 15:16:07,576:INFO:Initializing predict_model()
2025-03-16 15:16:07,576:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B36950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98220>)
2025-03-16 15:16:07,576:INFO:Checking exceptions
2025-03-16 15:16:07,576:INFO:Preloading libraries
2025-03-16 15:16:07,576:INFO:Set up data.
2025-03-16 15:16:07,579:INFO:Set up index.
2025-03-16 15:16:07,694:INFO:Initializing predict_model()
2025-03-16 15:16:07,694:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0308510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:07,694:INFO:Checking exceptions
2025-03-16 15:16:07,694:INFO:Preloading libraries
2025-03-16 15:16:07,694:INFO:Set up data.
2025-03-16 15:16:07,697:INFO:Set up index.
2025-03-16 15:16:07,816:INFO:Initializing predict_model()
2025-03-16 15:16:07,816:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E6D410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B600>)
2025-03-16 15:16:07,816:INFO:Checking exceptions
2025-03-16 15:16:07,816:INFO:Preloading libraries
2025-03-16 15:16:07,816:INFO:Set up data.
2025-03-16 15:16:07,819:INFO:Set up index.
2025-03-16 15:16:07,937:INFO:Initializing predict_model()
2025-03-16 15:16:07,937:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AF07D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98F40>)
2025-03-16 15:16:07,937:INFO:Checking exceptions
2025-03-16 15:16:07,937:INFO:Preloading libraries
2025-03-16 15:16:07,937:INFO:Set up data.
2025-03-16 15:16:07,940:INFO:Set up index.
2025-03-16 15:16:08,052:INFO:Initializing predict_model()
2025-03-16 15:16:08,052:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B07050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA982C0>)
2025-03-16 15:16:08,052:INFO:Checking exceptions
2025-03-16 15:16:08,052:INFO:Preloading libraries
2025-03-16 15:16:08,052:INFO:Set up data.
2025-03-16 15:16:08,055:INFO:Set up index.
2025-03-16 15:16:08,167:INFO:Initializing predict_model()
2025-03-16 15:16:08,167:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D323590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9A480>)
2025-03-16 15:16:08,167:INFO:Checking exceptions
2025-03-16 15:16:08,167:INFO:Preloading libraries
2025-03-16 15:16:08,167:INFO:Set up data.
2025-03-16 15:16:08,170:INFO:Set up index.
2025-03-16 15:16:08,280:INFO:Initializing predict_model()
2025-03-16 15:16:08,280:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B202D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B6A0>)
2025-03-16 15:16:08,280:INFO:Checking exceptions
2025-03-16 15:16:08,280:INFO:Preloading libraries
2025-03-16 15:16:08,280:INFO:Set up data.
2025-03-16 15:16:08,284:INFO:Set up index.
2025-03-16 15:16:08,398:INFO:Initializing predict_model()
2025-03-16 15:16:08,398:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914C4790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA998A0>)
2025-03-16 15:16:08,400:INFO:Checking exceptions
2025-03-16 15:16:08,400:INFO:Preloading libraries
2025-03-16 15:16:08,400:INFO:Set up data.
2025-03-16 15:16:08,404:INFO:Set up index.
2025-03-16 15:16:08,535:INFO:Initializing predict_model()
2025-03-16 15:16:08,535:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B3F5950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9A2A0>)
2025-03-16 15:16:08,535:INFO:Checking exceptions
2025-03-16 15:16:08,535:INFO:Preloading libraries
2025-03-16 15:16:08,535:INFO:Set up data.
2025-03-16 15:16:08,538:INFO:Set up index.
2025-03-16 15:16:08,665:INFO:Initializing predict_model()
2025-03-16 15:16:08,665:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A0E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99E40>)
2025-03-16 15:16:08,665:INFO:Checking exceptions
2025-03-16 15:16:08,665:INFO:Preloading libraries
2025-03-16 15:16:08,667:INFO:Set up data.
2025-03-16 15:16:08,671:INFO:Set up index.
2025-03-16 15:16:08,791:INFO:Initializing predict_model()
2025-03-16 15:16:08,791:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B3F5950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B1A0>)
2025-03-16 15:16:08,791:INFO:Checking exceptions
2025-03-16 15:16:08,791:INFO:Preloading libraries
2025-03-16 15:16:08,791:INFO:Set up data.
2025-03-16 15:16:08,794:INFO:Set up index.
2025-03-16 15:16:08,930:INFO:Initializing predict_model()
2025-03-16 15:16:08,932:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914C4650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:08,932:INFO:Checking exceptions
2025-03-16 15:16:08,932:INFO:Preloading libraries
2025-03-16 15:16:08,932:INFO:Set up data.
2025-03-16 15:16:08,935:INFO:Set up index.
2025-03-16 15:16:09,058:INFO:Initializing predict_model()
2025-03-16 15:16:09,058:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DA5B590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9AD40>)
2025-03-16 15:16:09,058:INFO:Checking exceptions
2025-03-16 15:16:09,058:INFO:Preloading libraries
2025-03-16 15:16:09,058:INFO:Set up data.
2025-03-16 15:16:09,063:INFO:Set up index.
2025-03-16 15:16:09,200:INFO:Initializing predict_model()
2025-03-16 15:16:09,200:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE909FFB10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98FE0>)
2025-03-16 15:16:09,201:INFO:Checking exceptions
2025-03-16 15:16:09,201:INFO:Preloading libraries
2025-03-16 15:16:09,201:INFO:Set up data.
2025-03-16 15:16:09,204:INFO:Set up index.
2025-03-16 15:16:09,327:INFO:Initializing predict_model()
2025-03-16 15:16:09,327:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D169D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98220>)
2025-03-16 15:16:09,327:INFO:Checking exceptions
2025-03-16 15:16:09,327:INFO:Preloading libraries
2025-03-16 15:16:09,327:INFO:Set up data.
2025-03-16 15:16:09,332:INFO:Set up index.
2025-03-16 15:16:09,468:INFO:Initializing predict_model()
2025-03-16 15:16:09,468:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8F710890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:09,468:INFO:Checking exceptions
2025-03-16 15:16:09,468:INFO:Preloading libraries
2025-03-16 15:16:09,468:INFO:Set up data.
2025-03-16 15:16:09,472:INFO:Set up index.
2025-03-16 15:16:09,601:INFO:Initializing predict_model()
2025-03-16 15:16:09,601:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB7E190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B600>)
2025-03-16 15:16:09,601:INFO:Checking exceptions
2025-03-16 15:16:09,601:INFO:Preloading libraries
2025-03-16 15:16:09,601:INFO:Set up data.
2025-03-16 15:16:09,605:INFO:Set up index.
2025-03-16 15:16:09,738:INFO:Initializing predict_model()
2025-03-16 15:16:09,738:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CC7150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98F40>)
2025-03-16 15:16:09,738:INFO:Checking exceptions
2025-03-16 15:16:09,738:INFO:Preloading libraries
2025-03-16 15:16:09,738:INFO:Set up data.
2025-03-16 15:16:09,744:INFO:Set up index.
2025-03-16 15:16:09,866:INFO:Initializing predict_model()
2025-03-16 15:16:09,866:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CC7150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA982C0>)
2025-03-16 15:16:09,866:INFO:Checking exceptions
2025-03-16 15:16:09,866:INFO:Preloading libraries
2025-03-16 15:16:09,866:INFO:Set up data.
2025-03-16 15:16:09,869:INFO:Set up index.
2025-03-16 15:16:09,984:INFO:Initializing predict_model()
2025-03-16 15:16:09,984:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB7D310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9A480>)
2025-03-16 15:16:09,984:INFO:Checking exceptions
2025-03-16 15:16:09,987:INFO:Preloading libraries
2025-03-16 15:16:09,992:INFO:Set up data.
2025-03-16 15:16:09,998:INFO:Set up index.
2025-03-16 15:16:10,142:INFO:Initializing predict_model()
2025-03-16 15:16:10,143:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914C4590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B6A0>)
2025-03-16 15:16:10,143:INFO:Checking exceptions
2025-03-16 15:16:10,143:INFO:Preloading libraries
2025-03-16 15:16:10,143:INFO:Set up data.
2025-03-16 15:16:10,145:INFO:Set up index.
2025-03-16 15:16:10,272:INFO:Initializing predict_model()
2025-03-16 15:16:10,272:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB60790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA998A0>)
2025-03-16 15:16:10,272:INFO:Checking exceptions
2025-03-16 15:16:10,272:INFO:Preloading libraries
2025-03-16 15:16:10,272:INFO:Set up data.
2025-03-16 15:16:10,276:INFO:Set up index.
2025-03-16 15:16:10,400:INFO:Initializing predict_model()
2025-03-16 15:16:10,400:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8F70E9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9A2A0>)
2025-03-16 15:16:10,401:INFO:Checking exceptions
2025-03-16 15:16:10,401:INFO:Preloading libraries
2025-03-16 15:16:10,401:INFO:Set up data.
2025-03-16 15:16:10,404:INFO:Set up index.
2025-03-16 15:16:10,533:INFO:Initializing predict_model()
2025-03-16 15:16:10,533:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3D050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99E40>)
2025-03-16 15:16:10,534:INFO:Checking exceptions
2025-03-16 15:16:10,534:INFO:Preloading libraries
2025-03-16 15:16:10,534:INFO:Set up data.
2025-03-16 15:16:10,537:INFO:Set up index.
2025-03-16 15:16:10,659:INFO:Initializing predict_model()
2025-03-16 15:16:10,659:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AB53510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B1A0>)
2025-03-16 15:16:10,659:INFO:Checking exceptions
2025-03-16 15:16:10,659:INFO:Preloading libraries
2025-03-16 15:16:10,659:INFO:Set up data.
2025-03-16 15:16:10,664:INFO:Set up index.
2025-03-16 15:16:10,793:INFO:Initializing predict_model()
2025-03-16 15:16:10,793:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ADA910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:10,793:INFO:Checking exceptions
2025-03-16 15:16:10,793:INFO:Preloading libraries
2025-03-16 15:16:10,793:INFO:Set up data.
2025-03-16 15:16:10,798:INFO:Set up index.
2025-03-16 15:16:10,915:INFO:Initializing predict_model()
2025-03-16 15:16:10,915:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A27850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9AD40>)
2025-03-16 15:16:10,915:INFO:Checking exceptions
2025-03-16 15:16:10,915:INFO:Preloading libraries
2025-03-16 15:16:10,915:INFO:Set up data.
2025-03-16 15:16:10,919:INFO:Set up index.
2025-03-16 15:16:11,033:INFO:Initializing predict_model()
2025-03-16 15:16:11,033:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E4BDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98FE0>)
2025-03-16 15:16:11,033:INFO:Checking exceptions
2025-03-16 15:16:11,033:INFO:Preloading libraries
2025-03-16 15:16:11,033:INFO:Set up data.
2025-03-16 15:16:11,036:INFO:Set up index.
2025-03-16 15:16:11,152:INFO:Initializing predict_model()
2025-03-16 15:16:11,152:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BA6A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98220>)
2025-03-16 15:16:11,152:INFO:Checking exceptions
2025-03-16 15:16:11,152:INFO:Preloading libraries
2025-03-16 15:16:11,152:INFO:Set up data.
2025-03-16 15:16:11,155:INFO:Set up index.
2025-03-16 15:16:11,275:INFO:Initializing predict_model()
2025-03-16 15:16:11,275:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D95B010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:11,275:INFO:Checking exceptions
2025-03-16 15:16:11,275:INFO:Preloading libraries
2025-03-16 15:16:11,275:INFO:Set up data.
2025-03-16 15:16:11,278:INFO:Set up index.
2025-03-16 15:16:11,416:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\2377297925.py:32: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  data_compare = pd.concat([data_compare, predict_test_1], axis=0)

2025-03-16 15:16:11,420:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\2377297925.py:44: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  result = pd.concat([result, predict_test_1], axis=0)

2025-03-16 15:16:11,431:INFO:Initializing predict_model()
2025-03-16 15:16:11,431:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BA4D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9A480>)
2025-03-16 15:16:11,431:INFO:Checking exceptions
2025-03-16 15:16:11,431:INFO:Preloading libraries
2025-03-16 15:16:11,431:INFO:Set up data.
2025-03-16 15:16:11,434:INFO:Set up index.
2025-03-16 15:16:11,564:INFO:Initializing predict_model()
2025-03-16 15:16:11,564:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F2890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B100>)
2025-03-16 15:16:11,564:INFO:Checking exceptions
2025-03-16 15:16:11,564:INFO:Preloading libraries
2025-03-16 15:16:11,564:INFO:Set up data.
2025-03-16 15:16:11,567:INFO:Set up index.
2025-03-16 15:16:11,688:INFO:Initializing predict_model()
2025-03-16 15:16:11,688:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AF0810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA982C0>)
2025-03-16 15:16:11,688:INFO:Checking exceptions
2025-03-16 15:16:11,688:INFO:Preloading libraries
2025-03-16 15:16:11,688:INFO:Set up data.
2025-03-16 15:16:11,691:INFO:Set up index.
2025-03-16 15:16:11,802:INFO:Initializing predict_model()
2025-03-16 15:16:11,802:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B894790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9A480>)
2025-03-16 15:16:11,802:INFO:Checking exceptions
2025-03-16 15:16:11,802:INFO:Preloading libraries
2025-03-16 15:16:11,802:INFO:Set up data.
2025-03-16 15:16:11,805:INFO:Set up index.
2025-03-16 15:16:11,921:INFO:Initializing predict_model()
2025-03-16 15:16:11,923:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B5D290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B600>)
2025-03-16 15:16:11,923:INFO:Checking exceptions
2025-03-16 15:16:11,923:INFO:Preloading libraries
2025-03-16 15:16:11,923:INFO:Set up data.
2025-03-16 15:16:11,924:INFO:Set up index.
2025-03-16 15:16:12,042:INFO:Initializing predict_model()
2025-03-16 15:16:12,042:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B35C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98220>)
2025-03-16 15:16:12,042:INFO:Checking exceptions
2025-03-16 15:16:12,042:INFO:Preloading libraries
2025-03-16 15:16:12,042:INFO:Set up data.
2025-03-16 15:16:12,045:INFO:Set up index.
2025-03-16 15:16:12,156:INFO:Initializing predict_model()
2025-03-16 15:16:12,156:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3C410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98F40>)
2025-03-16 15:16:12,156:INFO:Checking exceptions
2025-03-16 15:16:12,158:INFO:Preloading libraries
2025-03-16 15:16:12,158:INFO:Set up data.
2025-03-16 15:16:12,160:INFO:Set up index.
2025-03-16 15:16:12,270:INFO:Initializing predict_model()
2025-03-16 15:16:12,270:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BBF010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9A2A0>)
2025-03-16 15:16:12,270:INFO:Checking exceptions
2025-03-16 15:16:12,270:INFO:Preloading libraries
2025-03-16 15:16:12,270:INFO:Set up data.
2025-03-16 15:16:12,273:INFO:Set up index.
2025-03-16 15:16:12,381:INFO:Initializing predict_model()
2025-03-16 15:16:12,381:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A29690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA998A0>)
2025-03-16 15:16:12,381:INFO:Checking exceptions
2025-03-16 15:16:12,381:INFO:Preloading libraries
2025-03-16 15:16:12,381:INFO:Set up data.
2025-03-16 15:16:12,384:INFO:Set up index.
2025-03-16 15:16:12,493:INFO:Initializing predict_model()
2025-03-16 15:16:12,493:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B730310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B6A0>)
2025-03-16 15:16:12,493:INFO:Checking exceptions
2025-03-16 15:16:12,493:INFO:Preloading libraries
2025-03-16 15:16:12,493:INFO:Set up data.
2025-03-16 15:16:12,495:INFO:Set up index.
2025-03-16 15:16:12,603:INFO:Initializing predict_model()
2025-03-16 15:16:12,603:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AF9810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:12,603:INFO:Checking exceptions
2025-03-16 15:16:12,603:INFO:Preloading libraries
2025-03-16 15:16:12,603:INFO:Set up data.
2025-03-16 15:16:12,605:INFO:Set up index.
2025-03-16 15:16:12,710:INFO:Initializing predict_model()
2025-03-16 15:16:12,710:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A02E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B1A0>)
2025-03-16 15:16:12,710:INFO:Checking exceptions
2025-03-16 15:16:12,710:INFO:Preloading libraries
2025-03-16 15:16:12,710:INFO:Set up data.
2025-03-16 15:16:12,712:INFO:Set up index.
2025-03-16 15:16:12,816:INFO:Initializing predict_model()
2025-03-16 15:16:12,816:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CC5C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98FE0>)
2025-03-16 15:16:12,816:INFO:Checking exceptions
2025-03-16 15:16:12,816:INFO:Preloading libraries
2025-03-16 15:16:12,816:INFO:Set up data.
2025-03-16 15:16:12,819:INFO:Set up index.
2025-03-16 15:16:12,926:INFO:Initializing predict_model()
2025-03-16 15:16:12,926:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3D310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99E40>)
2025-03-16 15:16:12,926:INFO:Checking exceptions
2025-03-16 15:16:12,926:INFO:Preloading libraries
2025-03-16 15:16:12,926:INFO:Set up data.
2025-03-16 15:16:12,929:INFO:Set up index.
2025-03-16 15:16:13,039:INFO:Initializing predict_model()
2025-03-16 15:16:13,039:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BBEA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:13,039:INFO:Checking exceptions
2025-03-16 15:16:13,039:INFO:Preloading libraries
2025-03-16 15:16:13,039:INFO:Set up data.
2025-03-16 15:16:13,043:INFO:Set up index.
2025-03-16 15:16:13,153:INFO:Initializing predict_model()
2025-03-16 15:16:13,153:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B908690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B100>)
2025-03-16 15:16:13,153:INFO:Checking exceptions
2025-03-16 15:16:13,153:INFO:Preloading libraries
2025-03-16 15:16:13,153:INFO:Set up data.
2025-03-16 15:16:13,156:INFO:Set up index.
2025-03-16 15:16:13,277:INFO:Initializing predict_model()
2025-03-16 15:16:13,277:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91003990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA982C0>)
2025-03-16 15:16:13,277:INFO:Checking exceptions
2025-03-16 15:16:13,277:INFO:Preloading libraries
2025-03-16 15:16:13,277:INFO:Set up data.
2025-03-16 15:16:13,280:INFO:Set up index.
2025-03-16 15:16:13,411:INFO:Initializing predict_model()
2025-03-16 15:16:13,411:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3C610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9A480>)
2025-03-16 15:16:13,411:INFO:Checking exceptions
2025-03-16 15:16:13,411:INFO:Preloading libraries
2025-03-16 15:16:13,411:INFO:Set up data.
2025-03-16 15:16:13,414:INFO:Set up index.
2025-03-16 15:16:13,541:INFO:Initializing predict_model()
2025-03-16 15:16:13,541:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90AF2010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B600>)
2025-03-16 15:16:13,541:INFO:Checking exceptions
2025-03-16 15:16:13,541:INFO:Preloading libraries
2025-03-16 15:16:13,541:INFO:Set up data.
2025-03-16 15:16:13,545:INFO:Set up index.
2025-03-16 15:16:13,674:INFO:Initializing predict_model()
2025-03-16 15:16:13,674:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3CED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98220>)
2025-03-16 15:16:13,674:INFO:Checking exceptions
2025-03-16 15:16:13,674:INFO:Preloading libraries
2025-03-16 15:16:13,674:INFO:Set up data.
2025-03-16 15:16:13,677:INFO:Set up index.
2025-03-16 15:16:13,809:INFO:Initializing predict_model()
2025-03-16 15:16:13,809:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E3CED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98F40>)
2025-03-16 15:16:13,809:INFO:Checking exceptions
2025-03-16 15:16:13,809:INFO:Preloading libraries
2025-03-16 15:16:13,809:INFO:Set up data.
2025-03-16 15:16:13,813:INFO:Set up index.
2025-03-16 15:16:13,934:INFO:Initializing predict_model()
2025-03-16 15:16:13,934:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CC6890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9A2A0>)
2025-03-16 15:16:13,934:INFO:Checking exceptions
2025-03-16 15:16:13,934:INFO:Preloading libraries
2025-03-16 15:16:13,934:INFO:Set up data.
2025-03-16 15:16:13,937:INFO:Set up index.
2025-03-16 15:16:14,057:INFO:Initializing predict_model()
2025-03-16 15:16:14,057:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB60950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA998A0>)
2025-03-16 15:16:14,057:INFO:Checking exceptions
2025-03-16 15:16:14,057:INFO:Preloading libraries
2025-03-16 15:16:14,057:INFO:Set up data.
2025-03-16 15:16:14,060:INFO:Set up index.
2025-03-16 15:16:14,187:INFO:Initializing predict_model()
2025-03-16 15:16:14,188:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B87F750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B6A0>)
2025-03-16 15:16:14,188:INFO:Checking exceptions
2025-03-16 15:16:14,188:INFO:Preloading libraries
2025-03-16 15:16:14,188:INFO:Set up data.
2025-03-16 15:16:14,190:INFO:Set up index.
2025-03-16 15:16:14,305:INFO:Initializing predict_model()
2025-03-16 15:16:14,305:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DF6550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:14,305:INFO:Checking exceptions
2025-03-16 15:16:14,305:INFO:Preloading libraries
2025-03-16 15:16:14,306:INFO:Set up data.
2025-03-16 15:16:14,308:INFO:Set up index.
2025-03-16 15:16:14,432:INFO:Initializing predict_model()
2025-03-16 15:16:14,432:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D169810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9B1A0>)
2025-03-16 15:16:14,432:INFO:Checking exceptions
2025-03-16 15:16:14,432:INFO:Preloading libraries
2025-03-16 15:16:14,432:INFO:Set up data.
2025-03-16 15:16:14,436:INFO:Set up index.
2025-03-16 15:16:14,593:INFO:Initializing predict_model()
2025-03-16 15:16:14,593:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A2ACD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98FE0>)
2025-03-16 15:16:14,593:INFO:Checking exceptions
2025-03-16 15:16:14,593:INFO:Preloading libraries
2025-03-16 15:16:14,593:INFO:Set up data.
2025-03-16 15:16:14,597:INFO:Set up index.
2025-03-16 15:16:14,724:INFO:Initializing predict_model()
2025-03-16 15:16:14,724:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DC00690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA99E40>)
2025-03-16 15:16:14,724:INFO:Checking exceptions
2025-03-16 15:16:14,724:INFO:Preloading libraries
2025-03-16 15:16:14,724:INFO:Set up data.
2025-03-16 15:16:14,727:INFO:Set up index.
2025-03-16 15:16:14,840:INFO:Initializing predict_model()
2025-03-16 15:16:14,840:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBFAA50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['year', 'month', 'day',
                                             'day_of_week', 'week_of_year',
                                             'season', 'is_weekend',
                                             'day_of_year', 'month_sin',
                                             'month_cos', 'day_of_week_sin',
                                             'day_of_week_cos',
                                             'tempera...
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', DecisionTreeRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:14,840:INFO:Checking exceptions
2025-03-16 15:16:14,840:INFO:Preloading libraries
2025-03-16 15:16:14,840:INFO:Set up data.
2025-03-16 15:16:14,841:INFO:Set up index.
2025-03-16 15:16:14,969:INFO:Initializing load_model()
2025-03-16 15:16:14,969:INFO:load_model(model_name=../Surat/main/br_humi_u_temp_model_jsps01, platform=None, authentication=None, verbose=True)
2025-03-16 15:16:15,080:INFO:Initializing predict_model()
2025-03-16 15:16:15,080:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D323590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BE20>)
2025-03-16 15:16:15,080:INFO:Checking exceptions
2025-03-16 15:16:15,081:INFO:Preloading libraries
2025-03-16 15:16:15,081:INFO:Set up data.
2025-03-16 15:16:15,085:INFO:Set up index.
2025-03-16 15:16:15,195:INFO:Initializing predict_model()
2025-03-16 15:16:15,195:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E12950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:15,195:INFO:Checking exceptions
2025-03-16 15:16:15,195:INFO:Preloading libraries
2025-03-16 15:16:15,195:INFO:Set up data.
2025-03-16 15:16:15,198:INFO:Set up index.
2025-03-16 15:16:15,318:INFO:Initializing predict_model()
2025-03-16 15:16:15,318:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB85310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:15,318:INFO:Checking exceptions
2025-03-16 15:16:15,318:INFO:Preloading libraries
2025-03-16 15:16:15,318:INFO:Set up data.
2025-03-16 15:16:15,321:INFO:Set up index.
2025-03-16 15:16:15,435:INFO:Initializing predict_model()
2025-03-16 15:16:15,435:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D95B050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:15,435:INFO:Checking exceptions
2025-03-16 15:16:15,435:INFO:Preloading libraries
2025-03-16 15:16:15,435:INFO:Set up data.
2025-03-16 15:16:15,437:INFO:Set up index.
2025-03-16 15:16:15,550:INFO:Initializing predict_model()
2025-03-16 15:16:15,550:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B5EFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:15,550:INFO:Checking exceptions
2025-03-16 15:16:15,550:INFO:Preloading libraries
2025-03-16 15:16:15,550:INFO:Set up data.
2025-03-16 15:16:15,554:INFO:Set up index.
2025-03-16 15:16:15,664:INFO:Initializing predict_model()
2025-03-16 15:16:15,664:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E55790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:15,664:INFO:Checking exceptions
2025-03-16 15:16:15,664:INFO:Preloading libraries
2025-03-16 15:16:15,665:INFO:Set up data.
2025-03-16 15:16:15,668:INFO:Set up index.
2025-03-16 15:16:15,778:INFO:Initializing predict_model()
2025-03-16 15:16:15,778:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914BA550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:15,778:INFO:Checking exceptions
2025-03-16 15:16:15,778:INFO:Preloading libraries
2025-03-16 15:16:15,778:INFO:Set up data.
2025-03-16 15:16:15,781:INFO:Set up index.
2025-03-16 15:16:15,896:INFO:Initializing predict_model()
2025-03-16 15:16:15,896:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D328210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:15,896:INFO:Checking exceptions
2025-03-16 15:16:15,896:INFO:Preloading libraries
2025-03-16 15:16:15,896:INFO:Set up data.
2025-03-16 15:16:15,899:INFO:Set up index.
2025-03-16 15:16:16,016:INFO:Initializing predict_model()
2025-03-16 15:16:16,016:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBB9850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:16,016:INFO:Checking exceptions
2025-03-16 15:16:16,016:INFO:Preloading libraries
2025-03-16 15:16:16,016:INFO:Set up data.
2025-03-16 15:16:16,019:INFO:Set up index.
2025-03-16 15:16:16,132:INFO:Initializing predict_model()
2025-03-16 15:16:16,132:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BBC910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:16,132:INFO:Checking exceptions
2025-03-16 15:16:16,132:INFO:Preloading libraries
2025-03-16 15:16:16,132:INFO:Set up data.
2025-03-16 15:16:16,135:INFO:Set up index.
2025-03-16 15:16:16,249:INFO:Initializing predict_model()
2025-03-16 15:16:16,249:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E55790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:16,249:INFO:Checking exceptions
2025-03-16 15:16:16,249:INFO:Preloading libraries
2025-03-16 15:16:16,249:INFO:Set up data.
2025-03-16 15:16:16,254:INFO:Set up index.
2025-03-16 15:16:16,384:INFO:Initializing predict_model()
2025-03-16 15:16:16,385:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914BA390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:16,385:INFO:Checking exceptions
2025-03-16 15:16:16,385:INFO:Preloading libraries
2025-03-16 15:16:16,385:INFO:Set up data.
2025-03-16 15:16:16,388:INFO:Set up index.
2025-03-16 15:16:16,536:INFO:Initializing predict_model()
2025-03-16 15:16:16,536:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91013190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:16,536:INFO:Checking exceptions
2025-03-16 15:16:16,536:INFO:Preloading libraries
2025-03-16 15:16:16,537:INFO:Set up data.
2025-03-16 15:16:16,543:INFO:Set up index.
2025-03-16 15:16:16,657:INFO:Initializing predict_model()
2025-03-16 15:16:16,657:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A13290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:16,659:INFO:Checking exceptions
2025-03-16 15:16:16,659:INFO:Preloading libraries
2025-03-16 15:16:16,659:INFO:Set up data.
2025-03-16 15:16:16,662:INFO:Set up index.
2025-03-16 15:16:16,774:INFO:Initializing predict_model()
2025-03-16 15:16:16,774:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DF4ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:16,774:INFO:Checking exceptions
2025-03-16 15:16:16,774:INFO:Preloading libraries
2025-03-16 15:16:16,774:INFO:Set up data.
2025-03-16 15:16:16,779:INFO:Set up index.
2025-03-16 15:16:16,894:INFO:Initializing predict_model()
2025-03-16 15:16:16,894:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CC7790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:16,894:INFO:Checking exceptions
2025-03-16 15:16:16,894:INFO:Preloading libraries
2025-03-16 15:16:16,894:INFO:Set up data.
2025-03-16 15:16:16,897:INFO:Set up index.
2025-03-16 15:16:17,016:INFO:Initializing predict_model()
2025-03-16 15:16:17,016:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE912E7B10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:17,016:INFO:Checking exceptions
2025-03-16 15:16:17,016:INFO:Preloading libraries
2025-03-16 15:16:17,016:INFO:Set up data.
2025-03-16 15:16:17,021:INFO:Set up index.
2025-03-16 15:16:17,140:INFO:Initializing predict_model()
2025-03-16 15:16:17,140:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBD7250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:17,140:INFO:Checking exceptions
2025-03-16 15:16:17,140:INFO:Preloading libraries
2025-03-16 15:16:17,140:INFO:Set up data.
2025-03-16 15:16:17,143:INFO:Set up index.
2025-03-16 15:16:17,254:INFO:Initializing predict_model()
2025-03-16 15:16:17,254:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90288950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:17,254:INFO:Checking exceptions
2025-03-16 15:16:17,254:INFO:Preloading libraries
2025-03-16 15:16:17,254:INFO:Set up data.
2025-03-16 15:16:17,257:INFO:Set up index.
2025-03-16 15:16:17,371:INFO:Initializing predict_model()
2025-03-16 15:16:17,371:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90FF3D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:17,371:INFO:Checking exceptions
2025-03-16 15:16:17,371:INFO:Preloading libraries
2025-03-16 15:16:17,371:INFO:Set up data.
2025-03-16 15:16:17,375:INFO:Set up index.
2025-03-16 15:16:17,490:INFO:Initializing predict_model()
2025-03-16 15:16:17,490:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8027750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:17,490:INFO:Checking exceptions
2025-03-16 15:16:17,490:INFO:Preloading libraries
2025-03-16 15:16:17,490:INFO:Set up data.
2025-03-16 15:16:17,494:INFO:Set up index.
2025-03-16 15:16:17,628:INFO:Initializing predict_model()
2025-03-16 15:16:17,628:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBD7650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:17,628:INFO:Checking exceptions
2025-03-16 15:16:17,628:INFO:Preloading libraries
2025-03-16 15:16:17,628:INFO:Set up data.
2025-03-16 15:16:17,631:INFO:Set up index.
2025-03-16 15:16:17,750:INFO:Initializing predict_model()
2025-03-16 15:16:17,750:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DF7550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:17,750:INFO:Checking exceptions
2025-03-16 15:16:17,750:INFO:Preloading libraries
2025-03-16 15:16:17,750:INFO:Set up data.
2025-03-16 15:16:17,754:INFO:Set up index.
2025-03-16 15:16:17,881:INFO:Initializing predict_model()
2025-03-16 15:16:17,881:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AFD1050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:17,881:INFO:Checking exceptions
2025-03-16 15:16:17,883:INFO:Preloading libraries
2025-03-16 15:16:17,883:INFO:Set up data.
2025-03-16 15:16:17,887:INFO:Set up index.
2025-03-16 15:16:18,019:INFO:Initializing predict_model()
2025-03-16 15:16:18,019:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A12590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:18,019:INFO:Checking exceptions
2025-03-16 15:16:18,019:INFO:Preloading libraries
2025-03-16 15:16:18,019:INFO:Set up data.
2025-03-16 15:16:18,023:INFO:Set up index.
2025-03-16 15:16:18,140:INFO:Initializing predict_model()
2025-03-16 15:16:18,141:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DF4ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:18,141:INFO:Checking exceptions
2025-03-16 15:16:18,141:INFO:Preloading libraries
2025-03-16 15:16:18,141:INFO:Set up data.
2025-03-16 15:16:18,144:INFO:Set up index.
2025-03-16 15:16:18,252:INFO:Initializing predict_model()
2025-03-16 15:16:18,253:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E1FBD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:18,253:INFO:Checking exceptions
2025-03-16 15:16:18,253:INFO:Preloading libraries
2025-03-16 15:16:18,253:INFO:Set up data.
2025-03-16 15:16:18,256:INFO:Set up index.
2025-03-16 15:16:18,367:INFO:Initializing predict_model()
2025-03-16 15:16:18,367:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CE7950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:18,367:INFO:Checking exceptions
2025-03-16 15:16:18,367:INFO:Preloading libraries
2025-03-16 15:16:18,367:INFO:Set up data.
2025-03-16 15:16:18,370:INFO:Set up index.
2025-03-16 15:16:18,481:INFO:Initializing predict_model()
2025-03-16 15:16:18,481:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0308510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:18,481:INFO:Checking exceptions
2025-03-16 15:16:18,481:INFO:Preloading libraries
2025-03-16 15:16:18,481:INFO:Set up data.
2025-03-16 15:16:18,486:INFO:Set up index.
2025-03-16 15:16:18,601:INFO:Initializing predict_model()
2025-03-16 15:16:18,601:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90C903D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:18,601:INFO:Checking exceptions
2025-03-16 15:16:18,601:INFO:Preloading libraries
2025-03-16 15:16:18,602:INFO:Set up data.
2025-03-16 15:16:18,604:INFO:Set up index.
2025-03-16 15:16:18,717:INFO:Initializing predict_model()
2025-03-16 15:16:18,717:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AFD1050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:18,717:INFO:Checking exceptions
2025-03-16 15:16:18,717:INFO:Preloading libraries
2025-03-16 15:16:18,717:INFO:Set up data.
2025-03-16 15:16:18,720:INFO:Set up index.
2025-03-16 15:16:18,825:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\1056844038.py:44: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  result_humi = pd.concat([result_humi, predict_test_1], axis=0)

2025-03-16 15:16:18,834:INFO:Initializing predict_model()
2025-03-16 15:16:18,834:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914BA550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:18,834:INFO:Checking exceptions
2025-03-16 15:16:18,834:INFO:Preloading libraries
2025-03-16 15:16:18,834:INFO:Set up data.
2025-03-16 15:16:18,837:INFO:Set up index.
2025-03-16 15:16:18,954:INFO:Initializing predict_model()
2025-03-16 15:16:18,954:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8ACF0950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:18,954:INFO:Checking exceptions
2025-03-16 15:16:18,954:INFO:Preloading libraries
2025-03-16 15:16:18,954:INFO:Set up data.
2025-03-16 15:16:18,959:INFO:Set up index.
2025-03-16 15:16:19,074:INFO:Initializing predict_model()
2025-03-16 15:16:19,074:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED814D9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:19,074:INFO:Checking exceptions
2025-03-16 15:16:19,074:INFO:Preloading libraries
2025-03-16 15:16:19,076:INFO:Set up data.
2025-03-16 15:16:19,077:INFO:Set up index.
2025-03-16 15:16:19,196:INFO:Initializing predict_model()
2025-03-16 15:16:19,196:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ABFDD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:19,196:INFO:Checking exceptions
2025-03-16 15:16:19,196:INFO:Preloading libraries
2025-03-16 15:16:19,196:INFO:Set up data.
2025-03-16 15:16:19,201:INFO:Set up index.
2025-03-16 15:16:19,313:INFO:Initializing predict_model()
2025-03-16 15:16:19,313:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91476D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:19,313:INFO:Checking exceptions
2025-03-16 15:16:19,313:INFO:Preloading libraries
2025-03-16 15:16:19,313:INFO:Set up data.
2025-03-16 15:16:19,318:INFO:Set up index.
2025-03-16 15:16:19,432:INFO:Initializing predict_model()
2025-03-16 15:16:19,432:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A12890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:19,432:INFO:Checking exceptions
2025-03-16 15:16:19,432:INFO:Preloading libraries
2025-03-16 15:16:19,432:INFO:Set up data.
2025-03-16 15:16:19,435:INFO:Set up index.
2025-03-16 15:16:19,557:INFO:Initializing predict_model()
2025-03-16 15:16:19,557:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B94ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:19,557:INFO:Checking exceptions
2025-03-16 15:16:19,557:INFO:Preloading libraries
2025-03-16 15:16:19,557:INFO:Set up data.
2025-03-16 15:16:19,560:INFO:Set up index.
2025-03-16 15:16:19,700:INFO:Initializing predict_model()
2025-03-16 15:16:19,700:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AB53510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:19,700:INFO:Checking exceptions
2025-03-16 15:16:19,700:INFO:Preloading libraries
2025-03-16 15:16:19,700:INFO:Set up data.
2025-03-16 15:16:19,705:INFO:Set up index.
2025-03-16 15:16:19,832:INFO:Initializing predict_model()
2025-03-16 15:16:19,832:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBB6750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:19,832:INFO:Checking exceptions
2025-03-16 15:16:19,832:INFO:Preloading libraries
2025-03-16 15:16:19,832:INFO:Set up data.
2025-03-16 15:16:19,836:INFO:Set up index.
2025-03-16 15:16:19,955:INFO:Initializing predict_model()
2025-03-16 15:16:19,955:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB60A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:19,955:INFO:Checking exceptions
2025-03-16 15:16:19,955:INFO:Preloading libraries
2025-03-16 15:16:19,955:INFO:Set up data.
2025-03-16 15:16:19,959:INFO:Set up index.
2025-03-16 15:16:20,067:INFO:Initializing predict_model()
2025-03-16 15:16:20,067:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B5EC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:20,067:INFO:Checking exceptions
2025-03-16 15:16:20,067:INFO:Preloading libraries
2025-03-16 15:16:20,067:INFO:Set up data.
2025-03-16 15:16:20,072:INFO:Set up index.
2025-03-16 15:16:20,191:INFO:Initializing predict_model()
2025-03-16 15:16:20,191:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B730310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:20,191:INFO:Checking exceptions
2025-03-16 15:16:20,191:INFO:Preloading libraries
2025-03-16 15:16:20,191:INFO:Set up data.
2025-03-16 15:16:20,194:INFO:Set up index.
2025-03-16 15:16:20,303:INFO:Initializing predict_model()
2025-03-16 15:16:20,303:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B730410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:20,303:INFO:Checking exceptions
2025-03-16 15:16:20,303:INFO:Preloading libraries
2025-03-16 15:16:20,303:INFO:Set up data.
2025-03-16 15:16:20,306:INFO:Set up index.
2025-03-16 15:16:20,432:INFO:Initializing predict_model()
2025-03-16 15:16:20,432:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E64A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:20,432:INFO:Checking exceptions
2025-03-16 15:16:20,432:INFO:Preloading libraries
2025-03-16 15:16:20,432:INFO:Set up data.
2025-03-16 15:16:20,436:INFO:Set up index.
2025-03-16 15:16:20,549:INFO:Initializing predict_model()
2025-03-16 15:16:20,549:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91011F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:20,549:INFO:Checking exceptions
2025-03-16 15:16:20,549:INFO:Preloading libraries
2025-03-16 15:16:20,549:INFO:Set up data.
2025-03-16 15:16:20,553:INFO:Set up index.
2025-03-16 15:16:20,680:INFO:Initializing predict_model()
2025-03-16 15:16:20,681:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8F70FA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:20,681:INFO:Checking exceptions
2025-03-16 15:16:20,681:INFO:Preloading libraries
2025-03-16 15:16:20,681:INFO:Set up data.
2025-03-16 15:16:20,686:INFO:Set up index.
2025-03-16 15:16:20,812:INFO:Initializing predict_model()
2025-03-16 15:16:20,812:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE914BA390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:20,812:INFO:Checking exceptions
2025-03-16 15:16:20,813:INFO:Preloading libraries
2025-03-16 15:16:20,814:INFO:Set up data.
2025-03-16 15:16:20,818:INFO:Set up index.
2025-03-16 15:16:20,937:INFO:Initializing predict_model()
2025-03-16 15:16:20,937:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED86C3190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:20,937:INFO:Checking exceptions
2025-03-16 15:16:20,937:INFO:Preloading libraries
2025-03-16 15:16:20,937:INFO:Set up data.
2025-03-16 15:16:20,943:INFO:Set up index.
2025-03-16 15:16:21,053:INFO:Initializing predict_model()
2025-03-16 15:16:21,053:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DF7550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:21,053:INFO:Checking exceptions
2025-03-16 15:16:21,053:INFO:Preloading libraries
2025-03-16 15:16:21,053:INFO:Set up data.
2025-03-16 15:16:21,058:INFO:Set up index.
2025-03-16 15:16:21,180:INFO:Initializing predict_model()
2025-03-16 15:16:21,182:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DF4ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:21,182:INFO:Checking exceptions
2025-03-16 15:16:21,182:INFO:Preloading libraries
2025-03-16 15:16:21,182:INFO:Set up data.
2025-03-16 15:16:21,185:INFO:Set up index.
2025-03-16 15:16:21,301:INFO:Initializing predict_model()
2025-03-16 15:16:21,301:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ABD350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:21,301:INFO:Checking exceptions
2025-03-16 15:16:21,301:INFO:Preloading libraries
2025-03-16 15:16:21,301:INFO:Set up data.
2025-03-16 15:16:21,303:INFO:Set up index.
2025-03-16 15:16:21,440:INFO:Initializing predict_model()
2025-03-16 15:16:21,440:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B37F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:21,440:INFO:Checking exceptions
2025-03-16 15:16:21,440:INFO:Preloading libraries
2025-03-16 15:16:21,440:INFO:Set up data.
2025-03-16 15:16:21,443:INFO:Set up index.
2025-03-16 15:16:21,579:INFO:Initializing predict_model()
2025-03-16 15:16:21,579:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BBF610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:21,579:INFO:Checking exceptions
2025-03-16 15:16:21,579:INFO:Preloading libraries
2025-03-16 15:16:21,579:INFO:Set up data.
2025-03-16 15:16:21,586:INFO:Set up index.
2025-03-16 15:16:21,699:INFO:Initializing predict_model()
2025-03-16 15:16:21,699:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DF7C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:21,699:INFO:Checking exceptions
2025-03-16 15:16:21,699:INFO:Preloading libraries
2025-03-16 15:16:21,699:INFO:Set up data.
2025-03-16 15:16:21,702:INFO:Set up index.
2025-03-16 15:16:21,835:INFO:Initializing predict_model()
2025-03-16 15:16:21,835:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE910244D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:21,835:INFO:Checking exceptions
2025-03-16 15:16:21,835:INFO:Preloading libraries
2025-03-16 15:16:21,835:INFO:Set up data.
2025-03-16 15:16:21,838:INFO:Set up index.
2025-03-16 15:16:21,963:INFO:Initializing predict_model()
2025-03-16 15:16:21,963:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB80850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:21,963:INFO:Checking exceptions
2025-03-16 15:16:21,963:INFO:Preloading libraries
2025-03-16 15:16:21,964:INFO:Set up data.
2025-03-16 15:16:21,968:INFO:Set up index.
2025-03-16 15:16:22,083:INFO:Initializing predict_model()
2025-03-16 15:16:22,083:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBD4250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:22,083:INFO:Checking exceptions
2025-03-16 15:16:22,083:INFO:Preloading libraries
2025-03-16 15:16:22,085:INFO:Set up data.
2025-03-16 15:16:22,088:INFO:Set up index.
2025-03-16 15:16:22,202:INFO:Initializing predict_model()
2025-03-16 15:16:22,203:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E666D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['temperature', 'year', 'month',
                                             'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'is_weekend', 'day_of_year',
                                             'humidity_lag_1', 'humidity_lag_2',
                                             'humidity_lag_3', 'hu...
                                             'temperature_lag_3',
                                             'temperature_lag_4',
                                             'temperature_lag_5',
                                             'temperature_lag_6',
                                             'temperature_lag_7'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', BayesianRidge())]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BF60>)
2025-03-16 15:16:22,203:INFO:Checking exceptions
2025-03-16 15:16:22,203:INFO:Preloading libraries
2025-03-16 15:16:22,203:INFO:Set up data.
2025-03-16 15:16:22,205:INFO:Set up index.
2025-03-16 15:16:22,352:INFO:Initializing load_model()
2025-03-16 15:16:22,352:INFO:load_model(model_name=../Surat/main/gbr_pm_2_5_model, platform=None, authentication=None, verbose=True)
2025-03-16 15:16:22,466:INFO:Initializing predict_model()
2025-03-16 15:16:22,466:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DA59D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:22,466:INFO:Checking exceptions
2025-03-16 15:16:22,466:INFO:Preloading libraries
2025-03-16 15:16:22,466:INFO:Set up data.
2025-03-16 15:16:22,473:INFO:Set up index.
2025-03-16 15:16:22,583:INFO:Initializing predict_model()
2025-03-16 15:16:22,583:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D05AE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:22,583:INFO:Checking exceptions
2025-03-16 15:16:22,583:INFO:Preloading libraries
2025-03-16 15:16:22,583:INFO:Set up data.
2025-03-16 15:16:22,591:INFO:Set up index.
2025-03-16 15:16:22,731:INFO:Initializing predict_model()
2025-03-16 15:16:22,731:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90F38390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:22,731:INFO:Checking exceptions
2025-03-16 15:16:22,731:INFO:Preloading libraries
2025-03-16 15:16:22,732:INFO:Set up data.
2025-03-16 15:16:22,737:INFO:Set up index.
2025-03-16 15:16:22,850:INFO:Initializing predict_model()
2025-03-16 15:16:22,850:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8681CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:22,852:INFO:Checking exceptions
2025-03-16 15:16:22,852:INFO:Preloading libraries
2025-03-16 15:16:22,852:INFO:Set up data.
2025-03-16 15:16:22,857:INFO:Set up index.
2025-03-16 15:16:22,975:INFO:Initializing predict_model()
2025-03-16 15:16:22,975:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBAED50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:22,975:INFO:Checking exceptions
2025-03-16 15:16:22,975:INFO:Preloading libraries
2025-03-16 15:16:22,975:INFO:Set up data.
2025-03-16 15:16:22,979:INFO:Set up index.
2025-03-16 15:16:23,096:INFO:Initializing predict_model()
2025-03-16 15:16:23,096:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AB53510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:23,096:INFO:Checking exceptions
2025-03-16 15:16:23,096:INFO:Preloading libraries
2025-03-16 15:16:23,098:INFO:Set up data.
2025-03-16 15:16:23,102:INFO:Set up index.
2025-03-16 15:16:23,225:INFO:Initializing predict_model()
2025-03-16 15:16:23,225:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F2890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:23,225:INFO:Checking exceptions
2025-03-16 15:16:23,225:INFO:Preloading libraries
2025-03-16 15:16:23,225:INFO:Set up data.
2025-03-16 15:16:23,229:INFO:Set up index.
2025-03-16 15:16:23,379:INFO:Initializing predict_model()
2025-03-16 15:16:23,379:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901F2F10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:23,379:INFO:Checking exceptions
2025-03-16 15:16:23,379:INFO:Preloading libraries
2025-03-16 15:16:23,379:INFO:Set up data.
2025-03-16 15:16:23,386:INFO:Set up index.
2025-03-16 15:16:23,504:INFO:Initializing predict_model()
2025-03-16 15:16:23,504:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBB9850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:23,504:INFO:Checking exceptions
2025-03-16 15:16:23,504:INFO:Preloading libraries
2025-03-16 15:16:23,504:INFO:Set up data.
2025-03-16 15:16:23,510:INFO:Set up index.
2025-03-16 15:16:23,626:INFO:Initializing predict_model()
2025-03-16 15:16:23,626:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B2F7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:23,626:INFO:Checking exceptions
2025-03-16 15:16:23,626:INFO:Preloading libraries
2025-03-16 15:16:23,626:INFO:Set up data.
2025-03-16 15:16:23,630:INFO:Set up index.
2025-03-16 15:16:23,754:INFO:Initializing predict_model()
2025-03-16 15:16:23,754:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0383990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:23,754:INFO:Checking exceptions
2025-03-16 15:16:23,754:INFO:Preloading libraries
2025-03-16 15:16:23,754:INFO:Set up data.
2025-03-16 15:16:23,761:INFO:Set up index.
2025-03-16 15:16:23,879:INFO:Initializing predict_model()
2025-03-16 15:16:23,879:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBE2A50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:23,879:INFO:Checking exceptions
2025-03-16 15:16:23,879:INFO:Preloading libraries
2025-03-16 15:16:23,879:INFO:Set up data.
2025-03-16 15:16:23,883:INFO:Set up index.
2025-03-16 15:16:24,006:INFO:Initializing predict_model()
2025-03-16 15:16:24,006:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBB48D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:24,006:INFO:Checking exceptions
2025-03-16 15:16:24,006:INFO:Preloading libraries
2025-03-16 15:16:24,006:INFO:Set up data.
2025-03-16 15:16:24,012:INFO:Set up index.
2025-03-16 15:16:24,137:INFO:Initializing predict_model()
2025-03-16 15:16:24,137:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901EF750>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:24,137:INFO:Checking exceptions
2025-03-16 15:16:24,137:INFO:Preloading libraries
2025-03-16 15:16:24,138:INFO:Set up data.
2025-03-16 15:16:24,143:INFO:Set up index.
2025-03-16 15:16:24,261:INFO:Initializing predict_model()
2025-03-16 15:16:24,261:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ABE310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:24,261:INFO:Checking exceptions
2025-03-16 15:16:24,261:INFO:Preloading libraries
2025-03-16 15:16:24,261:INFO:Set up data.
2025-03-16 15:16:24,267:INFO:Set up index.
2025-03-16 15:16:24,385:INFO:Initializing predict_model()
2025-03-16 15:16:24,385:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ABEFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:24,385:INFO:Checking exceptions
2025-03-16 15:16:24,385:INFO:Preloading libraries
2025-03-16 15:16:24,385:INFO:Set up data.
2025-03-16 15:16:24,391:INFO:Set up index.
2025-03-16 15:16:24,506:INFO:Initializing predict_model()
2025-03-16 15:16:24,506:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8ABF4850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:24,506:INFO:Checking exceptions
2025-03-16 15:16:24,506:INFO:Preloading libraries
2025-03-16 15:16:24,506:INFO:Set up data.
2025-03-16 15:16:24,510:INFO:Set up index.
2025-03-16 15:16:24,635:INFO:Initializing predict_model()
2025-03-16 15:16:24,635:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBAEE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:24,635:INFO:Checking exceptions
2025-03-16 15:16:24,635:INFO:Preloading libraries
2025-03-16 15:16:24,635:INFO:Set up data.
2025-03-16 15:16:24,640:INFO:Set up index.
2025-03-16 15:16:24,754:INFO:Initializing predict_model()
2025-03-16 15:16:24,754:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90B5EB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:24,754:INFO:Checking exceptions
2025-03-16 15:16:24,754:INFO:Preloading libraries
2025-03-16 15:16:24,754:INFO:Set up data.
2025-03-16 15:16:24,760:INFO:Set up index.
2025-03-16 15:16:24,883:INFO:Initializing predict_model()
2025-03-16 15:16:24,883:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A2F810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:24,884:INFO:Checking exceptions
2025-03-16 15:16:24,884:INFO:Preloading libraries
2025-03-16 15:16:24,884:INFO:Set up data.
2025-03-16 15:16:24,889:INFO:Set up index.
2025-03-16 15:16:25,011:INFO:Initializing predict_model()
2025-03-16 15:16:25,011:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E551D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:25,012:INFO:Checking exceptions
2025-03-16 15:16:25,012:INFO:Preloading libraries
2025-03-16 15:16:25,012:INFO:Set up data.
2025-03-16 15:16:25,018:INFO:Set up index.
2025-03-16 15:16:25,140:INFO:Initializing predict_model()
2025-03-16 15:16:25,140:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8C57D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:25,140:INFO:Checking exceptions
2025-03-16 15:16:25,140:INFO:Preloading libraries
2025-03-16 15:16:25,140:INFO:Set up data.
2025-03-16 15:16:25,145:INFO:Set up index.
2025-03-16 15:16:25,263:INFO:Initializing predict_model()
2025-03-16 15:16:25,263:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE901EF550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:25,263:INFO:Checking exceptions
2025-03-16 15:16:25,263:INFO:Preloading libraries
2025-03-16 15:16:25,264:INFO:Set up data.
2025-03-16 15:16:25,269:INFO:Set up index.
2025-03-16 15:16:25,383:INFO:Initializing predict_model()
2025-03-16 15:16:25,383:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB634D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:25,383:INFO:Checking exceptions
2025-03-16 15:16:25,383:INFO:Preloading libraries
2025-03-16 15:16:25,383:INFO:Set up data.
2025-03-16 15:16:25,388:INFO:Set up index.
2025-03-16 15:16:25,506:INFO:Initializing predict_model()
2025-03-16 15:16:25,506:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90DE3490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:25,506:INFO:Checking exceptions
2025-03-16 15:16:25,507:INFO:Preloading libraries
2025-03-16 15:16:25,507:INFO:Set up data.
2025-03-16 15:16:25,511:INFO:Set up index.
2025-03-16 15:16:25,629:INFO:Initializing predict_model()
2025-03-16 15:16:25,629:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91000950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:25,630:INFO:Checking exceptions
2025-03-16 15:16:25,630:INFO:Preloading libraries
2025-03-16 15:16:25,630:INFO:Set up data.
2025-03-16 15:16:25,635:INFO:Set up index.
2025-03-16 15:16:25,761:INFO:Initializing predict_model()
2025-03-16 15:16:25,761:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90E6F9D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:25,761:INFO:Checking exceptions
2025-03-16 15:16:25,761:INFO:Preloading libraries
2025-03-16 15:16:25,761:INFO:Set up data.
2025-03-16 15:16:25,765:INFO:Set up index.
2025-03-16 15:16:25,886:INFO:Initializing predict_model()
2025-03-16 15:16:25,886:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D05DC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:25,886:INFO:Checking exceptions
2025-03-16 15:16:25,886:INFO:Preloading libraries
2025-03-16 15:16:25,886:INFO:Set up data.
2025-03-16 15:16:25,892:INFO:Set up index.
2025-03-16 15:16:26,009:INFO:Initializing predict_model()
2025-03-16 15:16:26,009:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0D4D8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:26,009:INFO:Checking exceptions
2025-03-16 15:16:26,011:INFO:Preloading libraries
2025-03-16 15:16:26,011:INFO:Set up data.
2025-03-16 15:16:26,017:INFO:Set up index.
2025-03-16 15:16:26,135:INFO:Initializing predict_model()
2025-03-16 15:16:26,135:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B44C8D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:26,135:INFO:Checking exceptions
2025-03-16 15:16:26,135:INFO:Preloading libraries
2025-03-16 15:16:26,135:INFO:Set up data.
2025-03-16 15:16:26,140:INFO:Set up index.
2025-03-16 15:16:26,255:INFO:Initializing predict_model()
2025-03-16 15:16:26,255:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90ABEFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:26,255:INFO:Checking exceptions
2025-03-16 15:16:26,255:INFO:Preloading libraries
2025-03-16 15:16:26,255:INFO:Set up data.
2025-03-16 15:16:26,260:INFO:Set up index.
2025-03-16 15:16:26,386:WARNING:C:\Users\Saeb0m\AppData\Local\Temp\ipykernel_20836\107897864.py:45: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.
  result_pm_2_5 = pd.concat([result_pm_2_5, predict_test_1], axis=0)

2025-03-16 15:16:26,398:INFO:Initializing predict_model()
2025-03-16 15:16:26,398:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D328990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:26,398:INFO:Checking exceptions
2025-03-16 15:16:26,398:INFO:Preloading libraries
2025-03-16 15:16:26,398:INFO:Set up data.
2025-03-16 15:16:26,404:INFO:Set up index.
2025-03-16 15:16:26,519:INFO:Initializing predict_model()
2025-03-16 15:16:26,519:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B419D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:26,519:INFO:Checking exceptions
2025-03-16 15:16:26,519:INFO:Preloading libraries
2025-03-16 15:16:26,519:INFO:Set up data.
2025-03-16 15:16:26,525:INFO:Set up index.
2025-03-16 15:16:26,642:INFO:Initializing predict_model()
2025-03-16 15:16:26,642:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DED8FE3090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:26,642:INFO:Checking exceptions
2025-03-16 15:16:26,642:INFO:Preloading libraries
2025-03-16 15:16:26,642:INFO:Set up data.
2025-03-16 15:16:26,647:INFO:Set up index.
2025-03-16 15:16:26,767:INFO:Initializing predict_model()
2025-03-16 15:16:26,767:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DBE1C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:26,767:INFO:Checking exceptions
2025-03-16 15:16:26,767:INFO:Preloading libraries
2025-03-16 15:16:26,767:INFO:Set up data.
2025-03-16 15:16:26,774:INFO:Set up index.
2025-03-16 15:16:26,892:INFO:Initializing predict_model()
2025-03-16 15:16:26,893:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A27590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:26,893:INFO:Checking exceptions
2025-03-16 15:16:26,893:INFO:Preloading libraries
2025-03-16 15:16:26,893:INFO:Set up data.
2025-03-16 15:16:26,898:INFO:Set up index.
2025-03-16 15:16:27,042:INFO:Initializing predict_model()
2025-03-16 15:16:27,042:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90FF0350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:27,042:INFO:Checking exceptions
2025-03-16 15:16:27,042:INFO:Preloading libraries
2025-03-16 15:16:27,042:INFO:Set up data.
2025-03-16 15:16:27,048:INFO:Set up index.
2025-03-16 15:16:27,178:INFO:Initializing predict_model()
2025-03-16 15:16:27,178:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90C903D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:27,178:INFO:Checking exceptions
2025-03-16 15:16:27,178:INFO:Preloading libraries
2025-03-16 15:16:27,178:INFO:Set up data.
2025-03-16 15:16:27,184:INFO:Set up index.
2025-03-16 15:16:27,308:INFO:Initializing predict_model()
2025-03-16 15:16:27,308:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90BBE0D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:27,308:INFO:Checking exceptions
2025-03-16 15:16:27,308:INFO:Preloading libraries
2025-03-16 15:16:27,310:INFO:Set up data.
2025-03-16 15:16:27,314:INFO:Set up index.
2025-03-16 15:16:27,445:INFO:Initializing predict_model()
2025-03-16 15:16:27,445:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A11C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:27,445:INFO:Checking exceptions
2025-03-16 15:16:27,445:INFO:Preloading libraries
2025-03-16 15:16:27,445:INFO:Set up data.
2025-03-16 15:16:27,451:INFO:Set up index.
2025-03-16 15:16:27,578:INFO:Initializing predict_model()
2025-03-16 15:16:27,579:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DA5B350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:27,579:INFO:Checking exceptions
2025-03-16 15:16:27,579:INFO:Preloading libraries
2025-03-16 15:16:27,579:INFO:Set up data.
2025-03-16 15:16:27,583:INFO:Set up index.
2025-03-16 15:16:27,737:INFO:Initializing predict_model()
2025-03-16 15:16:27,737:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB60A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:27,737:INFO:Checking exceptions
2025-03-16 15:16:27,737:INFO:Preloading libraries
2025-03-16 15:16:27,737:INFO:Set up data.
2025-03-16 15:16:27,743:INFO:Set up index.
2025-03-16 15:16:27,880:INFO:Initializing predict_model()
2025-03-16 15:16:27,880:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE912F10D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:27,880:INFO:Checking exceptions
2025-03-16 15:16:27,880:INFO:Preloading libraries
2025-03-16 15:16:27,880:INFO:Set up data.
2025-03-16 15:16:27,886:INFO:Set up index.
2025-03-16 15:16:28,009:INFO:Initializing predict_model()
2025-03-16 15:16:28,009:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE9099F3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:28,009:INFO:Checking exceptions
2025-03-16 15:16:28,009:INFO:Preloading libraries
2025-03-16 15:16:28,009:INFO:Set up data.
2025-03-16 15:16:28,017:INFO:Set up index.
2025-03-16 15:16:28,155:INFO:Initializing predict_model()
2025-03-16 15:16:28,155:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE91002C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:28,155:INFO:Checking exceptions
2025-03-16 15:16:28,155:INFO:Preloading libraries
2025-03-16 15:16:28,155:INFO:Set up data.
2025-03-16 15:16:28,162:INFO:Set up index.
2025-03-16 15:16:28,318:INFO:Initializing predict_model()
2025-03-16 15:16:28,318:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A10510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:28,318:INFO:Checking exceptions
2025-03-16 15:16:28,318:INFO:Preloading libraries
2025-03-16 15:16:28,318:INFO:Set up data.
2025-03-16 15:16:28,327:INFO:Set up index.
2025-03-16 15:16:28,445:INFO:Initializing predict_model()
2025-03-16 15:16:28,445:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8D169810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:28,445:INFO:Checking exceptions
2025-03-16 15:16:28,445:INFO:Preloading libraries
2025-03-16 15:16:28,445:INFO:Set up data.
2025-03-16 15:16:28,451:INFO:Set up index.
2025-03-16 15:16:28,588:INFO:Initializing predict_model()
2025-03-16 15:16:28,588:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DA5B350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:28,588:INFO:Checking exceptions
2025-03-16 15:16:28,588:INFO:Preloading libraries
2025-03-16 15:16:28,588:INFO:Set up data.
2025-03-16 15:16:28,595:INFO:Set up index.
2025-03-16 15:16:28,726:INFO:Initializing predict_model()
2025-03-16 15:16:28,726:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90A30990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:28,726:INFO:Checking exceptions
2025-03-16 15:16:28,726:INFO:Preloading libraries
2025-03-16 15:16:28,726:INFO:Set up data.
2025-03-16 15:16:28,733:INFO:Set up index.
2025-03-16 15:16:28,865:INFO:Initializing predict_model()
2025-03-16 15:16:28,865:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE909E8110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:28,865:INFO:Checking exceptions
2025-03-16 15:16:28,865:INFO:Preloading libraries
2025-03-16 15:16:28,865:INFO:Set up data.
2025-03-16 15:16:28,874:INFO:Set up index.
2025-03-16 15:16:28,998:INFO:Initializing predict_model()
2025-03-16 15:16:28,998:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8BBBB1D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:28,998:INFO:Checking exceptions
2025-03-16 15:16:28,998:INFO:Preloading libraries
2025-03-16 15:16:28,998:INFO:Set up data.
2025-03-16 15:16:29,004:INFO:Set up index.
2025-03-16 15:16:29,125:INFO:Initializing predict_model()
2025-03-16 15:16:29,125:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8DB80850>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:29,125:INFO:Checking exceptions
2025-03-16 15:16:29,125:INFO:Preloading libraries
2025-03-16 15:16:29,125:INFO:Set up data.
2025-03-16 15:16:29,131:INFO:Set up index.
2025-03-16 15:16:29,267:INFO:Initializing predict_model()
2025-03-16 15:16:29,268:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90FF2D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:29,268:INFO:Checking exceptions
2025-03-16 15:16:29,268:INFO:Preloading libraries
2025-03-16 15:16:29,268:INFO:Set up data.
2025-03-16 15:16:29,273:INFO:Set up index.
2025-03-16 15:16:29,414:INFO:Initializing predict_model()
2025-03-16 15:16:29,414:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90CDCC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:29,414:INFO:Checking exceptions
2025-03-16 15:16:29,414:INFO:Preloading libraries
2025-03-16 15:16:29,414:INFO:Set up data.
2025-03-16 15:16:29,420:INFO:Set up index.
2025-03-16 15:16:29,544:INFO:Initializing predict_model()
2025-03-16 15:16:29,546:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE90FF2D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:29,546:INFO:Checking exceptions
2025-03-16 15:16:29,546:INFO:Preloading libraries
2025-03-16 15:16:29,546:INFO:Set up data.
2025-03-16 15:16:29,552:INFO:Set up index.
2025-03-16 15:16:29,687:INFO:Initializing predict_model()
2025-03-16 15:16:29,687:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8B730350>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA987C0>)
2025-03-16 15:16:29,687:INFO:Checking exceptions
2025-03-16 15:16:29,687:INFO:Preloading libraries
2025-03-16 15:16:29,687:INFO:Set up data.
2025-03-16 15:16:29,693:INFO:Set up index.
2025-03-16 15:16:29,828:INFO:Initializing predict_model()
2025-03-16 15:16:29,828:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DE8AFD1050>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA9BEC0>)
2025-03-16 15:16:29,828:INFO:Checking exceptions
2025-03-16 15:16:29,828:INFO:Preloading libraries
2025-03-16 15:16:29,828:INFO:Set up data.
2025-03-16 15:16:29,836:INFO:Set up index.
2025-03-16 15:16:29,979:INFO:Initializing predict_model()
2025-03-16 15:16:29,979:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001DEF0E49E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('date_feature_extractor',
                 TransformerWrapper(include=['date'],
                                    transformer=ExtractDateTimeFeatures())),
                ('numerical_imputer',
                 TransformerWrapper(include=['humidity', 'temperature', 'year',
                                             'month', 'day', 'day_of_week',
                                             'week_of_year', 'season',
                                             'dew_point', 'is_weekend',
                                             'temp_humidity_ratio',
                                             'heat_index', 'rh_index'...
                                             'pm_2_5_lag_8', 'pm_2_5_lag_9',
                                             'pm_2_5_lag_10', 'pm_2_5_lag_11',
                                             'pm_2_5_lag_12', ...],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('remove_outliers',
                 TransformerWrapper(transformer=RemoveOutliers(random_state=123))),
                ('trained_model', GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001DE8DA98B80>)
2025-03-16 15:16:29,979:INFO:Checking exceptions
2025-03-16 15:16:29,979:INFO:Preloading libraries
2025-03-16 15:16:29,979:INFO:Set up data.
2025-03-16 15:16:29,985:INFO:Set up index.
